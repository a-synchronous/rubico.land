#!/usr/bin/env node

require('rubico/global')
const rubico = require('rubico')
const x = require('rubico/x')
const IndexHtml = require('./internal/IndexHtml')
const FileSystem = require('./internal/FileSystem')

// FunctionNames() -> names Array<string>
const FunctionNames = function (lib) {
  const result = []
  for (const name in lib) {
    result.push(name)
    const fn = lib[name]
    for (const subName in fn) {
      result.push(`${name}.${subName}`)
    }
  }
  return result
}

/**
 * @name main
 *
 * @synopsis
 * ```coffeescript [specscript]
 * main(options {
 * }) -> Promise<>
 * ```
 */
const main = async function (options) {
  const publicFs = new FileSystem({ cwd: `${__dirname}/public` })

  await publicFs.rmrf('/index.html')
  await publicFs.rmrf('/tour')
  await publicFs.rmrf('/docs')
  await publicFs.rmrf('/blog')

  console.log('Creating index.html')
  await publicFs.writeFile('index.html', IndexHtml({
    path: '/',
    title: 'rubico - [a]synchronous functional programming',
    description: 'A library for creating async-enabled function compositions.',
  }))

  console.log('Creating tour/index.html')
  await publicFs.writeFile('tour/index.html', IndexHtml({
    path: '/tour',
    title: 'A tour of rubico',
    description: 'An overview of the rubico library',
  }))

  console.log('Creating docs/index.html')
  await publicFs.writeFile('docs/index.html', IndexHtml({
    path: '/docs',
    title: 'rubico documentation',
    description: 'A reference for the rubico library',
  }))

  console.log('Creating blog/index.html')
  await publicFs.writeFile('blog/index.html', IndexHtml({
    path: '/blog',
    title: 'rubico blog',
    description: 'A blog about the rubico library, JavaScript, and functional programming',
  }))

  const coreFunctionNames = FunctionNames(rubico)
  const deprecatedFunctionNames = [
    'pipe.sync',
    'tap.sync',
    'map.withIndex',
    'map.own',
    'filter.withIndex',
    'not.sync',
  ]

  for (const functionName of [...coreFunctionNames, ...deprecatedFunctionNames]) {
    console.log(`Creating docs/${functionName}`)
    await publicFs.writeFile(`docs/${functionName}.html`, IndexHtml({
      path: `/docs/${functionName}`,
      title: `${functionName} - rubico documentation`,
      description: `Reference for ${functionName}`,
    }))
  }

  const xFunctionNames = FunctionNames(x)

  for (const functionName of xFunctionNames) {
    console.log(`Creating docs/x/${functionName}`)
    await publicFs.writeFile(`docs/x/${functionName}/index.html`, IndexHtml({
      path: `/docs/x/${functionName}`,
      title: `x/${functionName} - rubico documentation`,
      description: `Reference for x/${functionName}`,
    }))
  }

  const articlesFs = new FileSystem({ cwd: `${__dirname}/articles` })

  for (const filename of await articlesFs.find('.')) {
    const content = await articlesFs.cat(filename)
    const parts = content.split('---')

    // skip articles without metadata
    if (parts.length == 1) {
      continue
    }

    const metadata = pipe(parts, [
      get(1),
      x.callProp('trim'),
      x.callProp('split', '\n'),
      map(x.callProp('split', ': ')),
      Object.fromEntries,
    ])

    const { path, title, description } = metadata

    console.log('Creating', path)
    await publicFs.writeFile(path, IndexHtml({ path, title, description }))
  }
}

if (require.main == module) {
  main()
}

module.exports = main
