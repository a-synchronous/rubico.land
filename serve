#!/usr/bin/env node

require('rubico/global')
const DynamoTable = require('presidium/DynamoTable')
const DynamoIndex = require('presidium/DynamoIndex')
const DynamoStream = require('presidium/DynamoStream')
const HttpServer = require('presidium/HttpServer')
const fs = require('fs')
const errorHandler = require('./internal/errorHandler')
const StaticCache = require('./internal/StaticCache')
const ServePage = require('./internal/ServePage')
const package = require('./package.json')

/**
 * @name serve
 *
 * @synopsis
 * ```coffeescript [specscript]
 * serve(options {
 *   env: string,
 *   port: number,
 *   entrypoint: string,
 *   bypassPublicCache?: boolean,
 *   googleMapsApiKey: string,
 *   paypalClientId: string,
 *   paypalClientSecret: string,
 *   htmlServerPort: number,
 * }) -> Promise<>
 * ```
 */
const serve = async function (options) {
  const {
    env,
    port,
    entrypoint,
    bypassPublicCache,
    googleMapsApiKey,
    paypalClientId,
    paypalClientSecret,
    htmlServerPort,
  } = options

  if (env == null) {
    throw new Error('env required')
  }

  console.log('initializing dependencies')

  const dependencies = {}

  console.log('initializing publicCache')

  const publicCache = new StaticCache({
    directory: `${__dirname}/public`,
  })
  await publicCache.ready
  dependencies.publicCache = publicCache

  console.log('publicCache', publicCache)
  console.log('publicCache /', publicCache.get('/'))

  const stylesheets = [
    '<link rel="stylesheet" href="/codemirror/styles.css">',
    '<link rel="stylesheet" href="/codemirror/theme/rubico.css">',
    '<link rel="stylesheet" href="/codemirror/theme/coffeescript.css">',
    '<link rel="stylesheet" href="/index.css">',
  ]
  dependencies.stylesheets = stylesheets

  const scripts = [
    '<script src="https://unpkg.com/rubico@2.5.0/dist/rubico.min.js" crossorigin></script>',
    '<script src="https://unpkg.com/rubico@2.5.0/dist/Transducer.min.js" crossorigin></script>',
    '<script src="https://unpkg.com/arche@0.3.5/index.js" crossorigin></script>',
    '<script src="https://unpkg.com/react@17.0.1/umd/react.production.min.js" crossorigin></script>',
    '<script src="https://unpkg.com/react-dom@17.0.1/umd/react-dom.production.min.js" crossorigin></script>',
    '<script src="/codemirror/index.js"></script>',
    '<script src="/codemirror/syntax/javascript.js" async></script>',
    '<script src="/codemirror/syntax/coffeescript.js" async></script>',
    '<script src="/codemirror/syntax/htmlmixed.js" async></script>',
    '<script src="/codemirror/syntax/xml.js" async></script>',
    '<script src="/codemirror/syntax/css.js" async></script>',
    '<script async src="https://www.googletagmanager.com/gtag/js?id=UA-179545084-1"></script>',
    '<script async src="/global-scripts.js"></script>',
  ]
  dependencies.scripts = scripts

  const servePage = tryCatch(
    ServePage({
      env,
      entrypoint,
      bypassPublicCache,
      htmlServerPort,
      dependencies,
    }),
    errorHandler
  )

  const server = new HttpServer(async (request, response) => {
    if (request.url.startsWith('/health')) {
      response.writeHead(200, {
        'Content-Type': 'text/plain',
      })
      response.end('ok')
    } else if (request.method == 'OPTIONS') {
      response.writeHead(204, {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': '*',
        'Access-Control-Allow-Headers': '*',
        'Access-Control-Max-Age': '86400',
      })
      response.end()
    } else {
      await servePage(request, response)
    }
  })

  server.listen(port, () => {
    console.log(`server listening on port ${port}`)
  })

  return { server, dependencies }
}

if (process.argv[1] == __filename) {
  const env = process.env.NODE_ENV
  serve({
    env,
    port: process.env.PORT,
    entrypoint: `/${env}-${package.version}.js`,
  })
}

module.exports = serve
