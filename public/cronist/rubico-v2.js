export default [
  {
    name: 'AggregateReducer',
    synopsis: '```coffeescript [specscript]\n' +
      'AggregateReducer(reducers Array<reducer function>) -> aggregateReducer function\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'AggregateReducer',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'AggregateReducer(reducers Array<reducer function>) -> aggregateReducer function',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 112 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 112 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/AggregateReducer.js'
  },
  {
    name: 'Transducer',
    description: 'Temporary repository of transducer functionality throughout rubico v1',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Transducer',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Temporary repository of transducer functionality throughout rubico v1',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 70, offset: 69 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 70, offset: 69 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 70, offset: 69 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/Transducer.js'
  },
  {
    name: 'Transducer.map',
    synopsis: '```coffeescript [specscript]\n' +
      'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
      'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
      'type UnarySyncOrAsyncMapper = (element any)=>(resultElement Promise|any)\n' +
      '\n' +
      'mapper UnarySyncOrAsyncMapper\n' +
      '\n' +
      'Transducer.map(mapper) -> mappingTransducer Transducer\n' +
      '```',
    description: "Creates a mapping transducer. Elements of the transducer's reducing operation are transformed by the mapper function. It is possible to use an asynchronous mapper, however the reducing operation must support asynchronous execution. This library provides such implementations as [reduce](/docs/reduce) and [transform](/docs/transform).\n" +
      '\n' +
      '```javascript [playground]\n' +
      'const square = number => number ** 2\n' +
      '\n' +
      'const concat = (array, element) => array.concat(element)\n' +
      '\n' +
      'const mapSquare = Transducer.map(square)\n' +
      '// mapSquare is a transducer\n' +
      '\n' +
      'const squareConcatReducer = mapSquare(concat)\n' +
      '// now mapSquare is passed the reducer function concat; squareConcatReducer\n' +
      '// is a reducer with chained functionality square and concat\n' +
      '\n' +
      'console.log(\n' +
      '  reduce([1, 2, 3, 4, 5], squareConcatReducer, [])\n' +
      ') // [1, 4, 9, 16, 25]\n' +
      '\n' +
      '// the same squareConcatReducer is consumable with vanilla JavaScript\n' +
      'console.log(\n' +
      '  [1, 2, 3, 4, 5].reduce(squareConcatReducer, [])\n' +
      ') // [1, 4, 9, 16, 25]\n' +
      '\n' +
      '// concat is implicit when transforming into arrays\n' +
      'console.log(\n' +
      '  transform([1, 2, 3, 4, 5], Transducer.map(square), [])\n' +
      ') // [1, 4, 9, 16, 25]\n' +
      '```\n' +
      '\n' +
      'Read more on [transducers](/blog/transducers-crash-course-rubico-v2).\n' +
      '\n' +
      'See also:\n' +
      ' * [thunkify](/docs/thunkify)\n' +
      ' * [Transducer.filter](/docs/Transducer.filter)\n' +
      ' * [Transducer.flatMap](/docs/Transducer.flatMap)\n' +
      ' * [Transducer.forEach](/docs/Transducer.forEach)\n' +
      ' * [Transducer.passthrough](/docs/Transducer.passthrough)\n' +
      ' * [Transducer.tryCatch](/docs/Transducer.tryCatch)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Transducer.map',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
              'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
              'type UnarySyncOrAsyncMapper = (element any)=>(resultElement Promise|any)\n' +
              '\n' +
              'mapper UnarySyncOrAsyncMapper\n' +
              '\n' +
              'Transducer.map(mapper) -> mappingTransducer Transducer',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 335 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 335 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "Creates a mapping transducer. Elements of the transducer's reducing operation are transformed by the mapper function. It is possible to use an asynchronous mapper, however the reducing operation must support asynchronous execution. This library provides such implementations as ",
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 279, offset: 278 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/docs/reduce',
                children: [
                  {
                    type: 'text',
                    value: 'reduce',
                    position: {
                      start: { line: 1, column: 280, offset: 279 },
                      end: { line: 1, column: 286, offset: 285 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 279, offset: 278 },
                  end: { line: 1, column: 301, offset: 300 }
                }
              },
              {
                type: 'text',
                value: ' and ',
                position: {
                  start: { line: 1, column: 301, offset: 300 },
                  end: { line: 1, column: 306, offset: 305 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/docs/transform',
                children: [
                  {
                    type: 'text',
                    value: 'transform',
                    position: {
                      start: { line: 1, column: 307, offset: 306 },
                      end: { line: 1, column: 316, offset: 315 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 306, offset: 305 },
                  end: { line: 1, column: 334, offset: 333 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 1, column: 334, offset: 333 },
                  end: { line: 1, column: 335, offset: 334 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 335, offset: 334 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const square = number => number ** 2\n' +
              '\n' +
              'const concat = (array, element) => array.concat(element)\n' +
              '\n' +
              'const mapSquare = Transducer.map(square)\n' +
              '// mapSquare is a transducer\n' +
              '\n' +
              'const squareConcatReducer = mapSquare(concat)\n' +
              '// now mapSquare is passed the reducer function concat; squareConcatReducer\n' +
              '// is a reducer with chained functionality square and concat\n' +
              '\n' +
              'console.log(\n' +
              '  reduce([1, 2, 3, 4, 5], squareConcatReducer, [])\n' +
              ') // [1, 4, 9, 16, 25]\n' +
              '\n' +
              '// the same squareConcatReducer is consumable with vanilla JavaScript\n' +
              'console.log(\n' +
              '  [1, 2, 3, 4, 5].reduce(squareConcatReducer, [])\n' +
              ') // [1, 4, 9, 16, 25]\n' +
              '\n' +
              '// concat is implicit when transforming into arrays\n' +
              'console.log(\n' +
              '  transform([1, 2, 3, 4, 5], Transducer.map(square), [])\n' +
              ') // [1, 4, 9, 16, 25]',
            position: {
              start: { line: 3, column: 1, offset: 336 },
              end: { line: 28, column: 4, offset: 1107 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Read more on ',
                position: {
                  start: { line: 30, column: 1, offset: 1109 },
                  end: { line: 30, column: 14, offset: 1122 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/blog/transducers-crash-course-rubico-v2',
                children: [
                  {
                    type: 'text',
                    value: 'transducers',
                    position: {
                      start: { line: 30, column: 15, offset: 1123 },
                      end: { line: 30, column: 26, offset: 1134 }
                    }
                  }
                ],
                position: {
                  start: { line: 30, column: 14, offset: 1122 },
                  end: { line: 30, column: 69, offset: 1177 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 30, column: 69, offset: 1177 },
                  end: { line: 30, column: 70, offset: 1178 }
                }
              }
            ],
            position: {
              start: { line: 30, column: 1, offset: 1109 },
              end: { line: 30, column: 70, offset: 1178 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 32, column: 1, offset: 1180 },
                  end: { line: 32, column: 10, offset: 1189 }
                }
              }
            ],
            position: {
              start: { line: 32, column: 1, offset: 1180 },
              end: { line: 32, column: 10, offset: 1189 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 33, column: 5, offset: 1194 },
                              end: { line: 33, column: 13, offset: 1202 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 33, column: 4, offset: 1193 },
                          end: { line: 33, column: 30, offset: 1219 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 33, column: 4, offset: 1193 },
                      end: { line: 33, column: 30, offset: 1219 }
                    }
                  }
                ],
                position: {
                  start: { line: 33, column: 2, offset: 1191 },
                  end: { line: 33, column: 30, offset: 1219 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.filter',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.filter',
                            position: {
                              start: { line: 34, column: 5, offset: 1224 },
                              end: { line: 34, column: 22, offset: 1241 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 34, column: 4, offset: 1223 },
                          end: { line: 34, column: 48, offset: 1267 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 34, column: 4, offset: 1223 },
                      end: { line: 34, column: 48, offset: 1267 }
                    }
                  }
                ],
                position: {
                  start: { line: 34, column: 2, offset: 1221 },
                  end: { line: 34, column: 48, offset: 1267 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.flatMap',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.flatMap',
                            position: {
                              start: { line: 35, column: 5, offset: 1272 },
                              end: { line: 35, column: 23, offset: 1290 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 35, column: 4, offset: 1271 },
                          end: { line: 35, column: 50, offset: 1317 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 35, column: 4, offset: 1271 },
                      end: { line: 35, column: 50, offset: 1317 }
                    }
                  }
                ],
                position: {
                  start: { line: 35, column: 2, offset: 1269 },
                  end: { line: 35, column: 50, offset: 1317 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.forEach',
                            position: {
                              start: { line: 36, column: 5, offset: 1322 },
                              end: { line: 36, column: 23, offset: 1340 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 36, column: 4, offset: 1321 },
                          end: { line: 36, column: 50, offset: 1367 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 36, column: 4, offset: 1321 },
                      end: { line: 36, column: 50, offset: 1367 }
                    }
                  }
                ],
                position: {
                  start: { line: 36, column: 2, offset: 1319 },
                  end: { line: 36, column: 50, offset: 1367 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.passthrough',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.passthrough',
                            position: {
                              start: { line: 37, column: 5, offset: 1372 },
                              end: { line: 37, column: 27, offset: 1394 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 37, column: 4, offset: 1371 },
                          end: { line: 37, column: 58, offset: 1425 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 37, column: 4, offset: 1371 },
                      end: { line: 37, column: 58, offset: 1425 }
                    }
                  }
                ],
                position: {
                  start: { line: 37, column: 2, offset: 1369 },
                  end: { line: 37, column: 58, offset: 1425 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.tryCatch',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.tryCatch',
                            position: {
                              start: { line: 38, column: 5, offset: 1430 },
                              end: { line: 38, column: 24, offset: 1449 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 38, column: 4, offset: 1429 },
                          end: { line: 38, column: 52, offset: 1477 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 38, column: 4, offset: 1429 },
                      end: { line: 38, column: 52, offset: 1477 }
                    }
                  }
                ],
                position: {
                  start: { line: 38, column: 2, offset: 1427 },
                  end: { line: 38, column: 52, offset: 1477 }
                }
              }
            ],
            position: {
              start: { line: 33, column: 2, offset: 1191 },
              end: { line: 38, column: 52, offset: 1477 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 38, column: 52, offset: 1477 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/Transducer.js'
  },
  {
    name: 'Transducer.filter',
    synopsis: '```coffeescript [specscript]\n' +
      'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
      'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
      'type UnarySyncOrAsyncPredicate = any=>Promise|boolean|any\n' +
      '\n' +
      'predicate UnarySyncOrAsyncPredicate\n' +
      '\n' +
      'Transducer.filter(predicate) -> filteringTransducer Transducer\n' +
      '```',
    description: 'Creates a filtering transducer. A filtering transducer filters out elements of its reducing operation if they test false by the predicate. It is possible to use an asynchronous predicate, however the reducing operation must support asynchronous execution. This library provides such implementations as [reduce](/docs/reduce) and [transform](/docs/transform).\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const isOdd = number => number % 2 == 1\n' +
      '\n' +
      'const concat = (array, element) => array.concat(element)\n' +
      '\n' +
      'const concatOddNumbers = Transducer.filter(isOdd)(concat)\n' +
      '\n' +
      'const array = [1, 2, 3, 4, 5]\n' +
      '\n' +
      'const oddNumbers1 = array.reduce(concatOddNumbers, [])\n' +
      'console.log(oddNumbers1) // [1, 3, 5]\n' +
      '\n' +
      'const oddNumbers2 = transform(array, Transducer.filter(isOdd), [])\n' +
      'console.log(oddNumbers2) // [1, 3, 5]\n' +
      '```\n' +
      '\n' +
      'Read more on [transducers](/blog/transducers-crash-course-rubico-v2).\n' +
      '\n' +
      'See also:\n' +
      ' * [thunkify](/docs/thunkify)\n' +
      ' * [Transducer.map](/docs/Transducer.map)\n' +
      ' * [Transducer.flatMap](/docs/Transducer.flatMap)\n' +
      ' * [Transducer.forEach](/docs/Transducer.forEach)\n' +
      ' * [Transducer.passthrough](/docs/Transducer.passthrough)\n' +
      ' * [Transducer.tryCatch](/docs/Transducer.tryCatch)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Transducer.filter',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
              'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
              'type UnarySyncOrAsyncPredicate = any=>Promise|boolean|any\n' +
              '\n' +
              'predicate UnarySyncOrAsyncPredicate\n' +
              '\n' +
              'Transducer.filter(predicate) -> filteringTransducer Transducer',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 334 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 334 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Creates a filtering transducer. A filtering transducer filters out elements of its reducing operation if they test false by the predicate. It is possible to use an asynchronous predicate, however the reducing operation must support asynchronous execution. This library provides such implementations as ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 303, offset: 302 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/docs/reduce',
                children: [
                  {
                    type: 'text',
                    value: 'reduce',
                    position: {
                      start: { line: 1, column: 304, offset: 303 },
                      end: { line: 1, column: 310, offset: 309 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 303, offset: 302 },
                  end: { line: 1, column: 325, offset: 324 }
                }
              },
              {
                type: 'text',
                value: ' and ',
                position: {
                  start: { line: 1, column: 325, offset: 324 },
                  end: { line: 1, column: 330, offset: 329 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/docs/transform',
                children: [
                  {
                    type: 'text',
                    value: 'transform',
                    position: {
                      start: { line: 1, column: 331, offset: 330 },
                      end: { line: 1, column: 340, offset: 339 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 330, offset: 329 },
                  end: { line: 1, column: 358, offset: 357 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 1, column: 358, offset: 357 },
                  end: { line: 1, column: 359, offset: 358 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 359, offset: 358 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const isOdd = number => number % 2 == 1\n' +
              '\n' +
              'const concat = (array, element) => array.concat(element)\n' +
              '\n' +
              'const concatOddNumbers = Transducer.filter(isOdd)(concat)\n' +
              '\n' +
              'const array = [1, 2, 3, 4, 5]\n' +
              '\n' +
              'const oddNumbers1 = array.reduce(concatOddNumbers, [])\n' +
              'console.log(oddNumbers1) // [1, 3, 5]\n' +
              '\n' +
              'const oddNumbers2 = transform(array, Transducer.filter(isOdd), [])\n' +
              'console.log(oddNumbers2) // [1, 3, 5]',
            position: {
              start: { line: 3, column: 1, offset: 360 },
              end: { line: 17, column: 4, offset: 778 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Read more on ',
                position: {
                  start: { line: 19, column: 1, offset: 780 },
                  end: { line: 19, column: 14, offset: 793 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/blog/transducers-crash-course-rubico-v2',
                children: [
                  {
                    type: 'text',
                    value: 'transducers',
                    position: {
                      start: { line: 19, column: 15, offset: 794 },
                      end: { line: 19, column: 26, offset: 805 }
                    }
                  }
                ],
                position: {
                  start: { line: 19, column: 14, offset: 793 },
                  end: { line: 19, column: 69, offset: 848 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 19, column: 69, offset: 848 },
                  end: { line: 19, column: 70, offset: 849 }
                }
              }
            ],
            position: {
              start: { line: 19, column: 1, offset: 780 },
              end: { line: 19, column: 70, offset: 849 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 21, column: 1, offset: 851 },
                  end: { line: 21, column: 10, offset: 860 }
                }
              }
            ],
            position: {
              start: { line: 21, column: 1, offset: 851 },
              end: { line: 21, column: 10, offset: 860 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 22, column: 5, offset: 865 },
                              end: { line: 22, column: 13, offset: 873 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 22, column: 4, offset: 864 },
                          end: { line: 22, column: 30, offset: 890 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 22, column: 4, offset: 864 },
                      end: { line: 22, column: 30, offset: 890 }
                    }
                  }
                ],
                position: {
                  start: { line: 22, column: 2, offset: 862 },
                  end: { line: 22, column: 30, offset: 890 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.map',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.map',
                            position: {
                              start: { line: 23, column: 5, offset: 895 },
                              end: { line: 23, column: 19, offset: 909 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 23, column: 4, offset: 894 },
                          end: { line: 23, column: 42, offset: 932 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 23, column: 4, offset: 894 },
                      end: { line: 23, column: 42, offset: 932 }
                    }
                  }
                ],
                position: {
                  start: { line: 23, column: 2, offset: 892 },
                  end: { line: 23, column: 42, offset: 932 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.flatMap',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.flatMap',
                            position: {
                              start: { line: 24, column: 5, offset: 937 },
                              end: { line: 24, column: 23, offset: 955 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 24, column: 4, offset: 936 },
                          end: { line: 24, column: 50, offset: 982 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 24, column: 4, offset: 936 },
                      end: { line: 24, column: 50, offset: 982 }
                    }
                  }
                ],
                position: {
                  start: { line: 24, column: 2, offset: 934 },
                  end: { line: 24, column: 50, offset: 982 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.forEach',
                            position: {
                              start: { line: 25, column: 5, offset: 987 },
                              end: { line: 25, column: 23, offset: 1005 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 25, column: 4, offset: 986 },
                          end: { line: 25, column: 50, offset: 1032 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 25, column: 4, offset: 986 },
                      end: { line: 25, column: 50, offset: 1032 }
                    }
                  }
                ],
                position: {
                  start: { line: 25, column: 2, offset: 984 },
                  end: { line: 25, column: 50, offset: 1032 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.passthrough',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.passthrough',
                            position: {
                              start: { line: 26, column: 5, offset: 1037 },
                              end: { line: 26, column: 27, offset: 1059 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 26, column: 4, offset: 1036 },
                          end: { line: 26, column: 58, offset: 1090 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 26, column: 4, offset: 1036 },
                      end: { line: 26, column: 58, offset: 1090 }
                    }
                  }
                ],
                position: {
                  start: { line: 26, column: 2, offset: 1034 },
                  end: { line: 26, column: 58, offset: 1090 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.tryCatch',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.tryCatch',
                            position: {
                              start: { line: 27, column: 5, offset: 1095 },
                              end: { line: 27, column: 24, offset: 1114 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 27, column: 4, offset: 1094 },
                          end: { line: 27, column: 52, offset: 1142 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 27, column: 4, offset: 1094 },
                      end: { line: 27, column: 52, offset: 1142 }
                    }
                  }
                ],
                position: {
                  start: { line: 27, column: 2, offset: 1092 },
                  end: { line: 27, column: 52, offset: 1142 }
                }
              }
            ],
            position: {
              start: { line: 22, column: 2, offset: 862 },
              end: { line: 27, column: 52, offset: 1142 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 27, column: 52, offset: 1142 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/Transducer.js'
  },
  {
    name: 'Transducer.flatMap',
    synopsis: '```coffeescript [specscript]\n' +
      'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
      'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
      'type Monad = Array|String|Set|Generator|AsyncGenerator|{ flatMap: string }|{ chain: string }|Object\n' +
      'type UnarySyncOrAsyncFlatMapper = (element any)=>(monad Promise|Monad|any)\n' +
      '\n' +
      'flatMapper UnarySyncOrAsyncFlatMapper\n' +
      '\n' +
      'Transducer.flatMap(flatMapper) -> flatMappingTransducer Transducer\n' +
      '```',
    description: 'Creates a flatMapping transducer. A flatMapping transducer applies the flatMapper function to each element of its reducing operation, concatenating the results of the flatMapper execution onto the accumulator. It is possible to use an asynchronous flatMapper, however the reducing operation must support asynchronous execution. This library provides such implementations as [reduce](/docs/reduce) and [transform](/docs/transform).\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const powers = number => [number, number ** 2, number ** 3]\n' +
      '\n' +
      'const numbers = [1, 2, 3, 4, 5]\n' +
      '\n' +
      'console.log(\n' +
      '  transform(numbers, Transducer.flatMap(powers), [])\n' +
      ') // [1, 1, 1, 2, 4, 8, 3, 9, 27, 4, 16, 64, 5, 25, 125]\n' +
      '```\n' +
      '\n' +
      'Read more on [transducers](/blog/transducers-crash-course-rubico-v2).\n' +
      '\n' +
      'See also:\n' +
      ' * [thunkify](/docs/thunkify)\n' +
      ' * [Transducer.map](/docs/Transducer.map)\n' +
      ' * [Transducer.filter](/docs/Transducer.filter)\n' +
      ' * [Transducer.forEach](/docs/Transducer.forEach)\n' +
      ' * [Transducer.passthrough](/docs/Transducer.passthrough)\n' +
      ' * [Transducer.tryCatch](/docs/Transducer.tryCatch)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Transducer.flatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
              'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
              'type Monad = Array|String|Set|Generator|AsyncGenerator|{ flatMap: string }|{ chain: string }|Object\n' +
              'type UnarySyncOrAsyncFlatMapper = (element any)=>(monad Promise|Monad|any)\n' +
              '\n' +
              'flatMapper UnarySyncOrAsyncFlatMapper\n' +
              '\n' +
              'Transducer.flatMap(flatMapper) -> flatMappingTransducer Transducer',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 457 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 457 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Creates a flatMapping transducer. A flatMapping transducer applies the flatMapper function to each element of its reducing operation, concatenating the results of the flatMapper execution onto the accumulator. It is possible to use an asynchronous flatMapper, however the reducing operation must support asynchronous execution. This library provides such implementations as ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 375, offset: 374 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/docs/reduce',
                children: [
                  {
                    type: 'text',
                    value: 'reduce',
                    position: {
                      start: { line: 1, column: 376, offset: 375 },
                      end: { line: 1, column: 382, offset: 381 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 375, offset: 374 },
                  end: { line: 1, column: 397, offset: 396 }
                }
              },
              {
                type: 'text',
                value: ' and ',
                position: {
                  start: { line: 1, column: 397, offset: 396 },
                  end: { line: 1, column: 402, offset: 401 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/docs/transform',
                children: [
                  {
                    type: 'text',
                    value: 'transform',
                    position: {
                      start: { line: 1, column: 403, offset: 402 },
                      end: { line: 1, column: 412, offset: 411 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 402, offset: 401 },
                  end: { line: 1, column: 430, offset: 429 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 1, column: 430, offset: 429 },
                  end: { line: 1, column: 431, offset: 430 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 431, offset: 430 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const powers = number => [number, number ** 2, number ** 3]\n' +
              '\n' +
              'const numbers = [1, 2, 3, 4, 5]\n' +
              '\n' +
              'console.log(\n' +
              '  transform(numbers, Transducer.flatMap(powers), [])\n' +
              ') // [1, 1, 1, 2, 4, 8, 3, 9, 27, 4, 16, 64, 5, 25, 125]',
            position: {
              start: { line: 3, column: 1, offset: 432 },
              end: { line: 11, column: 4, offset: 679 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Read more on ',
                position: {
                  start: { line: 13, column: 1, offset: 681 },
                  end: { line: 13, column: 14, offset: 694 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/blog/transducers-crash-course-rubico-v2',
                children: [
                  {
                    type: 'text',
                    value: 'transducers',
                    position: {
                      start: { line: 13, column: 15, offset: 695 },
                      end: { line: 13, column: 26, offset: 706 }
                    }
                  }
                ],
                position: {
                  start: { line: 13, column: 14, offset: 694 },
                  end: { line: 13, column: 69, offset: 749 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 13, column: 69, offset: 749 },
                  end: { line: 13, column: 70, offset: 750 }
                }
              }
            ],
            position: {
              start: { line: 13, column: 1, offset: 681 },
              end: { line: 13, column: 70, offset: 750 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 15, column: 1, offset: 752 },
                  end: { line: 15, column: 10, offset: 761 }
                }
              }
            ],
            position: {
              start: { line: 15, column: 1, offset: 752 },
              end: { line: 15, column: 10, offset: 761 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 16, column: 5, offset: 766 },
                              end: { line: 16, column: 13, offset: 774 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 16, column: 4, offset: 765 },
                          end: { line: 16, column: 30, offset: 791 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 16, column: 4, offset: 765 },
                      end: { line: 16, column: 30, offset: 791 }
                    }
                  }
                ],
                position: {
                  start: { line: 16, column: 2, offset: 763 },
                  end: { line: 16, column: 30, offset: 791 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.map',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.map',
                            position: {
                              start: { line: 17, column: 5, offset: 796 },
                              end: { line: 17, column: 19, offset: 810 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 17, column: 4, offset: 795 },
                          end: { line: 17, column: 42, offset: 833 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 17, column: 4, offset: 795 },
                      end: { line: 17, column: 42, offset: 833 }
                    }
                  }
                ],
                position: {
                  start: { line: 17, column: 2, offset: 793 },
                  end: { line: 17, column: 42, offset: 833 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.filter',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.filter',
                            position: {
                              start: { line: 18, column: 5, offset: 838 },
                              end: { line: 18, column: 22, offset: 855 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 18, column: 4, offset: 837 },
                          end: { line: 18, column: 48, offset: 881 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 18, column: 4, offset: 837 },
                      end: { line: 18, column: 48, offset: 881 }
                    }
                  }
                ],
                position: {
                  start: { line: 18, column: 2, offset: 835 },
                  end: { line: 18, column: 48, offset: 881 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.forEach',
                            position: {
                              start: { line: 19, column: 5, offset: 886 },
                              end: { line: 19, column: 23, offset: 904 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 19, column: 4, offset: 885 },
                          end: { line: 19, column: 50, offset: 931 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 19, column: 4, offset: 885 },
                      end: { line: 19, column: 50, offset: 931 }
                    }
                  }
                ],
                position: {
                  start: { line: 19, column: 2, offset: 883 },
                  end: { line: 19, column: 50, offset: 931 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.passthrough',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.passthrough',
                            position: {
                              start: { line: 20, column: 5, offset: 936 },
                              end: { line: 20, column: 27, offset: 958 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 20, column: 4, offset: 935 },
                          end: { line: 20, column: 58, offset: 989 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 20, column: 4, offset: 935 },
                      end: { line: 20, column: 58, offset: 989 }
                    }
                  }
                ],
                position: {
                  start: { line: 20, column: 2, offset: 933 },
                  end: { line: 20, column: 58, offset: 989 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.tryCatch',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.tryCatch',
                            position: {
                              start: { line: 21, column: 5, offset: 994 },
                              end: { line: 21, column: 24, offset: 1013 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 21, column: 4, offset: 993 },
                          end: { line: 21, column: 52, offset: 1041 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 21, column: 4, offset: 993 },
                      end: { line: 21, column: 52, offset: 1041 }
                    }
                  }
                ],
                position: {
                  start: { line: 21, column: 2, offset: 991 },
                  end: { line: 21, column: 52, offset: 1041 }
                }
              }
            ],
            position: {
              start: { line: 16, column: 2, offset: 763 },
              end: { line: 21, column: 52, offset: 1041 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 21, column: 52, offset: 1041 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/Transducer.js'
  },
  {
    name: 'Transducer.forEach',
    synopsis: '```coffeescript [specscript]\n' +
      'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
      'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
      'type UnarySyncOrAsyncCallback = (element any)=>Promise|undefined\n' +
      '\n' +
      'callback UnarySyncOrAsyncCallback\n' +
      '\n' +
      'Transducer.forEach(callback) -> forEachTransducer Transducer\n' +
      '```',
    description: 'Executes a callback function for each element of a reducing operation, leaving the reducing operation unmodified. It is possible to use an asynchronous callback function, however the reducing operation must support asynchronous execution. This library provides such implementations as [reduce](/docs/reduce) and [transform](/docs/transform).\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const numbers = [1, 2, 3, 4, 5]\n' +
      'transform(numbers, compose(\n' +
      '  Transducer.map(number => number ** 2),\n' +
      '  Transducer.forEach(console.log), // 1 4 9 16 25\n' +
      '), null)\n' +
      '```\n' +
      '\n' +
      'Read more on [transducers](/blog/transducers-crash-course-rubico-v2).\n' +
      '\n' +
      'See also:\n' +
      ' * [thunkify](/docs/thunkify)\n' +
      ' * [Transducer.map](/docs/Transducer.map)\n' +
      ' * [Transducer.filter](/docs/Transducer.filter)\n' +
      ' * [Transducer.flatMap](/docs/Transducer.flatMap)\n' +
      ' * [Transducer.passthrough](/docs/Transducer.passthrough)\n' +
      ' * [Transducer.tryCatch](/docs/Transducer.tryCatch)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Transducer.forEach',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
              'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
              'type UnarySyncOrAsyncCallback = (element any)=>Promise|undefined\n' +
              '\n' +
              'callback UnarySyncOrAsyncCallback\n' +
              '\n' +
              'Transducer.forEach(callback) -> forEachTransducer Transducer',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 337 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 337 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Executes a callback function for each element of a reducing operation, leaving the reducing operation unmodified. It is possible to use an asynchronous callback function, however the reducing operation must support asynchronous execution. This library provides such implementations as ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 286, offset: 285 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/docs/reduce',
                children: [
                  {
                    type: 'text',
                    value: 'reduce',
                    position: {
                      start: { line: 1, column: 287, offset: 286 },
                      end: { line: 1, column: 293, offset: 292 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 286, offset: 285 },
                  end: { line: 1, column: 308, offset: 307 }
                }
              },
              {
                type: 'text',
                value: ' and ',
                position: {
                  start: { line: 1, column: 308, offset: 307 },
                  end: { line: 1, column: 313, offset: 312 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/docs/transform',
                children: [
                  {
                    type: 'text',
                    value: 'transform',
                    position: {
                      start: { line: 1, column: 314, offset: 313 },
                      end: { line: 1, column: 323, offset: 322 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 313, offset: 312 },
                  end: { line: 1, column: 341, offset: 340 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 1, column: 341, offset: 340 },
                  end: { line: 1, column: 342, offset: 341 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 342, offset: 341 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const numbers = [1, 2, 3, 4, 5]\n' +
              'transform(numbers, compose(\n' +
              '  Transducer.map(number => number ** 2),\n' +
              '  Transducer.forEach(console.log), // 1 4 9 16 25\n' +
              '), null)',
            position: {
              start: { line: 3, column: 1, offset: 343 },
              end: { line: 9, column: 4, offset: 533 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Read more on ',
                position: {
                  start: { line: 11, column: 1, offset: 535 },
                  end: { line: 11, column: 14, offset: 548 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/blog/transducers-crash-course-rubico-v2',
                children: [
                  {
                    type: 'text',
                    value: 'transducers',
                    position: {
                      start: { line: 11, column: 15, offset: 549 },
                      end: { line: 11, column: 26, offset: 560 }
                    }
                  }
                ],
                position: {
                  start: { line: 11, column: 14, offset: 548 },
                  end: { line: 11, column: 69, offset: 603 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 11, column: 69, offset: 603 },
                  end: { line: 11, column: 70, offset: 604 }
                }
              }
            ],
            position: {
              start: { line: 11, column: 1, offset: 535 },
              end: { line: 11, column: 70, offset: 604 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 13, column: 1, offset: 606 },
                  end: { line: 13, column: 10, offset: 615 }
                }
              }
            ],
            position: {
              start: { line: 13, column: 1, offset: 606 },
              end: { line: 13, column: 10, offset: 615 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 14, column: 5, offset: 620 },
                              end: { line: 14, column: 13, offset: 628 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 14, column: 4, offset: 619 },
                          end: { line: 14, column: 30, offset: 645 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 14, column: 4, offset: 619 },
                      end: { line: 14, column: 30, offset: 645 }
                    }
                  }
                ],
                position: {
                  start: { line: 14, column: 2, offset: 617 },
                  end: { line: 14, column: 30, offset: 645 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.map',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.map',
                            position: {
                              start: { line: 15, column: 5, offset: 650 },
                              end: { line: 15, column: 19, offset: 664 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 15, column: 4, offset: 649 },
                          end: { line: 15, column: 42, offset: 687 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 15, column: 4, offset: 649 },
                      end: { line: 15, column: 42, offset: 687 }
                    }
                  }
                ],
                position: {
                  start: { line: 15, column: 2, offset: 647 },
                  end: { line: 15, column: 42, offset: 687 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.filter',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.filter',
                            position: {
                              start: { line: 16, column: 5, offset: 692 },
                              end: { line: 16, column: 22, offset: 709 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 16, column: 4, offset: 691 },
                          end: { line: 16, column: 48, offset: 735 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 16, column: 4, offset: 691 },
                      end: { line: 16, column: 48, offset: 735 }
                    }
                  }
                ],
                position: {
                  start: { line: 16, column: 2, offset: 689 },
                  end: { line: 16, column: 48, offset: 735 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.flatMap',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.flatMap',
                            position: {
                              start: { line: 17, column: 5, offset: 740 },
                              end: { line: 17, column: 23, offset: 758 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 17, column: 4, offset: 739 },
                          end: { line: 17, column: 50, offset: 785 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 17, column: 4, offset: 739 },
                      end: { line: 17, column: 50, offset: 785 }
                    }
                  }
                ],
                position: {
                  start: { line: 17, column: 2, offset: 737 },
                  end: { line: 17, column: 50, offset: 785 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.passthrough',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.passthrough',
                            position: {
                              start: { line: 18, column: 5, offset: 790 },
                              end: { line: 18, column: 27, offset: 812 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 18, column: 4, offset: 789 },
                          end: { line: 18, column: 58, offset: 843 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 18, column: 4, offset: 789 },
                      end: { line: 18, column: 58, offset: 843 }
                    }
                  }
                ],
                position: {
                  start: { line: 18, column: 2, offset: 787 },
                  end: { line: 18, column: 58, offset: 843 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.tryCatch',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.tryCatch',
                            position: {
                              start: { line: 19, column: 5, offset: 848 },
                              end: { line: 19, column: 24, offset: 867 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 19, column: 4, offset: 847 },
                          end: { line: 19, column: 52, offset: 895 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 19, column: 4, offset: 847 },
                      end: { line: 19, column: 52, offset: 895 }
                    }
                  }
                ],
                position: {
                  start: { line: 19, column: 2, offset: 845 },
                  end: { line: 19, column: 52, offset: 895 }
                }
              }
            ],
            position: {
              start: { line: 14, column: 2, offset: 617 },
              end: { line: 19, column: 52, offset: 895 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 19, column: 52, offset: 895 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/Transducer.js'
  },
  {
    name: 'Transducer.passthrough',
    synopsis: '```coffeescript [specscript]\n' +
      'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
      'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
      '\n' +
      'Transducer.passthrough Transducer\n' +
      '```',
    description: 'Creates a pasthrough transducer. The passthrough transducer simply passes each element of the reducing operation through to the next downstream operation, leaving the reducing operation unmodified.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const createAsyncNumbers = async function* () {\n' +
      '  let number = 0\n' +
      '  while (number < 10) {\n' +
      '    yield number\n' +
      '    number += 1\n' +
      '  }\n' +
      '}\n' +
      '\n' +
      'transform(createAsyncNumbers(), Transducer.passthrough, [])\n' +
      '  .then(console.log) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n' +
      '```\n' +
      '\n' +
      'Read more on [transducers](/blog/transducers-crash-course-rubico-v2).\n' +
      '\n' +
      'See also:\n' +
      ' * [thunkify](/docs/thunkify)\n' +
      ' * [Transducer.map](/docs/Transducer.map)\n' +
      ' * [Transducer.filter](/docs/Transducer.filter)\n' +
      ' * [Transducer.flatMap](/docs/Transducer.flatMap)\n' +
      ' * [Transducer.forEach](/docs/Transducer.forEach)\n' +
      ' * [Transducer.tryCatch](/docs/Transducer.tryCatch)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Transducer.passthrough',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 23, offset: 22 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 23, offset: 22 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 23, offset: 22 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
              'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
              '\n' +
              'Transducer.passthrough Transducer',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 210 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 210 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Creates a pasthrough transducer. The passthrough transducer simply passes each element of the reducing operation through to the next downstream operation, leaving the reducing operation unmodified.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 198, offset: 197 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 198, offset: 197 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const createAsyncNumbers = async function* () {\n' +
              '  let number = 0\n' +
              '  while (number < 10) {\n' +
              '    yield number\n' +
              '    number += 1\n' +
              '  }\n' +
              '}\n' +
              '\n' +
              'transform(createAsyncNumbers(), Transducer.passthrough, [])\n' +
              '  .then(console.log) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]',
            position: {
              start: { line: 3, column: 1, offset: 199 },
              end: { line: 14, column: 4, offset: 473 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Read more on ',
                position: {
                  start: { line: 16, column: 1, offset: 475 },
                  end: { line: 16, column: 14, offset: 488 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/blog/transducers-crash-course-rubico-v2',
                children: [
                  {
                    type: 'text',
                    value: 'transducers',
                    position: {
                      start: { line: 16, column: 15, offset: 489 },
                      end: { line: 16, column: 26, offset: 500 }
                    }
                  }
                ],
                position: {
                  start: { line: 16, column: 14, offset: 488 },
                  end: { line: 16, column: 69, offset: 543 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 16, column: 69, offset: 543 },
                  end: { line: 16, column: 70, offset: 544 }
                }
              }
            ],
            position: {
              start: { line: 16, column: 1, offset: 475 },
              end: { line: 16, column: 70, offset: 544 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 18, column: 1, offset: 546 },
                  end: { line: 18, column: 10, offset: 555 }
                }
              }
            ],
            position: {
              start: { line: 18, column: 1, offset: 546 },
              end: { line: 18, column: 10, offset: 555 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 19, column: 5, offset: 560 },
                              end: { line: 19, column: 13, offset: 568 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 19, column: 4, offset: 559 },
                          end: { line: 19, column: 30, offset: 585 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 19, column: 4, offset: 559 },
                      end: { line: 19, column: 30, offset: 585 }
                    }
                  }
                ],
                position: {
                  start: { line: 19, column: 2, offset: 557 },
                  end: { line: 19, column: 30, offset: 585 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.map',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.map',
                            position: {
                              start: { line: 20, column: 5, offset: 590 },
                              end: { line: 20, column: 19, offset: 604 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 20, column: 4, offset: 589 },
                          end: { line: 20, column: 42, offset: 627 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 20, column: 4, offset: 589 },
                      end: { line: 20, column: 42, offset: 627 }
                    }
                  }
                ],
                position: {
                  start: { line: 20, column: 2, offset: 587 },
                  end: { line: 20, column: 42, offset: 627 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.filter',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.filter',
                            position: {
                              start: { line: 21, column: 5, offset: 632 },
                              end: { line: 21, column: 22, offset: 649 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 21, column: 4, offset: 631 },
                          end: { line: 21, column: 48, offset: 675 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 21, column: 4, offset: 631 },
                      end: { line: 21, column: 48, offset: 675 }
                    }
                  }
                ],
                position: {
                  start: { line: 21, column: 2, offset: 629 },
                  end: { line: 21, column: 48, offset: 675 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.flatMap',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.flatMap',
                            position: {
                              start: { line: 22, column: 5, offset: 680 },
                              end: { line: 22, column: 23, offset: 698 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 22, column: 4, offset: 679 },
                          end: { line: 22, column: 50, offset: 725 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 22, column: 4, offset: 679 },
                      end: { line: 22, column: 50, offset: 725 }
                    }
                  }
                ],
                position: {
                  start: { line: 22, column: 2, offset: 677 },
                  end: { line: 22, column: 50, offset: 725 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.forEach',
                            position: {
                              start: { line: 23, column: 5, offset: 730 },
                              end: { line: 23, column: 23, offset: 748 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 23, column: 4, offset: 729 },
                          end: { line: 23, column: 50, offset: 775 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 23, column: 4, offset: 729 },
                      end: { line: 23, column: 50, offset: 775 }
                    }
                  }
                ],
                position: {
                  start: { line: 23, column: 2, offset: 727 },
                  end: { line: 23, column: 50, offset: 775 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.tryCatch',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.tryCatch',
                            position: {
                              start: { line: 24, column: 5, offset: 780 },
                              end: { line: 24, column: 24, offset: 799 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 24, column: 4, offset: 779 },
                          end: { line: 24, column: 52, offset: 827 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 24, column: 4, offset: 779 },
                      end: { line: 24, column: 52, offset: 827 }
                    }
                  }
                ],
                position: {
                  start: { line: 24, column: 2, offset: 777 },
                  end: { line: 24, column: 52, offset: 827 }
                }
              }
            ],
            position: {
              start: { line: 19, column: 2, offset: 557 },
              end: { line: 24, column: 52, offset: 827 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 24, column: 52, offset: 827 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/Transducer.js'
  },
  {
    name: 'Transducer.tryCatch',
    synopsis: '```coffeescript [specscript]\n' +
      'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
      'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
      '\n' +
      'transducerTryer Transducer\n' +
      'catcher (error Error, element any)=>Promise|any\n' +
      '\n' +
      'Transducer.tryCatch(transducerTryer, catcher) -> tryCatchTransducer Transducer\n' +
      '```',
    description: 'Creates an error handling transducer. The error handling transducer wraps a transducer and catches any errors thrown by the transducer with the catcher function. The catcher function is provided the error as well as the element for which the error was thrown. It is possible for either the transducer or the catcher to be asynchronous, however the reducing operation must support asynchronous execution. This library provides such implementations as [reduce](/docs/reduce) and [transform](/docs/transform).\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const db = new Map()\n' +
      "db.set('a', { id: 'a', name: 'John' })\n" +
      "db.set('b', { id: 'b', name: 'Jane' })\n" +
      "db.set('c', { id: 'c', name: 'Jill' })\n" +
      "db.set('e', { id: 'e', name: 'Jim' })\n" +
      '\n' +
      "const userIds = ['a', 'b', 'c', 'd', 'e']\n" +
      '\n' +
      'transform(userIds, Transducer.tryCatch(\n' +
      '  compose(\n' +
      '    Transducer.map(async userId => {\n' +
      '      if (db.has(userId)) {\n' +
      '        return db.get(userId)\n' +
      '      }\n' +
      '      throw new Error(`user ${userId} not found`)\n' +
      '    }),\n' +
      '\n' +
      '    Transducer.forEach(user => {\n' +
      "      console.log('Found', user.name)\n" +
      '    })\n' +
      '  ),\n' +
      '  (error, userId) => {\n' +
      '    console.error(error)\n' +
      "    console.log('userId in catcher:', userId)\n" +
      '    // original userId for which the error was thrown is provided\n' +
      '  }\n' +
      '), null)\n' +
      '```\n' +
      '\n' +
      'Read more on [transducers](/blog/transducers-crash-course-rubico-v2).\n' +
      '\n' +
      'See also:\n' +
      ' * [thunkify](/docs/thunkify)\n' +
      ' * [Transducer.map](/docs/Transducer.map)\n' +
      ' * [Transducer.filter](/docs/Transducer.filter)\n' +
      ' * [Transducer.flatMap](/docs/Transducer.flatMap)\n' +
      ' * [Transducer.forEach](/docs/Transducer.forEach)\n' +
      ' * [Transducer.passthrough](/docs/Transducer.passthrough)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Transducer.tryCatch',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
              'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
              '\n' +
              'transducerTryer Transducer\n' +
              'catcher (error Error, element any)=>Promise|any\n' +
              '\n' +
              'Transducer.tryCatch(transducerTryer, catcher) -> tryCatchTransducer Transducer',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 331 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 331 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Creates an error handling transducer. The error handling transducer wraps a transducer and catches any errors thrown by the transducer with the catcher function. The catcher function is provided the error as well as the element for which the error was thrown. It is possible for either the transducer or the catcher to be asynchronous, however the reducing operation must support asynchronous execution. This library provides such implementations as ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 451, offset: 450 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/docs/reduce',
                children: [
                  {
                    type: 'text',
                    value: 'reduce',
                    position: {
                      start: { line: 1, column: 452, offset: 451 },
                      end: { line: 1, column: 458, offset: 457 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 451, offset: 450 },
                  end: { line: 1, column: 473, offset: 472 }
                }
              },
              {
                type: 'text',
                value: ' and ',
                position: {
                  start: { line: 1, column: 473, offset: 472 },
                  end: { line: 1, column: 478, offset: 477 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/docs/transform',
                children: [
                  {
                    type: 'text',
                    value: 'transform',
                    position: {
                      start: { line: 1, column: 479, offset: 478 },
                      end: { line: 1, column: 488, offset: 487 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 478, offset: 477 },
                  end: { line: 1, column: 506, offset: 505 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 1, column: 506, offset: 505 },
                  end: { line: 1, column: 507, offset: 506 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 507, offset: 506 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const db = new Map()\n' +
              "db.set('a', { id: 'a', name: 'John' })\n" +
              "db.set('b', { id: 'b', name: 'Jane' })\n" +
              "db.set('c', { id: 'c', name: 'Jill' })\n" +
              "db.set('e', { id: 'e', name: 'Jim' })\n" +
              '\n' +
              "const userIds = ['a', 'b', 'c', 'd', 'e']\n" +
              '\n' +
              'transform(userIds, Transducer.tryCatch(\n' +
              '  compose(\n' +
              '    Transducer.map(async userId => {\n' +
              '      if (db.has(userId)) {\n' +
              '        return db.get(userId)\n' +
              '      }\n' +
              '      throw new Error(`user ${userId} not found`)\n' +
              '    }),\n' +
              '\n' +
              '    Transducer.forEach(user => {\n' +
              "      console.log('Found', user.name)\n" +
              '    })\n' +
              '  ),\n' +
              '  (error, userId) => {\n' +
              '    console.error(error)\n' +
              "    console.log('userId in catcher:', userId)\n" +
              '    // original userId for which the error was thrown is provided\n' +
              '  }\n' +
              '), null)',
            position: {
              start: { line: 3, column: 1, offset: 508 },
              end: { line: 31, column: 4, offset: 1227 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Read more on ',
                position: {
                  start: { line: 33, column: 1, offset: 1229 },
                  end: { line: 33, column: 14, offset: 1242 }
                }
              },
              {
                type: 'link',
                title: null,
                url: '/blog/transducers-crash-course-rubico-v2',
                children: [
                  {
                    type: 'text',
                    value: 'transducers',
                    position: {
                      start: { line: 33, column: 15, offset: 1243 },
                      end: { line: 33, column: 26, offset: 1254 }
                    }
                  }
                ],
                position: {
                  start: { line: 33, column: 14, offset: 1242 },
                  end: { line: 33, column: 69, offset: 1297 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 33, column: 69, offset: 1297 },
                  end: { line: 33, column: 70, offset: 1298 }
                }
              }
            ],
            position: {
              start: { line: 33, column: 1, offset: 1229 },
              end: { line: 33, column: 70, offset: 1298 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 35, column: 1, offset: 1300 },
                  end: { line: 35, column: 10, offset: 1309 }
                }
              }
            ],
            position: {
              start: { line: 35, column: 1, offset: 1300 },
              end: { line: 35, column: 10, offset: 1309 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 36, column: 5, offset: 1314 },
                              end: { line: 36, column: 13, offset: 1322 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 36, column: 4, offset: 1313 },
                          end: { line: 36, column: 30, offset: 1339 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 36, column: 4, offset: 1313 },
                      end: { line: 36, column: 30, offset: 1339 }
                    }
                  }
                ],
                position: {
                  start: { line: 36, column: 2, offset: 1311 },
                  end: { line: 36, column: 30, offset: 1339 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.map',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.map',
                            position: {
                              start: { line: 37, column: 5, offset: 1344 },
                              end: { line: 37, column: 19, offset: 1358 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 37, column: 4, offset: 1343 },
                          end: { line: 37, column: 42, offset: 1381 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 37, column: 4, offset: 1343 },
                      end: { line: 37, column: 42, offset: 1381 }
                    }
                  }
                ],
                position: {
                  start: { line: 37, column: 2, offset: 1341 },
                  end: { line: 37, column: 42, offset: 1381 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.filter',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.filter',
                            position: {
                              start: { line: 38, column: 5, offset: 1386 },
                              end: { line: 38, column: 22, offset: 1403 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 38, column: 4, offset: 1385 },
                          end: { line: 38, column: 48, offset: 1429 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 38, column: 4, offset: 1385 },
                      end: { line: 38, column: 48, offset: 1429 }
                    }
                  }
                ],
                position: {
                  start: { line: 38, column: 2, offset: 1383 },
                  end: { line: 38, column: 48, offset: 1429 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.flatMap',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.flatMap',
                            position: {
                              start: { line: 39, column: 5, offset: 1434 },
                              end: { line: 39, column: 23, offset: 1452 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 39, column: 4, offset: 1433 },
                          end: { line: 39, column: 50, offset: 1479 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 39, column: 4, offset: 1433 },
                      end: { line: 39, column: 50, offset: 1479 }
                    }
                  }
                ],
                position: {
                  start: { line: 39, column: 2, offset: 1431 },
                  end: { line: 39, column: 50, offset: 1479 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.forEach',
                            position: {
                              start: { line: 40, column: 5, offset: 1484 },
                              end: { line: 40, column: 23, offset: 1502 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 40, column: 4, offset: 1483 },
                          end: { line: 40, column: 50, offset: 1529 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 40, column: 4, offset: 1483 },
                      end: { line: 40, column: 50, offset: 1529 }
                    }
                  }
                ],
                position: {
                  start: { line: 40, column: 2, offset: 1481 },
                  end: { line: 40, column: 50, offset: 1529 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.passthrough',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.passthrough',
                            position: {
                              start: { line: 41, column: 5, offset: 1534 },
                              end: { line: 41, column: 27, offset: 1556 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 41, column: 4, offset: 1533 },
                          end: { line: 41, column: 58, offset: 1587 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 41, column: 4, offset: 1533 },
                      end: { line: 41, column: 58, offset: 1587 }
                    }
                  }
                ],
                position: {
                  start: { line: 41, column: 2, offset: 1531 },
                  end: { line: 41, column: 58, offset: 1587 }
                }
              }
            ],
            position: {
              start: { line: 36, column: 2, offset: 1311 },
              end: { line: 41, column: 58, offset: 1587 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 41, column: 58, offset: 1587 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/Transducer.js'
  },
  {
    name: '__',
    synopsis: '```coffeescript [specscript]\n__ Symbol(placeholder)\n```',
    description: 'A special placeholder value `__` (two underscores) that denotes the position of an argument in a curried function.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'console.log(\n' +
      '  curry.arity(3, Array.of, __, 2, 3)(1),\n' +
      ') // [1, 2, 3]\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [eq](/docs/eq)\n' +
      ' * [thunkify](/docs/thunkify)\n' +
      ' * [always](/docs/always)\n' +
      ' * [curry](/docs/curry)\n' +
      ' * [curry.arity](/docs/curry.arity)\n' +
      ' * [Transducer.map](/docs/Transducer.map)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '__',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 3, offset: 2 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 3, offset: 2 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 3, offset: 2 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '__ Symbol(placeholder)',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 55 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 55 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'A special placeholder value ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              },
              {
                type: 'inlineCode',
                value: '__',
                position: {
                  start: { line: 1, column: 29, offset: 28 },
                  end: { line: 1, column: 33, offset: 32 }
                }
              },
              {
                type: 'text',
                value: ' (two underscores) that denotes the position of an argument in a curried function.',
                position: {
                  start: { line: 1, column: 33, offset: 32 },
                  end: { line: 1, column: 115, offset: 114 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 115, offset: 114 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'console.log(\n' +
              '  curry.arity(3, Array.of, __, 2, 3)(1),\n' +
              ') // [1, 2, 3]',
            position: {
              start: { line: 3, column: 1, offset: 116 },
              end: { line: 7, column: 4, offset: 215 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 9, column: 1, offset: 217 },
                  end: { line: 9, column: 10, offset: 226 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 217 },
              end: { line: 9, column: 10, offset: 226 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/eq',
                        children: [
                          {
                            type: 'text',
                            value: 'eq',
                            position: {
                              start: { line: 10, column: 5, offset: 231 },
                              end: { line: 10, column: 7, offset: 233 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 10, column: 4, offset: 230 },
                          end: { line: 10, column: 18, offset: 244 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 10, column: 4, offset: 230 },
                      end: { line: 10, column: 18, offset: 244 }
                    }
                  }
                ],
                position: {
                  start: { line: 10, column: 2, offset: 228 },
                  end: { line: 10, column: 18, offset: 244 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 11, column: 5, offset: 249 },
                              end: { line: 11, column: 13, offset: 257 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 11, column: 4, offset: 248 },
                          end: { line: 11, column: 30, offset: 274 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 11, column: 4, offset: 248 },
                      end: { line: 11, column: 30, offset: 274 }
                    }
                  }
                ],
                position: {
                  start: { line: 11, column: 2, offset: 246 },
                  end: { line: 11, column: 30, offset: 274 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/always',
                        children: [
                          {
                            type: 'text',
                            value: 'always',
                            position: {
                              start: { line: 12, column: 5, offset: 279 },
                              end: { line: 12, column: 11, offset: 285 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 12, column: 4, offset: 278 },
                          end: { line: 12, column: 26, offset: 300 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 12, column: 4, offset: 278 },
                      end: { line: 12, column: 26, offset: 300 }
                    }
                  }
                ],
                position: {
                  start: { line: 12, column: 2, offset: 276 },
                  end: { line: 12, column: 26, offset: 300 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/curry',
                        children: [
                          {
                            type: 'text',
                            value: 'curry',
                            position: {
                              start: { line: 13, column: 5, offset: 305 },
                              end: { line: 13, column: 10, offset: 310 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 13, column: 4, offset: 304 },
                          end: { line: 13, column: 24, offset: 324 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 13, column: 4, offset: 304 },
                      end: { line: 13, column: 24, offset: 324 }
                    }
                  }
                ],
                position: {
                  start: { line: 13, column: 2, offset: 302 },
                  end: { line: 13, column: 24, offset: 324 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/curry.arity',
                        children: [
                          {
                            type: 'text',
                            value: 'curry.arity',
                            position: {
                              start: { line: 14, column: 5, offset: 329 },
                              end: { line: 14, column: 16, offset: 340 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 14, column: 4, offset: 328 },
                          end: { line: 14, column: 36, offset: 360 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 14, column: 4, offset: 328 },
                      end: { line: 14, column: 36, offset: 360 }
                    }
                  }
                ],
                position: {
                  start: { line: 14, column: 2, offset: 326 },
                  end: { line: 14, column: 36, offset: 360 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.map',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.map',
                            position: {
                              start: { line: 15, column: 5, offset: 365 },
                              end: { line: 15, column: 19, offset: 379 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 15, column: 4, offset: 364 },
                          end: { line: 15, column: 42, offset: 402 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 15, column: 4, offset: 364 },
                      end: { line: 15, column: 42, offset: 402 }
                    }
                  }
                ],
                position: {
                  start: { line: 15, column: 2, offset: 362 },
                  end: { line: 15, column: 42, offset: 402 }
                }
              }
            ],
            position: {
              start: { line: 10, column: 2, offset: 228 },
              end: { line: 15, column: 42, offset: 402 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 15, column: 42, offset: 402 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/__.js'
  },
  {
    name: 'File',
    synopsis: '```coffeescript [specscript]\nnew File(path string) -> File\n```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'File',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'new File(path string) -> File',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 62 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 62 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/File.js'
  },
  {
    name: 'File.prototype.write',
    synopsis: '```coffeescript [specscript]\nnew File(...).write(str string) -> ()\n```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'File.prototype.write',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'new File(...).write(str string) -> ()',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 70 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 70 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/File.js'
  },
  {
    name: 'File.prototype.rm',
    synopsis: '```coffeescript [specscript]\nnew File(...).rm() -> Promise<>\n```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'File.prototype.rm',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'new File(...).rm() -> Promise<>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 64 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 64 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/File.js'
  },
  {
    name: 'FilteringAsyncIterator',
    synopsis: '```coffeescript [specscript]\n' +
      'const filteringAsyncIterator = new FilteringAsyncIterator(\n' +
      '  asyncIterator AsyncIterator<T>,\n' +
      '  predicate T=>boolean,\n' +
      ') -> FilteringAsyncIterator<T>\n' +
      '\n' +
      'filteringAsyncIterator.next() -> { value: Promise, done: boolean }\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'FilteringAsyncIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 23, offset: 22 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 23, offset: 22 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 23, offset: 22 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'const filteringAsyncIterator = new FilteringAsyncIterator(\n' +
              '  asyncIterator AsyncIterator<T>,\n' +
              '  predicate T=>boolean,\n' +
              ') -> FilteringAsyncIterator<T>\n' +
              '\n' +
              'filteringAsyncIterator.next() -> { value: Promise, done: boolean }',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 248 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 248 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/FilteringAsyncIterator.js'
  },
  {
    name: 'FilteringIterator',
    synopsis: '```coffeescript [specscript]\n' +
      'FilteringIterator<\n' +
      '  T any,\n' +
      '  iterator Iterator<T>,\n' +
      '  predicate T=>boolean, # no async\n' +
      '>(iterator, predicate) -> filteringIterator Iterator<T>\n' +
      '\n' +
      'filteringIterator.next() -> { value: T, done: boolean }\n' +
      '```',
    description: 'Creates a filtering iterator, i.e. an iterator that filteres a source iterator by predicate.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'FilteringIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'FilteringIterator<\n' +
              '  T any,\n' +
              '  iterator Iterator<T>,\n' +
              '  predicate T=>boolean, # no async\n' +
              '>(iterator, predicate) -> filteringIterator Iterator<T>\n' +
              '\n' +
              'filteringIterator.next() -> { value: T, done: boolean }',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 232 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 232 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Creates a filtering iterator, i.e. an iterator that filteres a source iterator by predicate.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 93, offset: 92 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 93, offset: 92 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 93, offset: 92 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/FilteringIterator.js'
  },
  {
    name: 'FlatMappingAsyncIterator',
    synopsis: '```coffeescript [specscript]\n' +
      'new FlatMappingAsyncIterator(\n' +
      '  asyncIterator AsyncIterator, flatMapper function,\n' +
      ') -> FlatMappingAsyncIterator AsyncIterator\n' +
      '```',
    execution: 'concurrent',
    muxing: '',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'FlatMappingAsyncIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'new FlatMappingAsyncIterator(\n' +
              '  asyncIterator AsyncIterator, flatMapper function,\n' +
              ') -> FlatMappingAsyncIterator AsyncIterator',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 158 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 158 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'concurrent',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      muxing: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/FlatMappingAsyncIterator.js'
  },
  {
    name: 'FlatMappingAsyncIterator.prototype.next',
    synopsis: '```coffeescript [specscript]\n' +
      'new FlatMappingAsyncIterator(\n' +
      '  asyncIterator AsyncIterator, flatMapper function,\n' +
      ').next() -> Promise<{ value, done }>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'FlatMappingAsyncIterator.prototype.next',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 40, offset: 39 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 40, offset: 39 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 40, offset: 39 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'new FlatMappingAsyncIterator(\n' +
              '  asyncIterator AsyncIterator, flatMapper function,\n' +
              ').next() -> Promise<{ value, done }>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 151 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 151 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/FlatMappingAsyncIterator.js'
  },
  {
    name: 'FlatMappingIterator',
    synopsis: '```coffeescript [specscript]\n' +
      'FlatMappingIterator(\n' +
      '  iterator Iterator, flatMapper function,\n' +
      ') -> FlatMappingIterator { next, SymbolIterator }\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'FlatMappingIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'FlatMappingIterator(\n' +
              '  iterator Iterator, flatMapper function,\n' +
              ') -> FlatMappingIterator { next, SymbolIterator }',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 145 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 145 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/FlatMappingIterator.js'
  },
  {
    name: 'MappingAsyncIterator',
    synopsis: '```coffeescript [specscript]\n' +
      'mappingAsyncIterator = new MappingAsyncIterator(\n' +
      '  asyncIter AsyncIterator<T>,\n' +
      '  mapper T=>Promise|any,\n' +
      ') -> mappingAsyncIterator AsyncIterator\n' +
      '\n' +
      'mappingAsyncIterator.next() -> Promise<{ value: any, done: boolean }>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'MappingAsyncIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mappingAsyncIterator = new MappingAsyncIterator(\n' +
              '  asyncIter AsyncIterator<T>,\n' +
              '  mapper T=>Promise|any,\n' +
              ') -> mappingAsyncIterator AsyncIterator\n' +
              '\n' +
              'mappingAsyncIterator.next() -> Promise<{ value: any, done: boolean }>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 247 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 247 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/MappingAsyncIterator.js'
  },
  {
    name: 'MappingIterator',
    synopsis: '```coffeescript [specscript]\n' +
      'MappingIterator<\n' +
      '  T any,\n' +
      '  iterator Iterator<T>,\n' +
      '  mapper T=>any,\n' +
      '>(iterator, mapper) -> mappingIterator Object\n' +
      '\n' +
      'mappingIterator.next() -> nextIteration { value: any, done: boolean }\n' +
      '```',
    description: 'Creates a mapping iterator, i.e. an iterator that applies a mapper to each element of a source iterator.\n' +
      '\n' +
      'Note: consuming the mapping iterator also consumes the source iterator.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'MappingIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'MappingIterator<\n' +
              '  T any,\n' +
              '  iterator Iterator<T>,\n' +
              '  mapper T=>any,\n' +
              '>(iterator, mapper) -> mappingIterator Object\n' +
              '\n' +
              'mappingIterator.next() -> nextIteration { value: any, done: boolean }',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 216 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 216 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Creates a mapping iterator, i.e. an iterator that applies a mapper to each element of a source iterator.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 105, offset: 104 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 105, offset: 104 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: consuming the mapping iterator also consumes the source iterator.',
                position: {
                  start: { line: 3, column: 1, offset: 106 },
                  end: { line: 3, column: 72, offset: 177 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 106 },
              end: { line: 3, column: 72, offset: 177 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 72, offset: 177 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/MappingIterator.js'
  },
  {
    name: 'NextIteration',
    synopsis: 'NextIteration(value any) -> nextIteration { value, done: false }',
    description: 'Create an object to send for the next iteration',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'NextIteration',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'NextIteration(value any) -> nextIteration { value, done: false }',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 65, offset: 64 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 65, offset: 64 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 65, offset: 64 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create an object to send for the next iteration',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 48, offset: 47 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 48, offset: 47 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 48, offset: 47 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/NextIteration.js'
  },
  {
    name: 'SelfReferencingPromise',
    synopsis: '```coffeescript [specscript]\n' +
      'SelfReferencingPromise(basePromise Promise<T>) -> Promise<[T, basePromise]>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'SelfReferencingPromise',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 23, offset: 22 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 23, offset: 22 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 23, offset: 22 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'SelfReferencingPromise(basePromise Promise<T>) -> Promise<[T, basePromise]>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 108 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 108 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/SelfReferencingPromise.js'
  },
  {
    name: 'formatRunOutput',
    synopsis: '```coffeescript [specscript]\n' +
      'formatRunOutput(\n' +
      '  description string,\n' +
      '  loopCount number,\n' +
      '  duration number\n' +
      ') -> formatted string\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'formatRunOutput',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'formatRunOutput(\n' +
              '  description string,\n' +
              '  loopCount number,\n' +
              '  duration number\n' +
              ') -> formatted string',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 131 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 131 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/TimeInLoopSuite.js'
  },
  {
    name: 'TimeInLoopSuite',
    synopsis: '```coffeescript [specscript]\n' +
      'new TimeInLoopSuite(options? {\n' +
      '  loopCount?: number,\n' +
      '  runs?: number,\n' +
      '  async?: boolean,\n' +
      '}) -> TimeInLoopSuite\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'TimeInLoopSuite',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'new TimeInLoopSuite(options? {\n' +
              '  loopCount?: number,\n' +
              '  runs?: number,\n' +
              '  async?: boolean,\n' +
              '}) -> TimeInLoopSuite',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 143 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 143 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/TimeInLoopSuite.js'
  },
  {
    name: 'TimeInLoopSuite.prototype.emit',
    synopsis: '```coffeescript [specscript]\n' +
      'new TimeInLoopSuite(...).emit(eventName string, event Object) -> ()\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'TimeInLoopSuite.prototype.emit',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 31, offset: 30 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 31, offset: 30 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 31, offset: 30 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'new TimeInLoopSuite(...).emit(eventName string, event Object) -> ()',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 100 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 100 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/TimeInLoopSuite.js'
  },
  {
    name: 'TimeInLoopSuite.prototype.on',
    synopsis: '```coffeescript [specscript]\n' +
      'new TimeInLoopSuite(...).on(eventName string, handler function) -> ()\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'TimeInLoopSuite.prototype.on',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'new TimeInLoopSuite(...).on(eventName string, handler function) -> ()',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 102 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 102 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/TimeInLoopSuite.js'
  },
  {
    name: 'TimeInLoopSuite.prototype.add',
    synopsis: '```coffeescript [specscript]\n' +
      'new TimeInLoopSuite(...).add(description string, func function) -> ()\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'TimeInLoopSuite.prototype.add',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 30, offset: 29 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 30, offset: 29 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'new TimeInLoopSuite(...).add(description string, func function) -> ()',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 102 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 102 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/TimeInLoopSuite.js'
  },
  {
    name: 'TimeInLoopSuite.prototype.run',
    synopsis: '```coffeescript [specscript]\n' +
      'new TimeInLoopSuite(...).run() -> Promise<>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'TimeInLoopSuite.prototype.run',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 30, offset: 29 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 30, offset: 29 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'new TimeInLoopSuite(...).run() -> Promise<>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 76 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 76 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/TimeInLoopSuite.js'
  },
  {
    name: 'add',
    synopsis: 'add (a any, b any) -> a + b',
    description: '`+` two things',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'add',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 4, offset: 3 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 4, offset: 3 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'add (a any, b any) -> a + b',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 28, offset: 27 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 28, offset: 27 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: '+',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              },
              {
                type: 'text',
                value: ' two things',
                position: {
                  start: { line: 1, column: 4, offset: 3 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/add.js'
  },
  {
    name: 'always',
    synopsis: '```coffeescript [specscript]\nalways(value any) -> getter ()=>value\n```',
    description: 'Create a function that always returns a value.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'always',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'always(value any) -> getter ()=>value',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 70 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 70 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a function that always returns a value.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 47, offset: 46 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 47, offset: 46 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 47, offset: 46 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/always.js'
  },
  {
    name: 'areAllValuesNonfunctions',
    synopsis: '```coffeescript [specscript]\n' +
      'areAllValuesNonfunctions(values Array<function|value>) -> boolean\n' +
      'areAllValuesNonfunctions(values Object<function|value>) -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'areAllValuesNonfunctions',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'areAllValuesNonfunctions(values Array<function|value>) -> boolean\n' +
              'areAllValuesNonfunctions(values Object<function|value>) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 4, offset: 165 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 4, offset: 165 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/areAllValuesNonfunctions.js'
  },
  {
    name: 'areAnyValuesPromises',
    synopsis: '```coffeescript [specscript]\n' +
      'areAnyValuesPromises(values Array) -> boolean\n' +
      'areAnyValuesPromises(values Object) -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'areAnyValuesPromises',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'areAnyValuesPromises(values Array) -> boolean\n' +
              'areAnyValuesPromises(values Object) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 4, offset: 125 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 4, offset: 125 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/areAnyValuesPromises.js'
  },
  {
    name: 'arrayConditional',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayConditional(\n' +
      '  array Array<function|value>,\n' +
      '  args Array,\n' +
      '  funcsIndex number,\n' +
      ') -> Promise|any\n' +
      '```',
    description: 'Conditional operator `a ? b : c ? d : e ? ...` for functions.',
    TODO: [
      'isPromise conditional await',
      'benchmark vs regular promise handling'
    ],
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayConditional',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayConditional(\n' +
              '  array Array<function|value>,\n' +
              '  args Array,\n' +
              '  funcsIndex number,\n' +
              ') -> Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 133 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 133 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Conditional operator ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 22, offset: 21 }
                }
              },
              {
                type: 'inlineCode',
                value: 'a ? b : c ? d : e ? ...',
                position: {
                  start: { line: 1, column: 22, offset: 21 },
                  end: { line: 1, column: 47, offset: 46 }
                }
              },
              {
                type: 'text',
                value: ' for functions.',
                position: {
                  start: { line: 1, column: 47, offset: 46 },
                  end: { line: 1, column: 62, offset: 61 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 62, offset: 61 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 62, offset: 61 }
        }
      },
      TODO: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayConditional.js'
  },
  {
    name: 'arrayEvery',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayEvery(array Array, predicate ...any=>boolean) -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayEvery',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayEvery(array Array, predicate ...any=>boolean) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 94 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 94 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayEvery.js'
  },
  {
    name: '_arrayExtend',
    synopsis: '```coffeescript [specscript]\n' +
      '_arrayExtend(array Array, values Array) -> array\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_arrayExtend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_arrayExtend(array Array, values Array) -> array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 81 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 81 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayExtend.js'
  },
  {
    name: 'arrayExtend',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayExtend(array Array, values Array) -> array\n' +
      '```',
    description: 'Extend an array with values.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayExtend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayExtend(array Array, values Array) -> array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 80 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 80 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Extend an array with values.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayExtend.js'
  },
  {
    name: 'arrayExtendMap',
    synopsis: '```coffeescript [specscript]\n' +
      'any -> value; any -> mapped\n' +
      '\n' +
      'arrayExtendMap(\n' +
      '  array Array<mapped>,\n' +
      '  values Array<value>,\n' +
      '  valuesIndex number,\n' +
      '  valuesMapper value=>mapped,\n' +
      ') -> array\n' +
      '```',
    description: '`arrayExtend` while mapping',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayExtendMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'any -> value; any -> mapped\n' +
              '\n' +
              'arrayExtendMap(\n' +
              '  array Array<mapped>,\n' +
              '  values Array<value>,\n' +
              '  valuesIndex number,\n' +
              '  valuesMapper value=>mapped,\n' +
              ') -> array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 186 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 186 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'arrayExtend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              },
              {
                type: 'text',
                value: ' while mapping',
                position: {
                  start: { line: 1, column: 14, offset: 13 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 28, offset: 27 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 28, offset: 27 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayExtendMap.js'
  },
  {
    name: 'arrayExtendMapIndexes',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayExtendMapIndexes(\n' +
      '  array Array,\n' +
      '  values Array,\n' +
      '  mapper function,\n' +
      '  index number,\n' +
      ') -> array\n' +
      '```',
    description: '`arrayExtend` while mapping indexes',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayExtendMapIndexes',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 22, offset: 21 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 22, offset: 21 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 22, offset: 21 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayExtendMapIndexes(\n' +
              '  array Array,\n' +
              '  values Array,\n' +
              '  mapper function,\n' +
              '  index number,\n' +
              ') -> array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 132 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 132 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'arrayExtend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              },
              {
                type: 'text',
                value: ' while mapping indexes',
                position: {
                  start: { line: 1, column: 14, offset: 13 },
                  end: { line: 1, column: 36, offset: 35 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 36, offset: 35 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 36, offset: 35 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayExtendMapIndexes.js'
  },
  {
    name: 'arrayExtendMapWithIndex',
    catchphrase: 'internal extend while mapping with index',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayExtendMapWithIndex<\n' +
      '  T any,\n' +
      '  array Array<T>,\n' +
      '  values Array<T>,\n' +
      '  mapper T=>Promise|any,\n' +
      '  index number,\n' +
      '>(array, values, mapper, index) -> Promise|array\n' +
      '```',
    description: 'Extend an array with values from a mapping operation.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayExtendMapWithIndex',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 24, offset: 23 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'internal extend while mapping with index',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 41, offset: 40 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 41, offset: 40 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 41, offset: 40 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayExtendMapWithIndex<\n' +
              '  T any,\n' +
              '  array Array<T>,\n' +
              '  values Array<T>,\n' +
              '  mapper T=>Promise|any,\n' +
              '  index number,\n' +
              '>(array, values, mapper, index) -> Promise|array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 193 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 193 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Extend an array with values from a mapping operation.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 54, offset: 53 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 54, offset: 53 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 54, offset: 53 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayExtendMapWithIndex.js'
  },
  {
    name: 'arrayFilter',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayFilter<T>(\n' +
      '  array Array<T>,\n' +
      '  predicate T=>Promise|boolean,\n' +
      ') -> result Promise|Array<T>\n' +
      '```',
    description: 'Filter an array concurrently by predicate. `predicate` may be asynchronous.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayFilter',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayFilter<T>(\n' +
              '  array Array<T>,\n' +
              '  predicate T=>Promise|boolean,\n' +
              ') -> result Promise|Array<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 127 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 127 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Filter an array concurrently by predicate. ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 44, offset: 43 }
                }
              },
              {
                type: 'inlineCode',
                value: 'predicate',
                position: {
                  start: { line: 1, column: 44, offset: 43 },
                  end: { line: 1, column: 55, offset: 54 }
                }
              },
              {
                type: 'text',
                value: ' may be asynchronous.',
                position: {
                  start: { line: 1, column: 55, offset: 54 },
                  end: { line: 1, column: 76, offset: 75 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 76, offset: 75 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 76, offset: 75 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayFilter.js'
  },
  {
    name: 'arrayFilterByConditions',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayFilterByConditions(\n' +
      '  array Array,\n' +
      '  result Array,\n' +
      '  index number,\n' +
      '  conditions Array<boolean>,\n' +
      ') -> result\n' +
      '```',
    description: 'Filter an array by a boolean array of conditions',
    TODO: 'switch positions of index and conditions',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayFilterByConditions',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 24, offset: 23 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayFilterByConditions(\n' +
              '  array Array,\n' +
              '  result Array,\n' +
              '  index number,\n' +
              '  conditions Array<boolean>,\n' +
              ') -> result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 145 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 145 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Filter an array by a boolean array of conditions',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 49, offset: 48 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 49, offset: 48 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 49, offset: 48 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'switch positions of index and conditions',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 41, offset: 40 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 41, offset: 40 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 41, offset: 40 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayFilterByConditions.js'
  },
  {
    name: 'arrayFilterIndexes',
    synopsis: '```coffeescript [specscript]\n' +
      'KeyPredicate = (key string)=>Promise|boolean\n' +
      '\n' +
      'arrayFilterIndexes(\n' +
      '  predicate KeyPredicate,\n' +
      '  array Array,\n' +
      ') -> result Promise|Array\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayFilterIndexes',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'KeyPredicate = (key string)=>Promise|boolean\n' +
              '\n' +
              'arrayFilterIndexes(\n' +
              '  predicate KeyPredicate,\n' +
              '  array Array,\n' +
              ') -> result Promise|Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 165 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 165 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayFilterIndexes.js'
  },
  {
    name: 'arrayFilterWithIndex',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayFilterWithIndex<\n' +
      '  T any,\n' +
      '  array Array<T>,\n' +
      '  index number,\n' +
      '  indexedPredicate (T, index, array)=>Promise|boolean,\n' +
      '>(array, indexedPredicate) -> filteredWithIndex Array<T>\n' +
      '```',
    description: 'Filter an array concurrently by predicate.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayFilterWithIndex',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayFilterWithIndex<\n' +
              '  T any,\n' +
              '  array Array<T>,\n' +
              '  index number,\n' +
              '  indexedPredicate (T, index, array)=>Promise|boolean,\n' +
              '>(array, indexedPredicate) -> filteredWithIndex Array<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 209 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 209 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Filter an array concurrently by predicate.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 43, offset: 42 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 43, offset: 42 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 43, offset: 42 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayFilterWithIndex.js'
  },
  {
    name: 'arrayFindAsync',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  array Array<T>,\n' +
      '  predicate T=>Promise|boolean,\n' +
      '  result Promise<T|undefined>\n' +
      '\n' +
      'arrayFindAsync(array, predicate) -> result\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayFindAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  array Array<T>,\n' +
              '  predicate T=>Promise|boolean,\n' +
              '  result Promise<T|undefined>\n' +
              '\n' +
              'arrayFindAsync(array, predicate) -> result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 167 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 167 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayFind.js'
  },
  {
    name: 'arrayFind',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  array Array<T>,\n' +
      '  predicate T=>Promise|boolean,\n' +
      '  result Promise|T|undefined\n' +
      '\n' +
      'arrayFind(array, predicate) -> result\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayFind',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  array Array<T>,\n' +
              '  predicate T=>Promise|boolean,\n' +
              '  result Promise|T|undefined\n' +
              '\n' +
              'arrayFind(array, predicate) -> result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 161 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 161 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayFind.js'
  },
  {
    name: 'arrayFlatMap',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'arrayFlatMap<T>(\n' +
      '  array Array<T>,\n' +
      '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
      ') -> Promise|Array<T>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayFlatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'arrayFlatMap<T>(\n' +
              '  array Array<T>,\n' +
              '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
              ') -> Promise|Array<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 13, column: 4, offset: 436 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 436 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayFlatMap.js'
  },
  {
    name: 'arrayFlatten',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'arrayFlatten<\n' +
      '  T any,\n' +
      '  array Array<Monad<T>|Foldable<T>|T>\n' +
      '>(array) -> Array<T>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayFlatten',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'arrayFlatten<\n' +
              '  T any,\n' +
              '  array Array<Monad<T>|Foldable<T>|T>\n' +
              '>(array) -> Array<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 13, column: 4, offset: 413 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 413 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayFlatten.js'
  },
  {
    name: 'arrayForEach',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  array Array<T>,\n' +
      '  callback T=>()\n' +
      '\n' +
      'arrayForEach(array, callback) -> ()\n' +
      '```',
    description: 'Call a callback for each element of an iterator. Return a promise if any executions are asynchronous.\n' +
      '\n' +
      'Note: iterator is consumed',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayForEach',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  array Array<T>,\n' +
              '  callback T=>()\n' +
              '\n' +
              'arrayForEach(array, callback) -> ()',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 115 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 115 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Call a callback for each element of an iterator. Return a promise if any executions are asynchronous.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 102, offset: 101 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 102, offset: 101 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: iterator is consumed',
                position: {
                  start: { line: 3, column: 1, offset: 103 },
                  end: { line: 3, column: 27, offset: 129 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 103 },
              end: { line: 3, column: 27, offset: 129 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 27, offset: 129 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayForEach.js'
  },
  {
    name: 'arrayForEachSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  array Array<T>,\n' +
      '  callback T=>()\n' +
      '\n' +
      'arrayForEachSeries(array Array, callback function) -> array|Promise\n' +
      '```',
    description: 'Call a callback for each element of an array in series. Return a promise if any executions are asynchronous.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayForEachSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  array Array<T>,\n' +
              '  callback T=>()\n' +
              '\n' +
              'arrayForEachSeries(array Array, callback function) -> array|Promise',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 147 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 147 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Call a callback for each element of an array in series. Return a promise if any executions are asynchronous.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 109, offset: 108 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 109, offset: 108 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 109, offset: 108 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayForEachSeries.js'
  },
  {
    name: 'arrayJoin',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayJoin(array Array, delimiter string) -> string\n' +
      '```',
    description: 'Call `.join` on an array.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayJoin',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayJoin(array Array, delimiter string) -> string',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 83 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 83 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Call ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              },
              {
                type: 'inlineCode',
                value: '.join',
                position: {
                  start: { line: 1, column: 6, offset: 5 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              },
              {
                type: 'text',
                value: ' on an array.',
                position: {
                  start: { line: 1, column: 13, offset: 12 },
                  end: { line: 1, column: 26, offset: 25 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 26, offset: 25 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 26, offset: 25 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayJoin.js'
  },
  {
    name: 'arrayMap',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayMap(\n' +
      '  array Array,\n' +
      '  mapper (element any, index number, array Array)=>Promise|any,\n' +
      ') -> Promise|Array\n' +
      '```',
    description: 'Apply a mapper to each element of an array, returning an array. Mapper may be asynchronous.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayMap(\n' +
              '  array Array,\n' +
              '  mapper (element any, index number, array Array)=>Promise|any,\n' +
              ') -> Promise|Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 140 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 140 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a mapper to each element of an array, returning an array. Mapper may be asynchronous.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 92, offset: 91 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 92, offset: 91 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 92, offset: 91 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayMap.js'
  },
  {
    name: 'arrayMapPoolAsync',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayMapPoolAsync<\n' +
      '  T any,\n' +
      '  array Array<T>,\n' +
      '  f T=>Promise|any,\n' +
      '  concurrencyLimit number,\n' +
      '  result Array,\n' +
      '  index number,\n' +
      '  promises Set<Promise>,\n' +
      '>(array, f, concurrencyLimit, result, index, promises) -> result\n' +
      '```',
    description: 'Apply a function `f` with limited concurrency to each element of an array, returning a Promise of an array of results.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayMapPoolAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayMapPoolAsync<\n' +
              '  T any,\n' +
              '  array Array<T>,\n' +
              '  f T=>Promise|any,\n' +
              '  concurrencyLimit number,\n' +
              '  result Array,\n' +
              '  index number,\n' +
              '  promises Set<Promise>,\n' +
              '>(array, f, concurrencyLimit, result, index, promises) -> result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 11, column: 4, offset: 247 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 4, offset: 247 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a function ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              },
              {
                type: 'inlineCode',
                value: 'f',
                position: {
                  start: { line: 1, column: 18, offset: 17 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              },
              {
                type: 'text',
                value: ' with limited concurrency to each element of an array, returning a Promise of an array of results.',
                position: {
                  start: { line: 1, column: 21, offset: 20 },
                  end: { line: 1, column: 119, offset: 118 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 119, offset: 118 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 119, offset: 118 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayMapPool.js'
  },
  {
    name: 'arrayMapPool',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayMapPool(array Array, concurrency number, f function) -> Promise|array\n' +
      '```',
    description: 'Apply a function `f` with limited concurrency to each element of an array, returning an array of results.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayMapPool',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayMapPool(array Array, concurrency number, f function) -> Promise|array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 107 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 107 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a function ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              },
              {
                type: 'inlineCode',
                value: 'f',
                position: {
                  start: { line: 1, column: 18, offset: 17 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              },
              {
                type: 'text',
                value: ' with limited concurrency to each element of an array, returning an array of results.',
                position: {
                  start: { line: 1, column: 21, offset: 20 },
                  end: { line: 1, column: 106, offset: 105 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 106, offset: 105 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 106, offset: 105 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayMapPool.js'
  },
  {
    name: 'arrayMapRate',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayMapRate(\n' +
      '  array Array,\n' +
      '  rate number,\n' +
      '  f function,\n' +
      ') -> Promise<Array>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayMapRate',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayMapRate(\n' +
              '  array Array,\n' +
              '  rate number,\n' +
              '  f function,\n' +
              ') -> Promise<Array>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 110 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 110 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayMapRate.js'
  },
  {
    name: 'range',
    synopsis: '```coffeescript [specscript]\n' +
      'range(lower number, upper number) -> numbers Array<number>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'range',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'range(lower number, upper number) -> numbers Array<number>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 91 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 91 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayMapRate.js'
  },
  {
    name: 'arrayMapSeriesAsync',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayMapSeriesAsync<\n' +
      '  T any,\n' +
      '  array Array<T>,\n' +
      '  mapper (T,index)=>Promise|any,\n' +
      '  result Array,\n' +
      '  index number,\n' +
      '>(array, mapper, result Array, index) -> Promise|result\n' +
      '```',
    description: 'Apply a mapper in series to each element of an array, returning a Promise of an array of results. `mapper` can be asynchronous.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayMapSeriesAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayMapSeriesAsync<\n' +
              '  T any,\n' +
              '  array Array<T>,\n' +
              '  mapper (T,index)=>Promise|any,\n' +
              '  result Array,\n' +
              '  index number,\n' +
              '>(array, mapper, result Array, index) -> Promise|result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 201 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 201 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a mapper in series to each element of an array, returning a Promise of an array of results. ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 99, offset: 98 }
                }
              },
              {
                type: 'inlineCode',
                value: 'mapper',
                position: {
                  start: { line: 1, column: 99, offset: 98 },
                  end: { line: 1, column: 107, offset: 106 }
                }
              },
              {
                type: 'text',
                value: ' can be asynchronous.',
                position: {
                  start: { line: 1, column: 107, offset: 106 },
                  end: { line: 1, column: 128, offset: 127 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 128, offset: 127 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 128, offset: 127 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayMapSeries.js'
  },
  {
    name: 'arrayMapSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayMapSeries<\n' +
      '  T any,\n' +
      '  array Array<T>,\n' +
      '  mapper (T,index)=>Promise|any,\n' +
      '>(array, mapper) -> mappedInSeries Promise|Array\n' +
      '```',
    description: 'Apply a mapper in series to each element of an array, returning an array of results.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayMapSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayMapSeries<\n' +
              '  T any,\n' +
              '  array Array<T>,\n' +
              '  mapper (T,index)=>Promise|any,\n' +
              '>(array, mapper) -> mappedInSeries Promise|Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 157 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 157 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a mapper in series to each element of an array, returning an array of results.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 85, offset: 84 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 85, offset: 84 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 85, offset: 84 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayMapSeries.js'
  },
  {
    name: 'arrayMapWithIndex',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayMapWithIndex<\n' +
      '  T any,\n' +
      '  array Array<T>,\n' +
      '  index number,\n' +
      '  indexedMapper (T, index, array)=>Promise|any,\n' +
      '>(array, mapper) -> mappedWithIndex Promise|Array\n' +
      '```',
    description: 'Apply an indexed mapper to each element of an array, returning an array of results.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayMapWithIndex',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayMapWithIndex<\n' +
              '  T any,\n' +
              '  array Array<T>,\n' +
              '  index number,\n' +
              '  indexedMapper (T, index, array)=>Promise|any,\n' +
              '>(array, mapper) -> mappedWithIndex Promise|Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 192 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 192 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply an indexed mapper to each element of an array, returning an array of results.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 84, offset: 83 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 84, offset: 83 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 84, offset: 83 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayMapWithIndex.js'
  },
  {
    name: 'arrayOf',
    synopsis: 'Dereferenced `Array.of`',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayOf',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Dereferenced ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              },
              {
                type: 'inlineCode',
                value: 'Array.of',
                position: {
                  start: { line: 1, column: 14, offset: 13 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 24, offset: 23 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayOf.js'
  },
  {
    name: 'arrayPush',
    synopsis: 'arrayPush(\n  array Array,\n  value any\n) -> array',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayPush',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayPush(\narray Array,\nvalue any\n) -> array',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 4, column: 11, offset: 48 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 11, offset: 48 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 11, offset: 48 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayPush.js'
  },
  {
    name: 'arrayReduceAsync',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayReduceAsync<T>(\n' +
      '  array Array<T>,\n' +
      '  reducer (any, T)=>any,\n' +
      '  result any,\n' +
      '  index number,\n' +
      ') -> result\n' +
      '```',
    description: 'Execute a reducer for each element of an array, returning a Promise of a single value.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayReduceAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayReduceAsync<T>(\n' +
              '  array Array<T>,\n' +
              '  reducer (any, T)=>any,\n' +
              '  result any,\n' +
              '  index number,\n' +
              ') -> result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 138 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 138 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Execute a reducer for each element of an array, returning a Promise of a single value.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 87, offset: 86 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 87, offset: 86 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 87, offset: 86 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayReduce.js'
  },
  {
    name: 'arrayReduce',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayReduce<T>(\n' +
      '  array Array<T>,\n' +
      '  reducer (any, T)=>Promise|any,\n' +
      '  result any,\n' +
      ') -> Promise|result\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayReduce',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayReduce<T>(\n' +
              '  array Array<T>,\n' +
              '  reducer (any, T)=>Promise|any,\n' +
              '  result any,\n' +
              ') -> Promise|result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 133 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 133 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arrayReduce.js'
  },
  {
    name: 'asyncArraySome',
    synopsis: '```coffeescript [specscript]\n' +
      'asyncArraySome(\n' +
      '  array Array,\n' +
      '  predicate any=>Promise|boolean,\n' +
      '  index number,\n' +
      '  promisesInFlight Set<Promise>,\n' +
      ') -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncArraySome',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'asyncArraySome(\n' +
              '  array Array,\n' +
              '  predicate any=>Promise|boolean,\n' +
              '  index number,\n' +
              '  promisesInFlight Set<Promise>,\n' +
              ') -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 159 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 159 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arraySome.js'
  },
  {
    name: 'arraySome',
    synopsis: '```coffeescript [specscript]\n' +
      'arraySome(\n' +
      '  array Array,\n' +
      '  predicate any=>Promise|boolean,\n' +
      ') -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arraySome',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arraySome(\n' +
              '  array Array,\n' +
              '  predicate any=>Promise|boolean,\n' +
              ') -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 105 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 105 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/arraySome.js'
  },
  {
    name: 'async',
    synopsis: '```coffeescript [specscript]\n' +
      'var args ...any,\n' +
      '  result any,\n' +
      '  func ...args=>result\n' +
      '\n' +
      'async(func) -> ...args=>Promise<result>\n' +
      '```',
    description: 'Make a function always return a promise.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'async',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var args ...any,\n' +
              '  result any,\n' +
              '  func ...args=>result\n' +
              '\n' +
              'async(func) -> ...args=>Promise<result>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 127 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 127 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Make a function always return a promise.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 41, offset: 40 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 41, offset: 40 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 41, offset: 40 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/async.js'
  },
  {
    name: 'asyncGeneratorFunctionFilter',
    synopsis: '```coffeescript [specscript]\n' +
      'asyncGeneratorFunctionFilter<\n' +
      '  T any,\n' +
      '  args ...any,\n' +
      '  asyncGeneratorFunction ...args=>AsyncGenerator<T>,\n' +
      '  predicate T=>Promise|boolean,\n' +
      '>(asyncGeneratorFunction, predicate)\n' +
      '  -> filteringAsyncGeneratorFunction ...args=>AsyncGenerator<T>\n' +
      '```',
    description: 'Filter an async generator function by predicate. Predicate may be asynchronous, in which case its evaluation is awaited.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncGeneratorFunctionFilter',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'asyncGeneratorFunctionFilter<\n' +
              '  T any,\n' +
              '  args ...any,\n' +
              '  asyncGeneratorFunction ...args=>AsyncGenerator<T>,\n' +
              '  predicate T=>Promise|boolean,\n' +
              '>(asyncGeneratorFunction, predicate)\n' +
              '  -> filteringAsyncGeneratorFunction ...args=>AsyncGenerator<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 272 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 272 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Filter an async generator function by predicate. Predicate may be asynchronous, in which case its evaluation is awaited.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 121, offset: 120 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 121, offset: 120 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 121, offset: 120 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/asyncGeneratorFunctionFilter.js'
  },
  {
    name: 'asyncGeneratorFunctionFlatMap',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'asyncGeneratorFunctionFlatMap<\n' +
      '  T any,\n' +
      '  args ...any,\n' +
      '  asyncGeneratorFunction ...args=>Generator<Promise<T>>,\n' +
      '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
      '>(asyncGeneratorFunction, flatMapper) ->\n' +
      '  flatMappingAsyncGeneratorFunction ...args=>Generator<Promise<T>>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncGeneratorFunctionFlatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 30, offset: 29 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 30, offset: 29 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'asyncGeneratorFunctionFlatMap<\n' +
              '  T any,\n' +
              '  args ...any,\n' +
              '  asyncGeneratorFunction ...args=>Generator<Promise<T>>,\n' +
              '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
              '>(asyncGeneratorFunction, flatMapper) ->\n' +
              '  flatMappingAsyncGeneratorFunction ...args=>Generator<Promise<T>>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 16, column: 4, offset: 599 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 16, column: 4, offset: 599 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/asyncGeneratorFunctionFlatMap.js'
  },
  {
    name: 'asyncGeneratorFunctionForEach',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  asyncGeneratorFunction ...args=>AsyncGenerator<T>,\n' +
      '  callback T=>()\n' +
      '\n' +
      'asyncGeneratorFunctionForEach(asyncGeneratorFunction, callback) -> ...args=>Promise<AsyncGenerator<>>\n' +
      '```',
    description: 'Create an async generator executor that executes a callback for each element of an async generator generated by an async generator function.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncGeneratorFunctionForEach',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 30, offset: 29 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 30, offset: 29 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  asyncGeneratorFunction ...args=>AsyncGenerator<T>,\n' +
              '  callback T=>()\n' +
              '\n' +
              'asyncGeneratorFunctionForEach(asyncGeneratorFunction, callback) -> ...args=>Promise<AsyncGenerator<>>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 216 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 216 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create an async generator executor that executes a callback for each element of an async generator generated by an async generator function.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 141, offset: 140 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 141, offset: 140 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 141, offset: 140 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/asyncGeneratorFunctionForEach.js'
  },
  {
    name: 'asyncGeneratorFunctionMap',
    synopsis: '```coffeescript [specscript]\n' +
      'asyncGeneratorFunctionMap<\n' +
      '  T any,\n' +
      '  args ...any,\n' +
      '  asyncGeneratorFunc ...args=>AsyncGenerator<T>,\n' +
      '  mapper T=>Promise|any,\n' +
      '>(asyncGeneratorFunc, mapper)\n' +
      '  -> mappingAsyncGeneratorFunc ...args=>AsyncGenerator,\n' +
      '```',
    description: 'Create a mapping async generator function from an async generator function and a mapper. A mapping async generator function produces async mapping generators that apply the mapper to each element of the original async generator.\n' +
      '\n' +
      '`mapper` may be asynchronous.',
    TODO: 'isPromise optimization',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncGeneratorFunctionMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 26, offset: 25 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 26, offset: 25 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 26, offset: 25 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'asyncGeneratorFunctionMap<\n' +
              '  T any,\n' +
              '  args ...any,\n' +
              '  asyncGeneratorFunc ...args=>AsyncGenerator<T>,\n' +
              '  mapper T=>Promise|any,\n' +
              '>(asyncGeneratorFunc, mapper)\n' +
              '  -> mappingAsyncGeneratorFunc ...args=>AsyncGenerator,',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 243 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 243 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a mapping async generator function from an async generator function and a mapper. A mapping async generator function produces async mapping generators that apply the mapper to each element of the original async generator.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 229, offset: 228 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 229, offset: 228 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'mapper',
                position: {
                  start: { line: 3, column: 1, offset: 230 },
                  end: { line: 3, column: 9, offset: 238 }
                }
              },
              {
                type: 'text',
                value: ' may be asynchronous.',
                position: {
                  start: { line: 3, column: 9, offset: 238 },
                  end: { line: 3, column: 30, offset: 259 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 230 },
              end: { line: 3, column: 30, offset: 259 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 30, offset: 259 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isPromise optimization',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 23, offset: 22 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 23, offset: 22 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 23, offset: 22 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/asyncGeneratorFunctionMap.js'
  },
  {
    name: 'asyncGeneratorFunctionReduce',
    synopsis: '```coffeescript [specscript]\n' +
      'asyncGeneratorFunctionReduce(\n' +
      '  asyncGeneratorFunction ...args=>AsyncGenerator<T>,\n' +
      '  reducer (any, T)=>any,\n' +
      '  result any,\n' +
      ') -> (...any args)=>any\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncGeneratorFunctionReduce',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'asyncGeneratorFunctionReduce(\n' +
              '  asyncGeneratorFunction ...args=>AsyncGenerator<T>,\n' +
              '  reducer (any, T)=>any,\n' +
              '  result any,\n' +
              ') -> (...any args)=>any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 178 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 178 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/asyncGeneratorFunctionReduce.js'
  },
  {
    name: 'asyncIteratorEvery',
    synopsis: 'var T any,\n' +
      '  asyncIterator AsyncIterator<T>,\n' +
      '  predicate T=>Promise|boolean,\n' +
      '  promisesInFlight Set<Promise<[T, Promise]>>,\n' +
      '  maxConcurrency number\n' +
      '\n' +
      'asyncIteratorEvery(\n' +
      '  asyncIterator, predicate, promisesInFlight, maxConcurrency,\n' +
      ') -> Promise<boolean>',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncIteratorEvery',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'var T any,\nasyncIterator AsyncIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 30, offset: 40 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 2, column: 30, offset: 40 },
                  end: { line: 2, column: 33, offset: 43 }
                }
              },
              {
                type: 'text',
                value: ',\n' +
                  'predicate T=>Promise|boolean,\n' +
                  'promisesInFlight Set<Promise<[T, Promise]>>,\n' +
                  'maxConcurrency number',
                position: {
                  start: { line: 2, column: 33, offset: 43 },
                  end: { line: 5, column: 24, offset: 147 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 24, offset: 147 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncIteratorEvery(\n' +
                  'asyncIterator, predicate, promisesInFlight, maxConcurrency,\n' +
                  ') -> Promise',
                position: {
                  start: { line: 7, column: 1, offset: 149 },
                  end: { line: 9, column: 13, offset: 243 }
                }
              },
              {
                type: 'html',
                value: '<boolean>',
                position: {
                  start: { line: 9, column: 13, offset: 243 },
                  end: { line: 9, column: 22, offset: 252 }
                }
              }
            ],
            position: {
              start: { line: 7, column: 1, offset: 149 },
              end: { line: 9, column: 22, offset: 252 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 22, offset: 252 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/asyncIteratorEvery.js'
  },
  {
    name: 'asyncIteratorFind',
    synopsis: 'var T any,\n' +
      '  asyncIterator AsyncIterator<T>,\n' +
      '  predicate T=>Promise|boolean\n' +
      '\n' +
      'asyncIteratorFind(asyncIterator, predicate) -> Promise|T|undefined',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncIteratorFind',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'var T any,\nasyncIterator AsyncIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 30, offset: 40 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 2, column: 30, offset: 40 },
                  end: { line: 2, column: 33, offset: 43 }
                }
              },
              {
                type: 'text',
                value: ',\npredicate T=>Promise|boolean',
                position: {
                  start: { line: 2, column: 33, offset: 43 },
                  end: { line: 3, column: 31, offset: 75 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 31, offset: 75 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncIteratorFind(asyncIterator, predicate) -> Promise|T|undefined',
                position: {
                  start: { line: 5, column: 1, offset: 77 },
                  end: { line: 5, column: 67, offset: 143 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 77 },
              end: { line: 5, column: 67, offset: 143 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 67, offset: 143 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/asyncIteratorFind.js'
  },
  {
    name: 'asyncIteratorForEach',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  asyncIterator AsyncIterator<T>,\n' +
      '  callback T=>()\n' +
      '\n' +
      'asyncIteratorForEach(asyncIterator, callback) -> Promise<>\n' +
      '```',
    description: 'Execute a callback function for each element of an async iterator',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncIteratorForEach',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  asyncIterator AsyncIterator<T>,\n' +
              '  callback T=>()\n' +
              '\n' +
              'asyncIteratorForEach(asyncIterator, callback) -> Promise<>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 154 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 154 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Execute a callback function for each element of an async iterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 66, offset: 65 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 66, offset: 65 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 66, offset: 65 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/asyncIteratorForEach.js'
  },
  {
    name: 'asyncIteratorForEachSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  asyncIterator AsyncIterator<T>,\n' +
      '  callback T=>()\n' +
      '\n' +
      'asyncIteratorForEachSeries(asyncIterator, callback) -> Promise<>\n' +
      '```',
    description: 'Execute a callback function for each element of an async iterator in series.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncIteratorForEachSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 27, offset: 26 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 27, offset: 26 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 27, offset: 26 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  asyncIterator AsyncIterator<T>,\n' +
              '  callback T=>()\n' +
              '\n' +
              'asyncIteratorForEachSeries(asyncIterator, callback) -> Promise<>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 160 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 160 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Execute a callback function for each element of an async iterator in series.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 77, offset: 76 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 77, offset: 76 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 77, offset: 76 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/asyncIteratorForEachSeries.js'
  },
  {
    name: 'asyncIteratorReduce',
    synopsis: '```coffeescript [specscript]\n' +
      'asyncIteratorReduce(\n' +
      '  asyncIterator AsyncIterator<T>,\n' +
      '  reducer (any, T)=>Promise|any,\n' +
      '  result any,\n' +
      ') -> result any\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncIteratorReduce',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'asyncIteratorReduce(\n' +
              '  asyncIterator AsyncIterator<T>,\n' +
              '  reducer (any, T)=>Promise|any,\n' +
              '  result any,\n' +
              ') -> result any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 150 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 150 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/asyncIteratorReduce.js'
  },
  {
    name: 'asyncIteratorSome',
    synopsis: '```coffeescript [specscript]\n' +
      'asyncIteratorSome(\n' +
      '  iterator Iterator|AsyncIterator,\n' +
      '  predicate any=>Promise|boolean,\n' +
      '  index number,\n' +
      '  promisesInFlight Set<Promise>,\n' +
      '  maxConcurrency number=20,\n' +
      ') -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncIteratorSome',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'asyncIteratorSome(\n' +
              '  iterator Iterator|AsyncIterator,\n' +
              '  predicate any=>Promise|boolean,\n' +
              '  index number,\n' +
              '  promisesInFlight Set<Promise>,\n' +
              '  maxConcurrency number=20,\n' +
              ') -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 210 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 210 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/asyncIteratorSome.js'
  },
  {
    name: 'asyncIteratorToArray',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  asyncIterator AsyncIterator<T>\n' +
      '\n' +
      'asyncIteratorToArray(asyncIterator) -> Array<T>\n' +
      '```',
    description: 'Convert an async iterator to an array.\n\nNote: async iterator is consumed',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncIteratorToArray',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  asyncIterator AsyncIterator<T>\n' +
              '\n' +
              'asyncIteratorToArray(asyncIterator) -> Array<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 125 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 125 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Convert an async iterator to an array.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 39, offset: 38 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 39, offset: 38 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: async iterator is consumed',
                position: {
                  start: { line: 3, column: 1, offset: 40 },
                  end: { line: 3, column: 33, offset: 72 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 40 },
              end: { line: 3, column: 33, offset: 72 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 33, offset: 72 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/asyncIteratorToArray.js'
  },
  {
    name: '_binaryExtend',
    synopsis: '```coffeescript [specscript]\n' +
      '_binaryExtend(\n' +
      '  typedArray TypedArray,\n' +
      '  array Array|TypedArray,\n' +
      ') -> concatenatedTypedArray\n' +
      '```',
    description: 'Extend a typed array with an array of values.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_binaryExtend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_binaryExtend(\n' +
              '  typedArray TypedArray,\n' +
              '  array Array|TypedArray,\n' +
              ') -> concatenatedTypedArray',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 126 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 126 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Extend a typed array with an array of values.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 46, offset: 45 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 46, offset: 45 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 46, offset: 45 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/binaryExtend.js'
  },
  {
    name: 'binaryExtend',
    synopsis: '```coffeescript [specscript]\n' +
      'binaryExtend(\n' +
      '  typedArray TypedArray,\n' +
      '  array Array|TypedArray|any,\n' +
      ') -> concatenatedTypedArray\n' +
      '```',
    description: 'Types branching for _binaryExtend',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'binaryExtend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'binaryExtend(\n' +
              '  typedArray TypedArray,\n' +
              '  array Array|TypedArray|any,\n' +
              ') -> concatenatedTypedArray',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 129 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 129 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Types branching for _binaryExtend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 34, offset: 33 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 34, offset: 33 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 34, offset: 33 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/binaryExtend.js'
  },
  {
    name: 'arrayJoinToBinary',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayJoinToBinary<\n' +
      '  array Array<TypedArray|Buffer>,\n' +
      '  init TypedArray|Buffer,\n' +
      '>(array, init) -> TypedArray|Buffer\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayJoinToBinary',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayJoinToBinary<\n' +
              '  array Array<TypedArray|Buffer>,\n' +
              '  init TypedArray|Buffer,\n' +
              '>(array, init) -> TypedArray|Buffer',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 147 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 147 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/binaryFlatMap.js'
  },
  {
    name: 'arrayFlattenToBinary',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'arrayFlattenToBinary<T>(\n' +
      '  array Array<Monad<T>|Foldable<T>|T>\n' +
      '  result TypedArray<T>|Buffer<T>,\n' +
      ') -> TypedArray<T>|Buffer<T>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayFlattenToBinary',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'arrayFlattenToBinary<T>(\n' +
              '  array Array<Monad<T>|Foldable<T>|T>\n' +
              '  result TypedArray<T>|Buffer<T>,\n' +
              ') -> TypedArray<T>|Buffer<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 13, column: 4, offset: 457 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 457 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/binaryFlatMap.js'
  },
  {
    name: 'binaryFlatMap',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'binaryFlatMap<T>(\n' +
      '  binary TypedArray<T>|Buffer<T>,\n' +
      '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
      ') -> TypedArray<T>|Buffer<T>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'binaryFlatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'binaryFlatMap<T>(\n' +
              '  binary TypedArray<T>|Buffer<T>,\n' +
              '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
              ') -> TypedArray<T>|Buffer<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 13, column: 4, offset: 460 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 460 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/binaryFlatMap.js'
  },
  {
    name: 'bufferAlloc',
    synopsis: 'Dereferenced `Buffer.alloc` or noop',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'bufferAlloc',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Dereferenced ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              },
              {
                type: 'inlineCode',
                value: 'Buffer.alloc',
                position: {
                  start: { line: 1, column: 14, offset: 13 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              },
              {
                type: 'text',
                value: ' or noop',
                position: {
                  start: { line: 1, column: 28, offset: 27 },
                  end: { line: 1, column: 36, offset: 35 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 36, offset: 35 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 36, offset: 35 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/bufferAlloc.js'
  },
  {
    name: 'callConcat',
    synopsis: 'callConcat(object Object, values any) -> object.concat(values)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'callConcat',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'callConcat(object Object, values any) -> object.concat(values)',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 63, offset: 62 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 63, offset: 62 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 63, offset: 62 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/callConcat.js'
  },
  {
    name: 'callPropBinary',
    synopsis: '```coffeescript [specscript]\n' +
      'callPropBinary(\n' +
      '  value object,\n' +
      '  property string,\n' +
      '  arg0 any,\n' +
      '  arg1 any,\n' +
      ') -> value[property](arg0, arg1)\n' +
      '```',
    description: 'Call a property function on a value with two arguments.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'callPropBinary',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'callPropBinary(\n' +
              '  value object,\n' +
              '  property string,\n' +
              '  arg0 any,\n' +
              '  arg1 any,\n' +
              ') -> value[property](arg0, arg1)',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 140 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 140 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Call a property function on a value with two arguments.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 56, offset: 55 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 56, offset: 55 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 56, offset: 55 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/callPropBinary.js'
  },
  {
    name: 'callPropUnary',
    synopsis: '```coffeescript [specscript]\n' +
      'callPropUnary(\n' +
      '  value object,\n' +
      '  property string,\n' +
      '  arg0 any,\n' +
      ') -> value[property](arg0)\n' +
      '```',
    description: 'Call a property function on a value with a single argument.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'callPropUnary',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'callPropUnary(\n' +
              '  value object,\n' +
              '  property string,\n' +
              '  arg0 any,\n' +
              ') -> value[property](arg0)',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 121 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 121 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Call a property function on a value with a single argument.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 60, offset: 59 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 60, offset: 59 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 60, offset: 59 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/callPropUnary.js'
  },
  {
    name: 'catcherApply',
    synopsis: '```coffeescript [specscript]\n' +
      'catcherApply<\n' +
      '  args ...any,\n' +
      '  err Error|any,\n' +
      '  catcher (err, ...args)=>any,\n' +
      '>(catcher, err, args) -> catcher(err, ...args)\n' +
      '```',
    description: 'Apply an error and arguments to a catcher.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'catcherApply',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'catcherApply<\n' +
              '  args ...any,\n' +
              '  err Error|any,\n' +
              '  catcher (err, ...args)=>any,\n' +
              '>(catcher, err, args) -> catcher(err, ...args)',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 156 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 156 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply an error and arguments to a catcher.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 43, offset: 42 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 43, offset: 42 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 43, offset: 42 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/catcherApply.js'
  },
  {
    name: 'conditional',
    synopsis: 'conditional<\n' +
      '  shouldReturnArg1 boolean,\n' +
      '  arg1 any,\n' +
      '  arg2 any,\n' +
      '>(shouldReturnArg1, arg1, arg2) -> arg1|arg2',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'conditional',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'conditional<\nshouldReturnArg1 boolean,\narg1 any,\narg2 any,',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 4, column: 12, offset: 64 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 12, offset: 64 }
            }
          },
          {
            type: 'blockquote',
            children: [
              {
                type: 'paragraph',
                children: [
                  {
                    type: 'text',
                    value: '(shouldReturnArg1, arg1, arg2) -> arg1|arg2',
                    position: {
                      start: { line: 5, column: 2, offset: 66 },
                      end: { line: 5, column: 45, offset: 109 }
                    }
                  }
                ],
                position: {
                  start: { line: 5, column: 2, offset: 66 },
                  end: { line: 5, column: 45, offset: 109 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 65 },
              end: { line: 5, column: 45, offset: 109 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 45, offset: 109 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/conditional.js'
  },
  {
    name: 'copyDeep',
    synopsis: '```coffeescript [specscript]\n' +
      'copyDeep(value Array|Object) -> deepCopy Array|Object\n' +
      '```',
    catchphrase: 'Deep copy objects or arrays.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'copyDeep',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'copyDeep(value Array|Object) -> deepCopy Array|Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 86 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 86 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Deep copy objects or arrays.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/copyDeep.js'
  },
  {
    name: 'curry1',
    synopsis: '```coffeescript [specscript]\n' +
      '__ = Symbol(placeholder)\n' +
      '\n' +
      'var func function,\n' +
      '  arg0 __|any,\n' +
      '  _arg0 __|any\n' +
      '\n' +
      'curry1(func, arg0) -> curried _arg0=>function|any\n' +
      '```',
    description: 'Curry a unary function.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'curry1',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '__ = Symbol(placeholder)\n' +
              '\n' +
              'var func function,\n' +
              '  arg0 __|any,\n' +
              '  _arg0 __|any\n' +
              '\n' +
              'curry1(func, arg0) -> curried _arg0=>function|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 158 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 158 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Curry a unary function.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 24, offset: 23 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/curry1.js'
  },
  {
    name: 'curry2',
    synopsis: '```coffeescript [specscript]\n' +
      "__ = Symbol('placeholder')\n" +
      '\n' +
      'curry2(\n' +
      '  baseFunc function,\n' +
      '  arg0 __|any,\n' +
      '  arg1 __|any,\n' +
      ') -> function\n' +
      '```',
    description: 'Curry a binary function.\n' +
      '\n' +
      'Note: exactly one argument must be the placeholder',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'curry2',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: "__ = Symbol('placeholder')\n" +
              '\n' +
              'curry2(\n' +
              '  baseFunc function,\n' +
              '  arg0 __|any,\n' +
              '  arg1 __|any,\n' +
              ') -> function',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 133 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 133 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Curry a binary function.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: exactly one argument must be the placeholder',
                position: {
                  start: { line: 3, column: 1, offset: 26 },
                  end: { line: 3, column: 51, offset: 76 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 26 },
              end: { line: 3, column: 51, offset: 76 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 51, offset: 76 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/curry2.js'
  },
  {
    name: 'curry3',
    synopsis: '```coffeescript [specscript]\n' +
      "__ = Symbol('placeholder')\n" +
      '\n' +
      'curry3(\n' +
      '  baseFunc function,\n' +
      '  arg0 __|any,\n' +
      '  arg1 __|any,\n' +
      '  arg2 __|any\n' +
      ') -> function\n' +
      '```',
    description: 'Curry a 3-ary function.\n' +
      '\n' +
      'Note: exactly one argument must be the placeholder',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'curry3',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: "__ = Symbol('placeholder')\n" +
              '\n' +
              'curry3(\n' +
              '  baseFunc function,\n' +
              '  arg0 __|any,\n' +
              '  arg1 __|any,\n' +
              '  arg2 __|any\n' +
              ') -> function',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 147 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 147 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Curry a 3-ary function.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: exactly one argument must be the placeholder',
                position: {
                  start: { line: 3, column: 1, offset: 25 },
                  end: { line: 3, column: 51, offset: 75 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 25 },
              end: { line: 3, column: 51, offset: 75 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 51, offset: 75 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/curry3.js'
  },
  {
    name: 'curry4',
    synopsis: '```coffeescript [specscript]\n' +
      "__ = Symbol('placeholder')\n" +
      '\n' +
      'curry4(\n' +
      '  baseFunc function,\n' +
      '  arg0 __|any,\n' +
      '  arg1 __|any,\n' +
      '  arg2 __|any,\n' +
      '  arg3 __|any,\n' +
      ') -> function\n' +
      '```',
    description: 'Curry a 4-ary function.\n' +
      '\n' +
      'Note: exactly one argument must be the placeholder',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'curry4',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: "__ = Symbol('placeholder')\n" +
              '\n' +
              'curry4(\n' +
              '  baseFunc function,\n' +
              '  arg0 __|any,\n' +
              '  arg1 __|any,\n' +
              '  arg2 __|any,\n' +
              '  arg3 __|any,\n' +
              ') -> function',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 11, column: 4, offset: 163 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 4, offset: 163 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Curry a 4-ary function.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: exactly one argument must be the placeholder',
                position: {
                  start: { line: 3, column: 1, offset: 25 },
                  end: { line: 3, column: 51, offset: 75 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 25 },
              end: { line: 3, column: 51, offset: 75 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 51, offset: 75 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/curry4.js'
  },
  {
    name: 'curry5',
    synopsis: '```coffeescript [specscript]\n' +
      "__ = Symbol('placeholder')\n" +
      '\n' +
      'curry5(\n' +
      '  baseFunc function,\n' +
      '  arg0 __|any,\n' +
      '  arg1 __|any,\n' +
      '  arg2 __|any,\n' +
      '  arg3 __|any,\n' +
      '  arg4 __|any,\n' +
      ') -> function\n' +
      '```',
    description: 'Curry a 5-ary function.\n' +
      '\n' +
      'Note: exactly one argument must be the placeholder',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'curry5',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: "__ = Symbol('placeholder')\n" +
              '\n' +
              'curry5(\n' +
              '  baseFunc function,\n' +
              '  arg0 __|any,\n' +
              '  arg1 __|any,\n' +
              '  arg2 __|any,\n' +
              '  arg3 __|any,\n' +
              '  arg4 __|any,\n' +
              ') -> function',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 12, column: 4, offset: 178 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 178 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Curry a 5-ary function.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: exactly one argument must be the placeholder',
                position: {
                  start: { line: 3, column: 1, offset: 25 },
                  end: { line: 3, column: 51, offset: 75 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 25 },
              end: { line: 3, column: 51, offset: 75 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 51, offset: 75 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/curry5.js'
  },
  {
    name: 'curryArgs2',
    synopsis: '```coffeescript [specscript]\n' +
      "type __ = Symbol('placeholder')\n" +
      '\n' +
      'curryArgs2(\n' +
      '  baseFunc function,\n' +
      '  arg0 __|any,\n' +
      '  arg1 __|any,\n' +
      ') -> function\n' +
      '```',
    description: 'Curry arguments for a 2-ary function. Arguments are supplied in placeholder position as an array.\n' +
      '\n' +
      'Note: at least one argument must be the placeholder',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'curryArgs2',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: "type __ = Symbol('placeholder')\n" +
              '\n' +
              'curryArgs2(\n' +
              '  baseFunc function,\n' +
              '  arg0 __|any,\n' +
              '  arg1 __|any,\n' +
              ') -> function',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 142 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 142 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Curry arguments for a 2-ary function. Arguments are supplied in placeholder position as an array.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 98, offset: 97 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 98, offset: 97 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: at least one argument must be the placeholder',
                position: {
                  start: { line: 3, column: 1, offset: 99 },
                  end: { line: 3, column: 52, offset: 150 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 99 },
              end: { line: 3, column: 52, offset: 150 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 52, offset: 150 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/curryArgs2.js'
  },
  {
    name: 'curryArgs3',
    synopsis: '```coffeescript [specscript]\n' +
      "__ = Symbol('placeholder')\n" +
      '\n' +
      'curryArgs3(\n' +
      '  baseFunc function,\n' +
      '  arg0 __|any,\n' +
      '  arg1 __|any,\n' +
      '  arg2 __|any\n' +
      ') -> function\n' +
      '```',
    description: 'Curry arguments for a 3-ary function. Arguments are supplied in placeholder position as an array.\n' +
      '\n' +
      'Note: at least one argument must be the placeholder',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'curryArgs3',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: "__ = Symbol('placeholder')\n" +
              '\n' +
              'curryArgs3(\n' +
              '  baseFunc function,\n' +
              '  arg0 __|any,\n' +
              '  arg1 __|any,\n' +
              '  arg2 __|any\n' +
              ') -> function',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 151 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 151 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Curry arguments for a 3-ary function. Arguments are supplied in placeholder position as an array.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 98, offset: 97 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 98, offset: 97 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: at least one argument must be the placeholder',
                position: {
                  start: { line: 3, column: 1, offset: 99 },
                  end: { line: 3, column: 52, offset: 150 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 99 },
              end: { line: 3, column: 52, offset: 150 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 52, offset: 150 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/curryArgs3.js'
  },
  {
    name: 'curryArgs4',
    synopsis: '```coffeescript [specscript]\n' +
      "__ = Symbol('placeholder')\n" +
      '\n' +
      'curryArgs4(\n' +
      '  baseFunc function,\n' +
      '  arg0 __|any,\n' +
      '  arg1 __|any,\n' +
      '  arg2 __|any\n' +
      '  arg3 __|any,\n' +
      ') -> function\n' +
      '```',
    description: 'Curry arguments for a 4-ary function. Arguments are supplied in placeholder position as an array.\n' +
      '\n' +
      'Note: at least one argument must be the placeholder',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'curryArgs4',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: "__ = Symbol('placeholder')\n" +
              '\n' +
              'curryArgs4(\n' +
              '  baseFunc function,\n' +
              '  arg0 __|any,\n' +
              '  arg1 __|any,\n' +
              '  arg2 __|any\n' +
              '  arg3 __|any,\n' +
              ') -> function',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 11, column: 4, offset: 166 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 4, offset: 166 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Curry arguments for a 4-ary function. Arguments are supplied in placeholder position as an array.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 98, offset: 97 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 98, offset: 97 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: at least one argument must be the placeholder',
                position: {
                  start: { line: 3, column: 1, offset: 99 },
                  end: { line: 3, column: 52, offset: 150 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 99 },
              end: { line: 3, column: 52, offset: 150 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 52, offset: 150 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/curryArgs4.js'
  },
  {
    name: '_curryArity',
    synopsis: '```coffeescript [specscript]\n' +
      '__ = Symbol(placeholder)\n' +
      '\n' +
      'var arity number,\n' +
      '  func function,\n' +
      '  args Array<__|any>,\n' +
      '  curried function\n' +
      '\n' +
      '_curryArity(arity, func, args) -> curried|any\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_curryArity',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '__ = Symbol(placeholder)\n' +
              '\n' +
              'var arity number,\n' +
              '  func function,\n' +
              '  args Array<__|any>,\n' +
              '  curried function\n' +
              '\n' +
              '_curryArity(arity, func, args) -> curried|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 181 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 181 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/curryArity.js'
  },
  {
    name: 'curryArity',
    synopsis: '```coffeescript [specscript]\n' +
      '__ = Symbol(placeholder)\n' +
      '\n' +
      'var arity number,\n' +
      '  func function,\n' +
      '  args Array<__|any>,\n' +
      '  curried function\n' +
      '\n' +
      'curryArity(arity, func, args) -> curried|any\n' +
      '```',
    description: 'Create a curried version of a function with specified arity.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'curryArity',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '__ = Symbol(placeholder)\n' +
              '\n' +
              'var arity number,\n' +
              '  func function,\n' +
              '  args Array<__|any>,\n' +
              '  curried function\n' +
              '\n' +
              'curryArity(arity, func, args) -> curried|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 180 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 180 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a curried version of a function with specified arity.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 61, offset: 60 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 61, offset: 60 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 61, offset: 60 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/curryArity.js'
  },
  {
    name: 'deleteByPath',
    synopsis: '```coffeescript [specscript]\n' +
      'deleteByPath<\n' +
      '  object any,\n' +
      '  path string|number|Array<string|number>,\n' +
      '>(value, path) -> ()\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'deleteByPath',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'deleteByPath<\n' +
              '  object any,\n' +
              '  path string|number|Array<string|number>,\n' +
              '>(value, path) -> ()',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 124 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 124 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/deleteByPath.js'
  },
  {
    name: 'equals',
    synopsis: '```coffeescript [specscript]\nequals(left any, right any) -> boolean\n```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'equals',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'equals(left any, right any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 71 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 71 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/equals.js'
  },
  {
    name: 'funcAll',
    synopsis: '```coffeescript [specscript]\n' +
      'funcAll<args ...any>(\n' +
      '  funcs Array<args=>Promise|any>\n' +
      ') -> allFuncs args=>Promise|Array\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'funcAll',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'funcAll<args ...any>(\n' +
              '  funcs Array<args=>Promise|any>\n' +
              ') -> allFuncs args=>Promise|Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 121 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 121 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/funcAll.js'
  },
  {
    name: 'asyncFuncAllSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'asyncFuncAllSeries(\n' +
      '  funcs Array<function>,\n' +
      '  args Array,\n' +
      '  result Array,\n' +
      '  funcsIndex number,\n' +
      ') -> result\n' +
      '```',
    TODO: 'benchmark vs regular promise handling',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncFuncAllSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'asyncFuncAllSeries(\n' +
              '  funcs Array<function>,\n' +
              '  args Array,\n' +
              '  result Array,\n' +
              '  funcsIndex number,\n' +
              ') -> result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 140 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 140 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'benchmark vs regular promise handling',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 38, offset: 37 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 38, offset: 37 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 38, offset: 37 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/funcAllSeries.js'
  },
  {
    name: 'funcAllSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'funcAllSeries<args ...any>(\n' +
      '  funcs Array<...args=>any>,\n' +
      ') -> allFuncsSeries ...args=>Promise|Array\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'funcAllSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'funcAllSeries<args ...any>(\n' +
              '  funcs Array<...args=>any>,\n' +
              ') -> allFuncsSeries ...args=>Promise|Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 132 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 132 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/funcAllSeries.js'
  },
  {
    name: 'funcApply',
    synopsis: '```coffeescript [specscript]\n' +
      'funcApply<\n' +
      '  args ...any,\n' +
      '  func ...args=>any,\n' +
      '>(func, args) -> func(...args)\n' +
      '```',
    description: 'Apply arguments to a function.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'funcApply',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'funcApply<\n' +
              '  args ...any,\n' +
              '  func ...args=>any,\n' +
              '>(func, args) -> func(...args)',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 110 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 110 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply arguments to a function.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 31, offset: 30 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 31, offset: 30 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 31, offset: 30 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/funcApply.js'
  },
  {
    name: 'funcCall',
    synopsis: '```coffeescript [specscript]\n' +
      'funcCall(func function, context Object, ...args) -> any\n' +
      '```',
    description: 'Apply arguments to a function.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'funcCall',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'funcCall(func function, context Object, ...args) -> any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 88 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 88 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply arguments to a function.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 31, offset: 30 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 31, offset: 30 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 31, offset: 30 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/funcCall.js'
  },
  {
    name: 'funcConcat',
    synopsis: '```coffeescript [specscript]\n' +
      'funcConcat<\n' +
      '  args ...any,\n' +
      '  intermediate any,\n' +
      '  result any,\n' +
      '>(\n' +
      '  funcA ...args=>Promise|intermediate,\n' +
      '  funcB intermediate=>result\n' +
      ') -> pipedFunction ...args=>Promise|result\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'funcConcat',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'funcConcat<\n' +
              '  args ...any,\n' +
              '  intermediate any,\n' +
              '  result any,\n' +
              '>(\n' +
              '  funcA ...args=>Promise|intermediate,\n' +
              '  funcB intermediate=>result\n' +
              ') -> pipedFunction ...args=>Promise|result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 207 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 207 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/funcConcat.js'
  },
  {
    name: 'funcConcatSync',
    synopsis: '```coffeescript [specscript]\n' +
      'funcConcatSync<\n' +
      '  args ...any,\n' +
      '  intermediate any,\n' +
      '  result any,\n' +
      '>(\n' +
      '  funcA ...args=>intermediate,\n' +
      '  funcB intermediate=>result\n' +
      ') -> pipedFunction ...args=>result\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'funcConcatSync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'funcConcatSync<\n' +
              '  args ...any,\n' +
              '  intermediate any,\n' +
              '  result any,\n' +
              '>(\n' +
              '  funcA ...args=>intermediate,\n' +
              '  funcB intermediate=>result\n' +
              ') -> pipedFunction ...args=>result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 195 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 195 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/funcConcatSync.js'
  },
  {
    name: 'funcObjectAll',
    synopsis: '```coffeescript [specscript]\n' +
      'funcObjectAll(\n' +
      '  funcs Object<args=>Promise|any>\n' +
      ')(args ...any) -> objectAllFuncs ...args=>Promise|Object\n' +
      '```',
    description: 'Concurrently execute the same arguments for each function of an object of functions, returning an object of results.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'funcObjectAll',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'funcObjectAll(\n' +
              '  funcs Object<args=>Promise|any>\n' +
              ')(args ...any) -> objectAllFuncs ...args=>Promise|Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 138 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 138 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Concurrently execute the same arguments for each function of an object of functions, returning an object of results.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 117, offset: 116 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 117, offset: 116 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 117, offset: 116 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/funcObjectAll.js'
  },
  {
    name: 'functionArrayAll',
    synopsis: '```coffeescript [specscript]\n' +
      'functionArrayAll(funcs Array<function>, args Array) -> Promise|Array\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'functionArrayAll',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'functionArrayAll(funcs Array<function>, args Array) -> Promise|Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 101 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 101 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/functionArrayAll.js'
  },
  {
    name: 'asyncFunctionArrayAllSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'asyncFunctionArrayAllSeries(\n' +
      '  funcs Array<function>,\n' +
      '  args Array,\n' +
      '  result Array,\n' +
      '  funcsIndex number\n' +
      ') -> Promise|Array\n' +
      '```',
    TODO: 'benchmark vs regular promise handling',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncFunctionArrayAllSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 28, offset: 27 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 28, offset: 27 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'asyncFunctionArrayAllSeries(\n' +
              '  funcs Array<function>,\n' +
              '  args Array,\n' +
              '  result Array,\n' +
              '  funcsIndex number\n' +
              ') -> Promise|Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 155 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 155 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'benchmark vs regular promise handling',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 38, offset: 37 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 38, offset: 37 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 38, offset: 37 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/functionArrayAllSeries.js'
  },
  {
    name: 'functionArrayAllSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'functionArrayAllSeries(funcs Array<function>, args Array) -> Promise|Array\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'functionArrayAllSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 23, offset: 22 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 23, offset: 22 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 23, offset: 22 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'functionArrayAllSeries(funcs Array<function>, args Array) -> Promise|Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 107 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 107 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/functionArrayAllSeries.js'
  },
  {
    name: 'functionObjectAll',
    synopsis: '```coffeescript [specscript]\n' +
      'functionObjectAll(funcs Array<function>, args Array) -> Promise|Object\n' +
      '```',
    description: 'Concurrently execute the same arguments for each function of an object of functions, returning an object of results.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'functionObjectAll',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'functionObjectAll(funcs Array<function>, args Array) -> Promise|Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 103 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 103 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Concurrently execute the same arguments for each function of an object of functions, returning an object of results.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 117, offset: 116 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 117, offset: 116 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 117, offset: 116 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/functionObjectAll.js'
  },
  {
    name: 'generatorFunctionFilter',
    synopsis: '```coffeescript [specscript]\n' +
      'generatorFunctionFilter<\n' +
      '  T any,\n' +
      '  args ...any,\n' +
      '  generatorFunction ...args=>Generator<T>,\n' +
      '  predicate T=>boolean,\n' +
      '>(generatorFunction, predicate)\n' +
      '  -> filteringGeneratorFunction ...args=>Generator\n' +
      '```',
    description: 'Filter a generator function by predicate.\n' +
      '\n' +
      'Note: async predicates may beget unexpected results',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'generatorFunctionFilter',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 24, offset: 23 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'generatorFunctionFilter<\n' +
              '  T any,\n' +
              '  args ...any,\n' +
              '  generatorFunction ...args=>Generator<T>,\n' +
              '  predicate T=>boolean,\n' +
              '>(generatorFunction, predicate)\n' +
              '  -> filteringGeneratorFunction ...args=>Generator',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 231 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 231 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Filter a generator function by predicate.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 42, offset: 41 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 42, offset: 41 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: async predicates may beget unexpected results',
                position: {
                  start: { line: 3, column: 1, offset: 43 },
                  end: { line: 3, column: 52, offset: 94 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 43 },
              end: { line: 3, column: 52, offset: 94 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 52, offset: 94 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/generatorFunctionFilter.js'
  },
  {
    name: 'generatorFunctionFlatMap',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'generatorFunctionFlatMap<\n' +
      '  T any,\n' +
      '  args ...any,\n' +
      '  generatorFunction ...args=>Generator<Promise|T>,\n' +
      '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
      '>(generatorFunction, flatMapper) ->\n' +
      '  flatMappingGeneratorFunction ...args=>Generator<Promise|T>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'generatorFunctionFlatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'generatorFunctionFlatMap<\n' +
              '  T any,\n' +
              '  args ...any,\n' +
              '  generatorFunction ...args=>Generator<Promise|T>,\n' +
              '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
              '>(generatorFunction, flatMapper) ->\n' +
              '  flatMappingGeneratorFunction ...args=>Generator<Promise|T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 16, column: 4, offset: 577 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 16, column: 4, offset: 577 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/generatorFunctionFlatMap.js'
  },
  {
    name: 'generatorFunctionForEach',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  generatorFunction ...args=>Generator<T>,\n' +
      '  callback T=>()\n' +
      '\n' +
      'generatorFunctionForEach(generatorFunction, callback) -> ...args=>Promise|Generator<>\n' +
      '```',
    description: 'Create a generator executor that executes a callback for each element of a generator generated by a generator function. The executor may return a promise if any execution is asynchronous.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'generatorFunctionForEach',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  generatorFunction ...args=>Generator<T>,\n' +
              '  callback T=>()\n' +
              '\n' +
              'generatorFunctionForEach(generatorFunction, callback) -> ...args=>Promise|Generator<>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 190 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 190 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a generator executor that executes a callback for each element of a generator generated by a generator function. The executor may return a promise if any execution is asynchronous.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 188, offset: 187 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 188, offset: 187 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 188, offset: 187 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/generatorFunctionForEach.js'
  },
  {
    name: 'generatorFunctionMap',
    synopsis: '```coffeescript [specscript]\n' +
      'generatorFunctionMap<\n' +
      '  T any,\n' +
      '  args ...any,\n' +
      '  generatorFunc ...args=>Generator<T>,\n' +
      '  mapper T=>any,\n' +
      '>(generatorFunc, mapper) -> mappingGeneratorFunc ...args=>Generator\n' +
      '```',
    description: 'Create a mapping generator function from a generator function and a mapper. A mapping generator function produces mapping generators that apply the mapper to each element of the original generator.',
    TODO: 'playground example',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'generatorFunctionMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'generatorFunctionMap<\n' +
              '  T any,\n' +
              '  args ...any,\n' +
              '  generatorFunc ...args=>Generator<T>,\n' +
              '  mapper T=>any,\n' +
              '>(generatorFunc, mapper) -> mappingGeneratorFunc ...args=>Generator',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 202 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 202 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a mapping generator function from a generator function and a mapper. A mapping generator function produces mapping generators that apply the mapper to each element of the original generator.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 198, offset: 197 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 198, offset: 197 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 198, offset: 197 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'playground example',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/generatorFunctionMap.js'
  },
  {
    name: 'generatorFunctionReduce',
    synopsis: '```coffeescript [specscript]\n' +
      'generatorFunctionReduce<\n' +
      '  T any,\n' +
      '  args ...any,\n' +
      '  generatorFunction ...args=>Generator<Promise|T>,\n' +
      '  reducer (any, T)=>Promise|any,\n' +
      '  result any,\n' +
      '>(generatorFunction, reducer, result)\n' +
      '  -> reducingFunction ...args=>Promise|result\n' +
      '```',
    description: 'Execute a reducer for each element of a generator function, returning a single value.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'generatorFunctionReduce',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 24, offset: 23 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'generatorFunctionReduce<\n' +
              '  T any,\n' +
              '  args ...any,\n' +
              '  generatorFunction ...args=>Generator<Promise|T>,\n' +
              '  reducer (any, T)=>Promise|any,\n' +
              '  result any,\n' +
              '>(generatorFunction, reducer, result)\n' +
              '  -> reducingFunction ...args=>Promise|result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 263 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 263 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Execute a reducer for each element of a generator function, returning a single value.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 86, offset: 85 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 86, offset: 85 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 86, offset: 85 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/generatorFunctionReduce.js'
  },
  {
    name: 'genericReduce',
    synopsis: '```coffeescript [specscript]\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>\n' +
      '  |{ reduce: (any, T)=>any }|Object<T>\n' +
      '\n' +
      'genericReduce<T>(\n' +
      '  collection Foldable<T>,\n' +
      '  reducer (any, T)=>any,\n' +
      '  result any?,\n' +
      ') -> result\n' +
      '```',
    related: 'genericReduceConcurrent',
    TODO: [
      'genericReduceSync(collection, reducer, init) - performance optimization for some of these genericReduces that we know are synchronous',
      'genericReducePool(poolSize, collection, reducer, init) - for some of these genericReduces that we want to race - result should not care about order of concatenations\n' +
        'reduce.pool\n' +
        'transform.pool\n' +
        'flatMap.pool'
    ],
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'genericReduce',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Foldable<T> = Iterable<T>|AsyncIterable<T>\n' +
              '  |{ reduce: (any, T)=>any }|Object<T>\n' +
              '\n' +
              'genericReduce<T>(\n' +
              '  collection Foldable<T>,\n' +
              '  reducer (any, T)=>any,\n' +
              '  result any?,\n' +
              ') -> result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 211 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 211 }
        }
      },
      related: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'genericReduceConcurrent',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 24, offset: 23 }
        }
      },
      TODO: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/genericReduce.js'
  },
  {
    name: 'identityTransform',
    synopsis: '```coffeescript [specscript]\n' +
      'Reducer = (any, any)=>Promise|any\n' +
      '\n' +
      'identityTransform<\n' +
      '  collection any,\n' +
      '  transducer Reducer=>Reducer,\n' +
      '  accum undefined|null,\n' +
      '>(args, transducer, accum) -> Promise|accum\n' +
      '```',
    description: 'Reduce a value, always returning the initial accum',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'identityTransform',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Reducer = (any, any)=>Promise|any\n' +
              '\n' +
              'identityTransform<\n' +
              '  collection any,\n' +
              '  transducer Reducer=>Reducer,\n' +
              '  accum undefined|null,\n' +
              '>(args, transducer, accum) -> Promise|accum',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 203 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 203 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Reduce a value, always returning the initial accum',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 51, offset: 50 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 51, offset: 50 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 51, offset: 50 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/genericTransform.js'
  },
  {
    name: 'genericTransform',
    synopsis: '```coffeescript [specscript]\n' +
      'Reducer = (any, any)=>Promise|any\n' +
      'Semigroup = Array|string|Set|TypedArray\n' +
      '  |{ concat: function }|{ write: function }|Object\n' +
      '\n' +
      'genericTransform<\n' +
      '  collection any,\n' +
      '  transducer Reducer=>Reducer,\n' +
      '  accum Semigroup|any,\n' +
      '>(collection, transducer, accum) -> accum\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'genericTransform',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Reducer = (any, any)=>Promise|any\n' +
              'Semigroup = Array|string|Set|TypedArray\n' +
              '  |{ concat: function }|{ write: function }|Object\n' +
              '\n' +
              'genericTransform<\n' +
              '  collection any,\n' +
              '  transducer Reducer=>Reducer,\n' +
              '  accum Semigroup|any,\n' +
              '>(collection, transducer, accum) -> accum',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 11, column: 4, offset: 290 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 4, offset: 290 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/genericTransform.js'
  },
  {
    name: 'getArg1',
    synopsis: 'getArg1(arg0 any, arg1 any) -> arg1',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'getArg1',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'getArg1(arg0 any, arg1 any) -> arg1',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 36, offset: 35 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 36, offset: 35 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 36, offset: 35 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/getArg1.js'
  },
  {
    name: 'getByPath',
    synopsis: '```coffeescript [specscript]\n' +
      'getByPath<\n' +
      '  value any,\n' +
      '  path string|number|Array<string|number>,\n' +
      '>(value, path) -> valueAtPath any\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'getByPath',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'getByPath<\n' +
              '  value any,\n' +
              '  path string|number|Array<string|number>,\n' +
              '>(value, path) -> valueAtPath any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 133 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 133 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/getByPath.js'
  },
  {
    name: 'globalThisHasBuffer',
    synopsis: 'globalThisHasBuffer boolean',
    description: 'Is there a global `Buffer`',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'globalThisHasBuffer',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'globalThisHasBuffer boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 28, offset: 27 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 28, offset: 27 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Is there a global ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              },
              {
                type: 'inlineCode',
                value: 'Buffer',
                position: {
                  start: { line: 1, column: 19, offset: 18 },
                  end: { line: 1, column: 27, offset: 26 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 27, offset: 26 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 27, offset: 26 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/globalThisHasBuffer.js'
  },
  {
    name: 'greaterThan',
    synopsis: '```coffeescript [specscript]\n' +
      'greaterThan(left any, right any) -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'greaterThan',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'greaterThan(left any, right any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 76 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 76 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/greaterThan.js'
  },
  {
    name: 'greaterThanOrEqual',
    synopsis: '```coffeescript [specscript]\n' +
      'greaterThanOrEqual(left any, right any) -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'greaterThanOrEqual',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'greaterThanOrEqual(left any, right any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 83 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 83 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/greaterThanOrEqual.js'
  },
  {
    name: 'hasOwn',
    synopsis: 'hasOwn(object any, key string) -> boolean',
    description: 'Determine whether a value is an array.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'hasOwn',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'hasOwn(object any, key string) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 42, offset: 41 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 42, offset: 41 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 42, offset: 41 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Determine whether a value is an array.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 39, offset: 38 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 39, offset: 38 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 39, offset: 38 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/hasOwn.js'
  },
  {
    name: 'identity',
    synopsis: 'identity(value any) -> value',
    description: 'Returns the first argument',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'identity',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'identity(value any) -> value',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Returns the first argument',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 27, offset: 26 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 27, offset: 26 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 27, offset: 26 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/identity.js'
  },
  {
    name: 'isArray',
    synopsis: 'isArray(value any) -> boolean',
    description: 'Determine whether a value is an array.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isArray',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isArray(value any) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 30, offset: 29 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 30, offset: 29 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Determine whether a value is an array.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 39, offset: 38 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 39, offset: 38 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 39, offset: 38 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/isArray.js'
  },
  {
    name: 'isArrayLike',
    synopsis: '```coffeescript [specscript]\nisArrayLike(value any) -> boolean\n```',
    description: 'Tell if a value has positive `length` like an Array.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isArrayLike',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'isArrayLike(value any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 66 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 66 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Tell if a value has positive ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              },
              {
                type: 'inlineCode',
                value: 'length',
                position: {
                  start: { line: 1, column: 30, offset: 29 },
                  end: { line: 1, column: 38, offset: 37 }
                }
              },
              {
                type: 'text',
                value: ' like an Array.',
                position: {
                  start: { line: 1, column: 38, offset: 37 },
                  end: { line: 1, column: 53, offset: 52 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 53, offset: 52 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 53, offset: 52 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/isArrayLike.js'
  },
  {
    name: 'isAsyncGeneratorFunction',
    synopsis: 'isAsyncGeneratorFunction(value any) -> boolean',
    description: 'Determine whether a value is an async generator function.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isAsyncGeneratorFunction',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isAsyncGeneratorFunction(value any) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 47, offset: 46 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 47, offset: 46 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 47, offset: 46 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Determine whether a value is an async generator function.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 58, offset: 57 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 58, offset: 57 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 58, offset: 57 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/isAsyncGeneratorFunction.js'
  },
  {
    name: 'isBinary',
    synopsis: 'isBinary(value any) -> boolean',
    description: 'Determine whether a value is binary. This could be `true` for `TypedArray` or a Node.js `Buffer`.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isBinary',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isBinary(value any) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 31, offset: 30 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 31, offset: 30 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 31, offset: 30 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Determine whether a value is binary. This could be ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 52, offset: 51 }
                }
              },
              {
                type: 'inlineCode',
                value: 'true',
                position: {
                  start: { line: 1, column: 52, offset: 51 },
                  end: { line: 1, column: 58, offset: 57 }
                }
              },
              {
                type: 'text',
                value: ' for ',
                position: {
                  start: { line: 1, column: 58, offset: 57 },
                  end: { line: 1, column: 63, offset: 62 }
                }
              },
              {
                type: 'inlineCode',
                value: 'TypedArray',
                position: {
                  start: { line: 1, column: 63, offset: 62 },
                  end: { line: 1, column: 75, offset: 74 }
                }
              },
              {
                type: 'text',
                value: ' or a Node.js ',
                position: {
                  start: { line: 1, column: 75, offset: 74 },
                  end: { line: 1, column: 89, offset: 88 }
                }
              },
              {
                type: 'inlineCode',
                value: 'Buffer',
                position: {
                  start: { line: 1, column: 89, offset: 88 },
                  end: { line: 1, column: 97, offset: 96 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 1, column: 97, offset: 96 },
                  end: { line: 1, column: 98, offset: 97 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 98, offset: 97 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 98, offset: 97 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/isBinary.js'
  },
  {
    name: 'isGeneratorFunction',
    synopsis: 'isGeneratorFunction(value any) -> boolean',
    description: 'Determine whether a value is a generator function.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isGeneratorFunction',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isGeneratorFunction(value any) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 42, offset: 41 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 42, offset: 41 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 42, offset: 41 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Determine whether a value is a generator function.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 51, offset: 50 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 51, offset: 50 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 51, offset: 50 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/isGeneratorFunction.js'
  },
  {
    name: 'isNodeReadStream',
    synopsis: 'isNodeReadStream(value any) -> boolean',
    description: 'Determine whether a value is a Node.js Readable Stream.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isNodeReadStream',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isNodeReadStream(value any) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 39, offset: 38 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 39, offset: 38 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 39, offset: 38 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Determine whether a value is a Node.js Readable Stream.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 56, offset: 55 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 56, offset: 55 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 56, offset: 55 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/isNodeReadStream.js'
  },
  {
    name: 'isObject',
    synopsis: 'isObject(value any) -> boolean',
    description: 'Determine whether a value is an object. Note that Arrays are also objects in JS.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isObject',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isObject(value any) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 31, offset: 30 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 31, offset: 30 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 31, offset: 30 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Determine whether a value is an object. Note that Arrays are also objects in JS.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 81, offset: 80 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 81, offset: 80 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 81, offset: 80 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/isObject.js'
  },
  {
    name: 'isPromise',
    synopsis: 'isPromise(value any) -> boolean',
    description: 'Determine whether a value is a promise.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isPromise',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isPromise(value any) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 32, offset: 31 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 32, offset: 31 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 32, offset: 31 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Determine whether a value is a promise.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 40, offset: 39 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 40, offset: 39 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 40, offset: 39 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/isPromise.js'
  },
  {
    name: 'iterationMap',
    synopsis: 'iterationMap<\n' +
      '  T any,\n' +
      '  iteration { value: T, done: boolean },\n' +
      '  mapper T=>any,\n' +
      '>(iteration, mapper) -> nextIteration { value: any, done: boolean }',
    description: 'Apply a mapper to an iteration. Noop if iteration is done.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'iterationMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'iterationMap<\n' +
                  'T any,\n' +
                  'iteration { value: T, done: boolean },\n' +
                  'mapper T=>any,',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 4, column: 17, offset: 80 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 17, offset: 80 }
            }
          },
          {
            type: 'blockquote',
            children: [
              {
                type: 'paragraph',
                children: [
                  {
                    type: 'text',
                    value: '(iteration, mapper) -> nextIteration { value: any, done: boolean }',
                    position: {
                      start: { line: 5, column: 2, offset: 82 },
                      end: { line: 5, column: 68, offset: 148 }
                    }
                  }
                ],
                position: {
                  start: { line: 5, column: 2, offset: 82 },
                  end: { line: 5, column: 68, offset: 148 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 81 },
              end: { line: 5, column: 68, offset: 148 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 68, offset: 148 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a mapper to an iteration. Noop if iteration is done.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 59, offset: 58 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 59, offset: 58 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 59, offset: 58 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/iterationMap.js'
  },
  {
    name: 'iteratorEvery',
    synopsis: '```coffeescript [specscript]\n' +
      'iteratorEvery(iterator Iterator, predicate ...any=>boolean) -> boolean\n' +
      '```',
    TODO: 'use .next() calls',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'iteratorEvery',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'iteratorEvery(iterator Iterator, predicate ...any=>boolean) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 103 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 103 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'use .next() calls',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/iteratorEvery.js'
  },
  {
    name: 'iteratorFindAsync',
    synopsis: 'var T any,\n' +
      '  iterator Iterator<T>,\n' +
      '  predicate T=>Promise|boolean\n' +
      '\n' +
      'iteratorFindAsync(iterator, predicate) -> Promise<T|undefined>',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'iteratorFindAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'var T any,\niterator Iterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 20, offset: 30 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 2, column: 20, offset: 30 },
                  end: { line: 2, column: 23, offset: 33 }
                }
              },
              {
                type: 'text',
                value: ',\npredicate T=>Promise|boolean',
                position: {
                  start: { line: 2, column: 23, offset: 33 },
                  end: { line: 3, column: 31, offset: 65 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 31, offset: 65 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'iteratorFindAsync(iterator, predicate) -> Promise<T|undefined>',
                position: {
                  start: { line: 5, column: 1, offset: 67 },
                  end: { line: 5, column: 63, offset: 129 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 67 },
              end: { line: 5, column: 63, offset: 129 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 63, offset: 129 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/iteratorFind.js'
  },
  {
    name: 'iteratorFind',
    synopsis: 'var T any,\n' +
      '  iterator Iterator<T>,\n' +
      '  predicate T=>Promise|boolean\n' +
      '\n' +
      'iteratorFind(iterator, predicate) -> Promise|T|undefined',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'iteratorFind',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'var T any,\niterator Iterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 20, offset: 30 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 2, column: 20, offset: 30 },
                  end: { line: 2, column: 23, offset: 33 }
                }
              },
              {
                type: 'text',
                value: ',\npredicate T=>Promise|boolean',
                position: {
                  start: { line: 2, column: 23, offset: 33 },
                  end: { line: 3, column: 31, offset: 65 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 31, offset: 65 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'iteratorFind(iterator, predicate) -> Promise|T|undefined',
                position: {
                  start: { line: 5, column: 1, offset: 67 },
                  end: { line: 5, column: 57, offset: 123 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 67 },
              end: { line: 5, column: 57, offset: 123 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 57, offset: 123 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/iteratorFind.js'
  },
  {
    name: 'iteratorForEach',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  iterator Iterator<T>,\n' +
      '  callback T=>()\n' +
      '\n' +
      'iteratorForEach(iterator, callback) -> ()\n' +
      '```',
    description: 'Call a callback for each element of an iterator. Return a promise if any executions are asynchronous.\n' +
      '\n' +
      'Note: iterator is consumed',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'iteratorForEach',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  iterator Iterator<T>,\n' +
              '  callback T=>()\n' +
              '\n' +
              'iteratorForEach(iterator, callback) -> ()',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 127 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 127 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Call a callback for each element of an iterator. Return a promise if any executions are asynchronous.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 102, offset: 101 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 102, offset: 101 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: iterator is consumed',
                position: {
                  start: { line: 3, column: 1, offset: 103 },
                  end: { line: 3, column: 27, offset: 129 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 103 },
              end: { line: 3, column: 27, offset: 129 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 27, offset: 129 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/iteratorForEach.js'
  },
  {
    name: 'iteratorForEachSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'iteratorForEachSeries(iterator Iterator, callback function) -> iterator\n' +
      '```',
    description: 'Call a callback for each element of an iterator. Return a promise if any executions are asynchronous.\n' +
      '\n' +
      'Note: iterator is consumed',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'iteratorForEachSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 22, offset: 21 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 22, offset: 21 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 22, offset: 21 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'iteratorForEachSeries(iterator Iterator, callback function) -> iterator',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 104 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 104 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Call a callback for each element of an iterator. Return a promise if any executions are asynchronous.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 102, offset: 101 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 102, offset: 101 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: iterator is consumed',
                position: {
                  start: { line: 3, column: 1, offset: 103 },
                  end: { line: 3, column: 27, offset: 129 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 103 },
              end: { line: 3, column: 27, offset: 129 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 27, offset: 129 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/iteratorForEachSeries.js'
  },
  {
    name: 'iteratorReduceAsync',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  iterator Iterator<T>,\n' +
      '  reducer (any, T)=>Promise|any,\n' +
      '  result any,\n' +
      '\n' +
      'iteratorReduceAsync(iterator, reducer, result) -> Promise\n' +
      '```',
    description: 'Execute a reducer for each element of an iterator or async iterator, returning a promise of a single value.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'iteratorReduceAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  iterator Iterator<T>,\n' +
              '  reducer (any, T)=>Promise|any,\n' +
              '  result any,\n' +
              '\n' +
              'iteratorReduceAsync(iterator, reducer, result) -> Promise',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 173 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 173 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Execute a reducer for each element of an iterator or async iterator, returning a promise of a single value.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 108, offset: 107 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 108, offset: 107 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 108, offset: 107 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/iteratorReduce.js'
  },
  {
    name: 'iteratorReduce',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  iterator Iterator<T>,\n' +
      '  reducer (any, T)=>Promise|any,\n' +
      '  result any,\n' +
      '\n' +
      'iteratorReduce(iterator, reducer, result?) -> Promise|any\n' +
      '```',
    description: 'Execute a reducer for each element of an iterator, returning a single value.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'iteratorReduce',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  iterator Iterator<T>,\n' +
              '  reducer (any, T)=>Promise|any,\n' +
              '  result any,\n' +
              '\n' +
              'iteratorReduce(iterator, reducer, result?) -> Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 173 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 173 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Execute a reducer for each element of an iterator, returning a single value.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 77, offset: 76 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 77, offset: 76 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 77, offset: 76 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/iteratorReduce.js'
  },
  {
    name: 'iteratorSome',
    synopsis: '```coffeescript [specscript]\n' +
      'iteratorSome(\n' +
      '  iterator Iterator,\n' +
      '  predicate any=>Promise|boolean,\n' +
      ') -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'iteratorSome',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'iteratorSome(\n' +
              '  iterator Iterator,\n' +
              '  predicate any=>Promise|boolean,\n' +
              ') -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 114 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 114 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/iteratorSome.js'
  },
  {
    name: 'lessThan',
    synopsis: '```coffeescript [specscript]\n' +
      'lessThan(left any, right any) -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'lessThan',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'lessThan(left any, right any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 73 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 73 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/lessThan.js'
  },
  {
    name: 'lessThanOrEqual',
    synopsis: '```coffeescript [specscript]\n' +
      'lessThanOrEqual(left any, right any) -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'lessThanOrEqual',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'lessThanOrEqual(left any, right any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 80 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 80 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/lessThanOrEqual.js'
  },
  {
    name: 'mapFilter',
    synopsis: '```coffeescript [specscript]\n' +
      'mapFilter<\n' +
      '  T any,\n' +
      '  map Map<any=>T>,\n' +
      '  predicate T=>Promise|boolean,\n' +
      '>(map, predicate) -> filteredValuesByPredicate Map<any=>T>\n' +
      '```',
    description: 'Filter the values of a Map concurrently by predicate. `predicate` may be asynchronous.\n' +
      '\n' +
      'Note: for asynchronous predicates, the order of the resulting Map is not guaranteed',
    TODO: 'mapFilterSeries (will guarantee order for asynchronous predicates)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'mapFilter',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapFilter<\n' +
              '  T any,\n' +
              '  map Map<any=>T>,\n' +
              '  predicate T=>Promise|boolean,\n' +
              '>(map, predicate) -> filteredValuesByPredicate Map<any=>T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 162 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 162 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Filter the values of a Map concurrently by predicate. ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 55, offset: 54 }
                }
              },
              {
                type: 'inlineCode',
                value: 'predicate',
                position: {
                  start: { line: 1, column: 55, offset: 54 },
                  end: { line: 1, column: 66, offset: 65 }
                }
              },
              {
                type: 'text',
                value: ' may be asynchronous.',
                position: {
                  start: { line: 1, column: 66, offset: 65 },
                  end: { line: 1, column: 87, offset: 86 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 87, offset: 86 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: for asynchronous predicates, the order of the resulting Map is not guaranteed',
                position: {
                  start: { line: 3, column: 1, offset: 88 },
                  end: { line: 3, column: 84, offset: 171 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 88 },
              end: { line: 3, column: 84, offset: 171 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 84, offset: 171 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'mapFilterSeries (will guarantee order for asynchronous predicates)',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 67, offset: 66 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 67, offset: 66 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 67, offset: 66 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/mapFilter.js'
  },
  {
    name: 'mapFrom',
    synopsis: '```coffeescript [specscript]\nmapFrom(object Object) -> Map\n```',
    description: 'Create a new Map from an object.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'mapFrom',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapFrom(object Object) -> Map',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 62 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 62 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a new Map from an object.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 33, offset: 32 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 33, offset: 32 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 33, offset: 32 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/mapFrom.js'
  },
  {
    name: 'mapMap',
    synopsis: '```coffeescript [specscript]\n' +
      'mapMap(\n' +
      '  value Map,\n' +
      '  mapper (element any, key any, value)=>Promise|any\n' +
      ') -> Promise|Map<any=>any>\n' +
      '```',
    description: 'Apply a mapper concurrently to each value (not entry) of a Map, returning a Map of results. `mapper` may be asynchronous.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'mapMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapMap(\n' +
              '  value Map,\n' +
              '  mapper (element any, key any, value)=>Promise|any\n' +
              ') -> Promise|Map<any=>any>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 132 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 132 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a mapper concurrently to each value (not entry) of a Map, returning a Map of results. ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 93, offset: 92 }
                }
              },
              {
                type: 'inlineCode',
                value: 'mapper',
                position: {
                  start: { line: 1, column: 93, offset: 92 },
                  end: { line: 1, column: 101, offset: 100 }
                }
              },
              {
                type: 'text',
                value: ' may be asynchronous.',
                position: {
                  start: { line: 1, column: 101, offset: 100 },
                  end: { line: 1, column: 122, offset: 121 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 122, offset: 121 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 122, offset: 121 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/mapMap.js'
  },
  {
    name: 'mapMapEntries',
    synopsis: '```coffeescript [specscript]\n' +
      'mapMapEntries(\n' +
      '  source Map,\n' +
      '  mapper ([key string, source any])=>Promise|[string, any],\n' +
      ') -> Promise|Map\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'mapMapEntries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapMapEntries(\n' +
              '  source Map,\n' +
              '  mapper ([key string, source any])=>Promise|[string, any],\n' +
              ') -> Promise|Map',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 138 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 138 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/mapMapEntries.js'
  },
  {
    name: '_mapMapPoolAsync',
    synopsis: '```coffeescript [specscript]\n' +
      '_mapMapPoolAsync(\n' +
      '  m Map,\n' +
      '  iterator Iterator,\n' +
      '  concurrency number,\n' +
      '  f function,\n' +
      '  result Map,\n' +
      '  promises Set,\n' +
      ') -> Promise<Map>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_mapMapPoolAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_mapMapPoolAsync(\n' +
              '  m Map,\n' +
              '  iterator Iterator,\n' +
              '  concurrency number,\n' +
              '  f function,\n' +
              '  result Map,\n' +
              '  promises Set,\n' +
              ') -> Promise<Map>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 164 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 164 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/mapMapPool.js'
  },
  {
    name: 'mapMapPool',
    synopsis: '```coffeescript [specscript]\n' +
      'mapMapPool(m Map, concurrency number, f function) -> Promise|Map\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'mapMapPool',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapMapPool(m Map, concurrency number, f function) -> Promise|Map',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 97 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 97 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/mapMapPool.js'
  },
  {
    name: 'mapMapSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'type MapMapper = (\n' +
      '  value any,\n' +
      '  key any,\n' +
      '  map Map\n' +
      ')=>(resultElement Promise|any)\n' +
      '\n' +
      'mapMapSeries(map Map, f MapMapper) -> Promise|Map\n' +
      '```',
    description: 'Apply a mapper in series to each value of a Map, returning a new Map of mapped elements. Mapper may be asynchronous.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'mapMapSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type MapMapper = (\n' +
              '  value any,\n' +
              '  key any,\n' +
              '  map Map\n' +
              ')=>(resultElement Promise|any)\n' +
              '\n' +
              'mapMapSeries(map Map, f MapMapper) -> Promise|Map',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 167 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 167 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a mapper in series to each value of a Map, returning a new Map of mapped elements. Mapper may be asynchronous.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 117, offset: 116 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 117, offset: 116 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 117, offset: 116 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/mapMapSeries.js'
  },
  {
    name: 'mapReduceAsync',
    synopsis: '```coffeescript [specscript]\n' +
      'mapReduceAsync(\n' +
      '  map Map,\n' +
      '  reducer (result any, value any, key string, map)=>Promise|any,\n' +
      '  result any,\n' +
      '  mapEntriesIter Iterator<[key, value]>,\n' +
      ') -> Promise<result>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'mapReduceAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapReduceAsync(\n' +
              '  map Map,\n' +
              '  reducer (result any, value any, key string, map)=>Promise|any,\n' +
              '  result any,\n' +
              '  mapEntriesIter Iterator<[key, value]>,\n' +
              ') -> Promise<result>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 200 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 200 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/mapReduce.js'
  },
  {
    name: 'mapReduce',
    synopsis: '```coffeescript [specscript]\n' +
      'mapReduce(\n' +
      '  map Map,\n' +
      '  reducer (result any, value any, key string, map)=>Promise|any,\n' +
      '  result any,\n' +
      ') -> Promise|result\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'mapReduce',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapReduce(\n' +
              '  map Map,\n' +
              '  reducer (result any, value any, key string, map)=>Promise|any,\n' +
              '  result any,\n' +
              ') -> Promise|result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 153 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 153 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/mapReduce.js'
  },
  {
    name: 'mapSet',
    synopsis: '```coffeescript [specscript]\n' +
      'mapSet(source Map, key any, value any) -> source\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'mapSet',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapSet(source Map, key any, value any) -> source',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 81 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 81 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/mapSet.js'
  },
  {
    name: 'memoizeCappedUnary',
    synopsis: '```coffeescript [specscript]\n' +
      'memoizeCappedUnary(func function, cap number) -> memoized function\n' +
      '```',
    description: 'Memoize a function. Clear cache when size reaches cap.',
    todo: 'explore Map reimplementation',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'memoizeCappedUnary',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'memoizeCappedUnary(func function, cap number) -> memoized function',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 99 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 99 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Memoize a function. Clear cache when size reaches cap.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 55, offset: 54 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 55, offset: 54 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 55, offset: 54 }
        }
      },
      todo: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'explore Map reimplementation',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/memoizeCappedUnary.js'
  },
  {
    name: 'nonfunctionsConditional',
    synopsis: '```coffeescript [specscript]\n' +
      'nonfunctionsConditional(array Array<value>, index number) -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'nonfunctionsConditional',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 24, offset: 23 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'nonfunctionsConditional(array Array<value>, index number) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 101 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 101 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/nonfunctionsConditional.js'
  },
  {
    name: 'noop',
    synopsis: 'noop() -> ()',
    description: 'Takes nothing, returns `undefined`',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'noop',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'noop() -> ()',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Takes nothing, returns ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              },
              {
                type: 'inlineCode',
                value: 'undefined',
                position: {
                  start: { line: 1, column: 24, offset: 23 },
                  end: { line: 1, column: 35, offset: 34 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 35, offset: 34 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 35, offset: 34 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/noop.js'
  },
  {
    name: 'objectAssign',
    synopsis: '```coffeescript [specscript]\n' +
      'objectAssign<\n' +
      '  targetObject Object, sourceObjects ...Object,\n' +
      '>(targetObject, ...sourceObjects) -> merged Object\n' +
      '```',
    description: 'Dereferenced `Object.assign`',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectAssign',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectAssign<\n' +
              '  targetObject Object, sourceObjects ...Object,\n' +
              '>(targetObject, ...sourceObjects) -> merged Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 145 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 145 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Dereferenced ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              },
              {
                type: 'inlineCode',
                value: 'Object.assign',
                position: {
                  start: { line: 1, column: 14, offset: 13 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectAssign.js'
  },
  {
    name: 'objectFilter',
    synopsis: '```coffeescript [specscript]\n' +
      'objectFilter<T>(\n' +
      '  object Object<T>,\n' +
      '  predicate T=>boolean,\n' +
      ') -> result Object<T>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectFilter',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectFilter<T>(\n' +
              '  object Object<T>,\n' +
              '  predicate T=>boolean,\n' +
              ') -> result Object<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 115 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 115 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectFilter.js'
  },
  {
    name: 'objectFlatMap',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'objectFlatMap<\n' +
      '  T any,\n' +
      '  object Object<T>,\n' +
      '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
      '>(object, flatMapper) -> Promise|Object<T>\n' +
      '```',
    description: 'Apply a flatMapper to each value of an object, assigning all elements of all results into a new object.',
    TODO: '"deeply copies" after objectFlatten changes to deep assignment',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectFlatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'objectFlatMap<\n' +
              '  T any,\n' +
              '  object Object<T>,\n' +
              '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
              '>(object, flatMapper) -> Promise|Object<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 14, column: 4, offset: 466 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 14, column: 4, offset: 466 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a flatMapper to each value of an object, assigning all elements of all results into a new object.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 104, offset: 103 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 104, offset: 103 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 104, offset: 103 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '"deeply copies" after objectFlatten changes to deep assignment',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 63, offset: 62 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 63, offset: 62 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 63, offset: 62 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectFlatMap.js'
  },
  {
    name: 'objectFlatten',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'objectFlatten<T>(\n' +
      '  object Object<Monad<T>|Foldable<T>|T>,\n' +
      ') -> Object<T>\n' +
      '```',
    TODO: 'change objectAssign to objectDeepAssign',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectFlatten',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'objectFlatten<T>(\n' +
              '  object Object<Monad<T>|Foldable<T>|T>,\n' +
              ') -> Object<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 12, column: 4, offset: 405 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 405 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'change objectAssign to objectDeepAssign',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 40, offset: 39 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 40, offset: 39 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 40, offset: 39 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectFlatten.js'
  },
  {
    name: 'objectForEach',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  object Object<T>,\n' +
      '  callback T=>()\n' +
      '\n' +
      'objectForEach(object, callback) -> ()\n' +
      '```',
    description: 'Execute a callback for each value of an object. Return a promise if any executions are asynchronous.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectForEach',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  object Object<T>,\n' +
              '  callback T=>()\n' +
              '\n' +
              'objectForEach(object, callback) -> ()',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 119 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 119 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Execute a callback for each value of an object. Return a promise if any executions are asynchronous.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 101, offset: 100 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 101, offset: 100 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 101, offset: 100 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectForEach.js'
  },
  {
    name: 'objectForEachSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'objectForEachSeries(object Object, callback function) -> Promise|object\n' +
      '```',
    description: 'Execute a callback for each value of an object. Return a promise if any executions are asynchronous.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectForEachSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectForEachSeries(object Object, callback function) -> Promise|object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 104 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 104 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Execute a callback for each value of an object. Return a promise if any executions are asynchronous.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 101, offset: 100 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 101, offset: 100 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 101, offset: 100 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectForEachSeries.js'
  },
  {
    name: 'objectGet',
    synopsis: 'objectGet(object Object, key string) -> value any',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectGet',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectGet(object Object, key string) -> value any',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 50, offset: 49 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 50, offset: 49 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 50, offset: 49 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectGet.js'
  },
  {
    name: 'objectGetFirstKey',
    synopsis: '```coffeescript [specscript]\n' +
      'objectGetFirstKey(object Object) -> firstKey string\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectGetFirstKey',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectGetFirstKey(object Object) -> firstKey string',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 84 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 84 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectGetFirstKey.js'
  },
  {
    name: 'objectKeys',
    synopsis: 'objectKeys<T>(object Object<T>) -> Array<T>',
    description: 'Dereferenced `Object.keys`',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectKeys',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectKeys',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 11, offset: 10 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              },
              {
                type: 'text',
                value: '(object Object',
                position: {
                  start: { line: 1, column: 14, offset: 13 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 28, offset: 27 },
                  end: { line: 1, column: 31, offset: 30 }
                }
              },
              {
                type: 'text',
                value: ') -> Array',
                position: {
                  start: { line: 1, column: 31, offset: 30 },
                  end: { line: 1, column: 41, offset: 40 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 41, offset: 40 },
                  end: { line: 1, column: 44, offset: 43 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 44, offset: 43 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 44, offset: 43 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Dereferenced ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              },
              {
                type: 'inlineCode',
                value: 'Object.keys',
                position: {
                  start: { line: 1, column: 14, offset: 13 },
                  end: { line: 1, column: 27, offset: 26 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 27, offset: 26 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 27, offset: 26 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectKeys.js'
  },
  {
    name: 'objectKeysLength',
    synopsis: '```coffeescript [specscript]\n' +
      'objectKeysLength(object Object) -> number\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectKeysLength',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectKeysLength(object Object) -> number',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 74 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 74 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectKeysLength.js'
  },
  {
    name: 'objectMap',
    synopsis: '```coffeescript [specscript]\n' +
      'objectMap<\n' +
      '  T any,\n' +
      '  object Object<T>,\n' +
      '  mapper T=>Promise|any,\n' +
      '>(object, mapper) -> Promise|Object\n' +
      '```',
    description: 'Apply a mapper concurrently to each value of an object, returning an object of results. Mapper may be asynchronous.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectMap<\n' +
              '  T any,\n' +
              '  object Object<T>,\n' +
              '  mapper T=>Promise|any,\n' +
              '>(object, mapper) -> Promise|Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 133 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 133 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a mapper concurrently to each value of an object, returning an object of results. Mapper may be asynchronous.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 116, offset: 115 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 116, offset: 115 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 116, offset: 115 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectMap.js'
  },
  {
    name: 'objectMapEntries',
    synopsis: '```coffeescript [specscript]\n' +
      'objectMapEntries(\n' +
      '  object Object,\n' +
      '  mapper ([key string, value any])=>Promise|[string, any],\n' +
      ') -> Promise|Object\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectMapEntries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectMapEntries(\n' +
              '  object Object,\n' +
              '  mapper ([key string, value any])=>Promise|[string, any],\n' +
              ') -> Promise|Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 146 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 146 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectMapEntries.js'
  },
  {
    name: 'objectMapOwn',
    synopsis: '```coffeescript [specscript]\n' +
      'objectMapOwn<\n' +
      '  T any,\n' +
      '  object Object<T>,\n' +
      '  mapper T=>Promise|any,\n' +
      '>(object, mapper) -> Promise|Object\n' +
      '```',
    description: "Apply a mapper concurrently to an object's own values, returning an object of results. Mapper may be asynchronous.\n" +
      "Guards mapping by validating that each property is the object's own and not inherited from the prototype chain.",
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectMapOwn',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectMapOwn<\n' +
              '  T any,\n' +
              '  object Object<T>,\n' +
              '  mapper T=>Promise|any,\n' +
              '>(object, mapper) -> Promise|Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 136 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 136 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "Apply a mapper concurrently to an object's own values, returning an object of results. Mapper may be asynchronous.\n" +
                  "Guards mapping by validating that each property is the object's own and not inherited from the prototype chain.",
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 112, offset: 226 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 112, offset: 226 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 2, column: 112, offset: 226 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectMapOwn.js'
  },
  {
    name: '_objectMapPoolAsync',
    synopsis: '```coffeescript [specscript]\n' +
      '_objectMapPoolAsync(\n' +
      '  o Object,\n' +
      '  concurrency number,\n' +
      '  f function,\n' +
      '  result Object,\n' +
      '  doneKeys Object,\n' +
      '  promises Set,\n' +
      ') -> result Promise|Object\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_objectMapPoolAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_objectMapPoolAsync(\n' +
              '  o Object,\n' +
              '  concurrency number,\n' +
              '  f function,\n' +
              '  result Object,\n' +
              '  doneKeys Object,\n' +
              '  promises Set,\n' +
              ') -> result Promise|Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 180 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 180 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectMapPool.js'
  },
  {
    name: 'objectMapPool',
    synopsis: '```coffeescript [specscript]\n' +
      'objectMapPool(o Object, concurrency number, f function) -> Promise|Object\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectMapPool',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectMapPool(o Object, concurrency number, f function) -> Promise|Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 106 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 106 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectMapPool.js'
  },
  {
    name: 'objectMapSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'type ObjectMapper = (\n' +
      '  value any,\n' +
      '  key string,\n' +
      '  collection Object\n' +
      ')=>(resultElement Promise|any)\n' +
      '\n' +
      'objectMapSeries(object Object, f ObjectMapper) -> Promise|Object\n' +
      '```',
    description: 'Apply a function `f` in series to each value of an object, returning an object of results. `f` may be asynchronous.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectMapSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type ObjectMapper = (\n' +
              '  value any,\n' +
              '  key string,\n' +
              '  collection Object\n' +
              ')=>(resultElement Promise|any)\n' +
              '\n' +
              'objectMapSeries(object Object, f ObjectMapper) -> Promise|Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 198 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 198 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a function ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              },
              {
                type: 'inlineCode',
                value: 'f',
                position: {
                  start: { line: 1, column: 18, offset: 17 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              },
              {
                type: 'text',
                value: ' in series to each value of an object, returning an object of results. ',
                position: {
                  start: { line: 1, column: 21, offset: 20 },
                  end: { line: 1, column: 92, offset: 91 }
                }
              },
              {
                type: 'inlineCode',
                value: 'f',
                position: {
                  start: { line: 1, column: 92, offset: 91 },
                  end: { line: 1, column: 95, offset: 94 }
                }
              },
              {
                type: 'text',
                value: ' may be asynchronous.',
                position: {
                  start: { line: 1, column: 95, offset: 94 },
                  end: { line: 1, column: 116, offset: 115 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 116, offset: 115 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 116, offset: 115 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectMapSeries.js'
  },
  {
    name: 'objectReduceAsync',
    synopsis: '```coffeescript [specscript]\n' +
      'objectReduceAsync(\n' +
      '  object Object,\n' +
      '  reducer (any, element any, key string, object)=>Promise|any,\n' +
      '  result any,\n' +
      ') -> Promise<result>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectReduceAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectReduceAsync(\n' +
              '  object Object,\n' +
              '  reducer (any, element any, key string, object)=>Promise|any,\n' +
              '  result any,\n' +
              ') -> Promise<result>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 166 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 166 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectReduce.js'
  },
  {
    name: 'objectReduce',
    synopsis: '```coffeescript [specscript]\n' +
      'objectReduce(\n' +
      '  object Object,\n' +
      '  reducer (any, element any, key string, object)=>Promise|any,\n' +
      '  result any,\n' +
      ') -> Promise|result\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectReduce',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectReduce(\n' +
              '  object Object,\n' +
              '  reducer (any, element any, key string, object)=>Promise|any,\n' +
              '  result any,\n' +
              ') -> Promise|result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 160 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 160 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectReduce.js'
  },
  {
    name: 'objectSet',
    synopsis: '```coffeescript [specscript]\n' +
      'objectSet(\n' +
      '  object Object,\n' +
      '  property string,\n' +
      '  value any,\n' +
      ') -> object\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectSet',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectSet(\n' +
              '  object Object,\n' +
              '  property string,\n' +
              '  value any,\n' +
              ') -> object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 104 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 104 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectSet.js'
  },
  {
    name: 'objectSetIf',
    synopsis: '```coffeescript [specscript]\n' +
      'objectSetIf<\n' +
      '  object Object,\n' +
      '  key string,\n' +
      '  value any,\n' +
      '  condition boolean,\n' +
      '>(object, key, value, condition) -> object\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectSetIf',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectSetIf<\n' +
              '  object Object,\n' +
              '  key string,\n' +
              '  value any,\n' +
              '  condition boolean,\n' +
              '>(object, key, value, condition) -> object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 153 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 153 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectSetIf.js'
  },
  {
    name: 'objectToString',
    synopsis: 'objectToString(value any) -> string',
    description: 'Get the tag of an object',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectToString',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectToString(value any) -> string',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 36, offset: 35 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 36, offset: 35 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 36, offset: 35 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Get the tag of an object',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectToString.js'
  },
  {
    name: 'objectValues',
    synopsis: 'objectValues<T>(object Object<T>) -> Array<T>',
    description: 'Dereferenced `Object.values`',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectValues',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectValues',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 13, offset: 12 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              },
              {
                type: 'text',
                value: '(object Object',
                position: {
                  start: { line: 1, column: 16, offset: 15 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 30, offset: 29 },
                  end: { line: 1, column: 33, offset: 32 }
                }
              },
              {
                type: 'text',
                value: ') -> Array',
                position: {
                  start: { line: 1, column: 33, offset: 32 },
                  end: { line: 1, column: 43, offset: 42 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 43, offset: 42 },
                  end: { line: 1, column: 46, offset: 45 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 46, offset: 45 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 46, offset: 45 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Dereferenced ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              },
              {
                type: 'inlineCode',
                value: 'Object.values',
                position: {
                  start: { line: 1, column: 14, offset: 13 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/objectValues.js'
  },
  {
    name: 'once',
    synopsis: '```coffeescript [specscript]\n' +
      'once(func function) -> funcThatRunsOnce function\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'once',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'once(func function) -> funcThatRunsOnce function',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 81 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 81 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/once.js'
  },
  {
    name: 'promiseAll',
    synopsis: 'promiseAll(Iterable<Promise|any>) -> Promise<Array>',
    description: 'Dereferenced Promise.all',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'promiseAll',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'promiseAll(Iterable<Promise|any>) -> Promise',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 45, offset: 44 }
                }
              },
              {
                type: 'html',
                value: '<Array>',
                position: {
                  start: { line: 1, column: 45, offset: 44 },
                  end: { line: 1, column: 52, offset: 51 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 52, offset: 51 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 52, offset: 51 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Dereferenced Promise.all',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/promiseAll.js'
  },
  {
    name: 'promiseObjectAllExecutor',
    synopsis: '```coffeescript [specscript]\n' +
      'promiseObjectAllExecutor(resolve function) -> ()\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'promiseObjectAllExecutor',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'promiseObjectAllExecutor(resolve function) -> ()',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 81 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 81 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/promiseObjectAll.js'
  },
  {
    name: 'promiseObjectAll',
    synopsis: '```coffeescript [specscript]\n' +
      'promiseObjectAll(object<Promise|any>) -> Promise<object>\n' +
      '```',
    description: 'Like `Promise.all` but for objects.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'promiseObjectAll',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'promiseObjectAll(object<Promise|any>) -> Promise<object>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 89 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 89 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Like ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              },
              {
                type: 'inlineCode',
                value: 'Promise.all',
                position: {
                  start: { line: 1, column: 6, offset: 5 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              },
              {
                type: 'text',
                value: ' but for objects.',
                position: {
                  start: { line: 1, column: 19, offset: 18 },
                  end: { line: 1, column: 36, offset: 35 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 36, offset: 35 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 36, offset: 35 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/promiseObjectAll.js'
  },
  {
    name: 'promiseRace',
    synopsis: 'promiseRace(Iterable<Promise|any>) -> firstResolvedOrRejected Promise',
    description: 'Dereferenced Promise.race',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'promiseRace',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'promiseRace(Iterable<Promise|any>) -> firstResolvedOrRejected Promise',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 70, offset: 69 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 70, offset: 69 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 70, offset: 69 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Dereferenced Promise.race',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 26, offset: 25 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 26, offset: 25 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 26, offset: 25 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/promiseRace.js'
  },
  {
    name: 'parsePropertyPath',
    synopsis: '```coffeescript [specscript]\n' +
      'parsePropertyPath(pathString string) -> Array<string>\n' +
      '```',
    note: 'a[0].b.c\na.0.b[0][1].c',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'parsePropertyPath',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'parsePropertyPath(pathString string) -> Array<string>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 86 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 86 }
        }
      },
      note: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'a[0].b.c\na.0.b[0][1].c',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 14, offset: 22 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 14, offset: 22 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 2, column: 14, offset: 22 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/propertyPathToArray.js'
  },
  {
    name: 'propertyPathToArray',
    synopsis: '```coffeescript [specscript]\n' +
      'propertyPathToArray(path string|number|Array<string|number>) -> Array\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'propertyPathToArray',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'propertyPathToArray(path string|number|Array<string|number>) -> Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 102 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 102 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/propertyPathToArray.js'
  },
  {
    name: 'reducerAllSync',
    synopsis: '```coffeescript [specscript]\n' +
      'reducerAllSync(predicate any=> boolean, result boolean, element any) -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reducerAllSync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'reducerAllSync(predicate any=> boolean, result boolean, element any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 112 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 112 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/reducerAllSync.js'
  },
  {
    name: 'reducerAnySync',
    synopsis: '```coffeescript [specscript]\n' +
      'reducerAnySync(predicate T=>boolean) -> anyReducer (any, any)=>any\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reducerAnySync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'reducerAnySync(predicate T=>boolean) -> anyReducer (any, any)=>any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 99 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 99 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/reducerAnySync.js'
  },
  {
    name: 'reducerConcat',
    synopsis: '```coffeescript [specscript]\n' +
      'reducerConcat<\n' +
      '  T any,\n' +
      '  intermediate any,\n' +
      '  reducerA (any, T)=>Promise|intermediate,\n' +
      '  reducerB (intermediate, T)=>Promise|any,\n' +
      '>(reducerA, reducerB) -> pipedReducer (any, T)=>Promise|any\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reducerConcat',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'reducerConcat<\n' +
              '  T any,\n' +
              '  intermediate any,\n' +
              '  reducerA (any, T)=>Promise|intermediate,\n' +
              '  reducerB (intermediate, T)=>Promise|any,\n' +
              '>(reducerA, reducerB) -> pipedReducer (any, T)=>Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 222 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 222 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/reducerConcat.js'
  },
  {
    name: 'reducerConcatSync',
    synopsis: 'reducerConcatSync(\n' +
      '  reducerA (any, T)=>(intermediate any),\n' +
      '  reducerB (intermediate, T)=>any,\n' +
      ') -> pipedReducer (any, T)=>any',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reducerConcatSync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reducerConcatSync(\n' +
                  'reducerA (any, T)=>(intermediate any),\n' +
                  'reducerB (intermediate, T)=>any,\n' +
                  ') -> pipedReducer (any, T)=>any',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 4, column: 32, offset: 126 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 32, offset: 126 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 32, offset: 126 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/reducerConcatSync.js'
  },
  {
    name: 'reducerEvery',
    synopsis: '```coffeescript [specscript]\n' +
      'reducerEvery(\n' +
      '  predicate any=>boolean,\n' +
      ') -> reducer(result boolean, element any)=>boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reducerEvery',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'reducerEvery(\n' +
              '  predicate any=>boolean,\n' +
              ') -> reducer(result boolean, element any)=>boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 123 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 123 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/reducerEvery.js'
  },
  {
    name: 'reducerFilter',
    synopsis: '```coffeescript [specscript]\n' +
      'reducerFilter<\n' +
      '  T any,\n' +
      '  reducer (any, T)=>Promise|any,\n' +
      '  predicate T=>Promise|boolean,\n' +
      '>(reducer, predicate) -> filteringReducer (any, any)=>Promise|any\n' +
      '```',
    description: "Filter elements from a reducer's operation by predicate. `predicate` may be asynchronous.\n" +
      '\n' +
      'Note: If the predicate is asynchronous, the implementation of reduce that consumes the filtering reducer must resolve promises',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reducerFilter',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'reducerFilter<\n' +
              '  T any,\n' +
              '  reducer (any, T)=>Promise|any,\n' +
              '  predicate T=>Promise|boolean,\n' +
              '>(reducer, predicate) -> filteringReducer (any, any)=>Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 187 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 187 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "Filter elements from a reducer's operation by predicate. ",
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 58, offset: 57 }
                }
              },
              {
                type: 'inlineCode',
                value: 'predicate',
                position: {
                  start: { line: 1, column: 58, offset: 57 },
                  end: { line: 1, column: 69, offset: 68 }
                }
              },
              {
                type: 'text',
                value: ' may be asynchronous.',
                position: {
                  start: { line: 1, column: 69, offset: 68 },
                  end: { line: 1, column: 90, offset: 89 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 90, offset: 89 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: If the predicate is asynchronous, the implementation of reduce that consumes the filtering reducer must resolve promises',
                position: {
                  start: { line: 3, column: 1, offset: 91 },
                  end: { line: 3, column: 127, offset: 217 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 91 },
              end: { line: 3, column: 127, offset: 217 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 127, offset: 217 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/reducerFilter.js'
  },
  {
    name: 'reducerFlatMap',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'reducerFlatMap<T>(\n' +
      '  reducer (any, T)=>Promise|any,\n' +
      '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
      ') -> flatMappingReducer (any, T)=>Promise|any\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reducerFlatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'reducerFlatMap<T>(\n' +
              '  reducer (any, T)=>Promise|any,\n' +
              '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
              ') -> flatMappingReducer (any, T)=>Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 13, column: 4, offset: 477 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 477 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/reducerFlatMap.js'
  },
  {
    name: 'reducerFlatten',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'reducerFlatten<T>(\n' +
      '  reducer Reducer<Monad<T>|Foldable<T>|T>,\n' +
      ') -> flatteningReducer Reducer<T>\n' +
      '```',
    description: 'Create a flattening reducer - a reducer that flattens all elements of a reducing operation into the result.',
    previously: 'flatteningTransducer',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reducerFlatten',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'reducerFlatten<T>(\n' +
              '  reducer Reducer<Monad<T>|Foldable<T>|T>,\n' +
              ') -> flatteningReducer Reducer<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 12, column: 4, offset: 427 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 427 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a flattening reducer - a reducer that flattens all elements of a reducing operation into the result.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 108, offset: 107 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 108, offset: 107 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 108, offset: 107 }
        }
      },
      previously: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'flatteningTransducer',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/reducerFlatten.js'
  },
  {
    name: 'reducerForEach',
    synopsis: '```coffeescript [specscript]\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      '\n' +
      'var T any,\n' +
      '  reducer Reducer<T>\n' +
      '\n' +
      'reducerForEach(reducer, callback) -> reducer\n' +
      '```',
    description: 'Create a reducer that additionally executes a callback for each element of its reducing operation.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reducerForEach',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Reducer<T> = (any, T)=>Promise|any\n' +
              '\n' +
              'var T any,\n' +
              '  reducer Reducer<T>\n' +
              '\n' +
              'reducerForEach(reducer, callback) -> reducer',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 146 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 146 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a reducer that additionally executes a callback for each element of its reducing operation.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 99, offset: 98 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 99, offset: 98 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 99, offset: 98 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/reducerForEach.js'
  },
  {
    name: 'reducerMap',
    synopsis: '```coffeescript [specscript]\n' +
      'reducerMap<\n' +
      '  T any,\n' +
      '  reducer (any, T)=>Promise|any,\n' +
      '  mapper T=>Promise|any,\n' +
      '>(reducer, mapper) -> mappingReducer (any, any)=>Promise|any\n' +
      '```',
    description: "Apply a mapper to elements of a reducer's operation. `mapper` may be asynchronous\n" +
      '\n' +
      'Note: If the mapper is asynchronous, the implementation of reduce that consumes the mapping reducer must resolve promises',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reducerMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'reducerMap<\n' +
              '  T any,\n' +
              '  reducer (any, T)=>Promise|any,\n' +
              '  mapper T=>Promise|any,\n' +
              '>(reducer, mapper) -> mappingReducer (any, any)=>Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 172 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 172 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "Apply a mapper to elements of a reducer's operation. ",
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 54, offset: 53 }
                }
              },
              {
                type: 'inlineCode',
                value: 'mapper',
                position: {
                  start: { line: 1, column: 54, offset: 53 },
                  end: { line: 1, column: 62, offset: 61 }
                }
              },
              {
                type: 'text',
                value: ' may be asynchronous',
                position: {
                  start: { line: 1, column: 62, offset: 61 },
                  end: { line: 1, column: 82, offset: 81 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 82, offset: 81 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Note: If the mapper is asynchronous, the implementation of reduce that consumes the mapping reducer must resolve promises',
                position: {
                  start: { line: 3, column: 1, offset: 83 },
                  end: { line: 3, column: 122, offset: 204 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 83 },
              end: { line: 3, column: 122, offset: 204 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 122, offset: 204 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/reducerMap.js'
  },
  {
    name: 'reducerSome',
    synopsis: '```coffeescript [specscript]\n' +
      'reducerSome(\n' +
      '  predicate any=>boolean,\n' +
      ') -> anyReducer (result boolean, element any)=>boolean\n' +
      '```',
    related: 'foldableAllReducer',
    TODO: 'throw to break early?',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reducerSome',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'reducerSome(\n' +
              '  predicate any=>boolean,\n' +
              ') -> anyReducer (result boolean, element any)=>boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 126 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 126 }
        }
      },
      related: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'foldableAllReducer',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'throw to break early?',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 22, offset: 21 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 22, offset: 21 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 22, offset: 21 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/reducerSome.js'
  },
  {
    name: '_reducerTryCatchErrorHandler',
    synopsis: '```coffeescript [specscript]\n' +
      '_reducerTryCatchErrorHandler(\n' +
      '  reducer function,\n' +
      '  error Error,\n' +
      '  accum any,\n' +
      '  element any,\n' +
      ') -> Promise|any\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_reducerTryCatchErrorHandler',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_reducerTryCatchErrorHandler(\n' +
              '  reducer function,\n' +
              '  error Error,\n' +
              '  accum any,\n' +
              '  element any,\n' +
              ') -> Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 142 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 142 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/reducerTryCatch.js'
  },
  {
    name: 'reducerTryCatch',
    synopsis: '```coffeescript [specscript]\n' +
      'type Reducer = (accum any, element any)=>(nextAccumulator Promise|any)\n' +
      '\n' +
      'reducerTryCatch(\n' +
      '  reducer function,\n' +
      '  catcher function,\n' +
      ') -> errorHandlingReducer function\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reducerTryCatch',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Reducer = (accum any, element any)=>(nextAccumulator Promise|any)\n' +
              '\n' +
              'reducerTryCatch(\n' +
              '  reducer function,\n' +
              '  catcher function,\n' +
              ') -> errorHandlingReducer function',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 196 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 196 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/reducerTryCatch.js'
  },
  {
    name: 'sameValueZero',
    synopsis: '```coffeescript [specscript]\n' +
      'sameValueZero(left any, right any) -> boolean\n' +
      '```',
    description: 'Determine if two values are the same value. [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero).',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'sameValueZero',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'sameValueZero(left any, right any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 78 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 78 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Determine if two values are the same value. ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 45, offset: 44 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero',
                children: [
                  {
                    type: 'text',
                    value: 'SameValueZero',
                    position: {
                      start: { line: 1, column: 46, offset: 45 },
                      end: { line: 1, column: 59, offset: 58 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 45, offset: 44 },
                  end: { line: 1, column: 123, offset: 122 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 1, column: 123, offset: 122 },
                  end: { line: 1, column: 124, offset: 123 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 124, offset: 123 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 124, offset: 123 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/sameValueZero.js'
  },
  {
    name: 'setAdd',
    synopsis: '```coffeescript [specscript]\nsetAdd(set Set, value any) -> set\n```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'setAdd',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'setAdd(set Set, value any) -> set',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 66 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 66 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/setAdd.js'
  },
  {
    name: 'setByPath',
    synopsis: '```coffeescript [specscript]\n' +
      'setByPath<\n' +
      '  obj any,\n' +
      '  value any,\n' +
      '  path string|number|Array<string|number>,\n' +
      '>(obj, value, path) -> obj any\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'setByPath',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'setByPath<\n' +
              '  obj any,\n' +
              '  value any,\n' +
              '  path string|number|Array<string|number>,\n' +
              '>(obj, value, path) -> obj any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 141 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 141 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/setByPath.js'
  },
  {
    name: 'setExtend',
    synopsis: '```coffeescript [specscript]\nsetExtend(set, values Set|any) -> set\n```',
    related: 'arrayExtend',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'setExtend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'setExtend(set, values Set|any) -> set',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 70 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 70 }
        }
      },
      related: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayExtend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/setExtend.js'
  },
  {
    name: 'setFilter',
    synopsis: '```coffeescript [specscript]\n' +
      'setFilter<T>(\n' +
      '  set Set<T>,\n' +
      '  predicate T=>Promise|boolean,\n' +
      ') -> filteredSet Promise|Set<T>\n' +
      '```',
    description: 'Filter elements of a Set concurrently by predicate. `predicate` may be asynchronous.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'setFilter',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'setFilter<T>(\n' +
              '  set Set<T>,\n' +
              '  predicate T=>Promise|boolean,\n' +
              ') -> filteredSet Promise|Set<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 124 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 124 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Filter elements of a Set concurrently by predicate. ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 53, offset: 52 }
                }
              },
              {
                type: 'inlineCode',
                value: 'predicate',
                position: {
                  start: { line: 1, column: 53, offset: 52 },
                  end: { line: 1, column: 64, offset: 63 }
                }
              },
              {
                type: 'text',
                value: ' may be asynchronous.',
                position: {
                  start: { line: 1, column: 64, offset: 63 },
                  end: { line: 1, column: 85, offset: 84 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 85, offset: 84 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 85, offset: 84 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/setFilter.js'
  },
  {
    name: 'setFlatMap',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'setFlatMap<\n' +
      '  T any,\n' +
      '  set Set<T>,\n' +
      '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
      '>(set, flatMapper) -> Promise|Set<T>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'setFlatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'setFlatMap<\n' +
              '  T any,\n' +
              '  set Set<T>,\n' +
              '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
              '>(set, flatMapper) -> Promise|Set<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 14, column: 4, offset: 451 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 14, column: 4, offset: 451 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/setFlatMap.js'
  },
  {
    name: 'setFlatten',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'setFlatten<T>(\n' +
      '  set Set<Monad<T>|Foldable<T>|T>,\n' +
      ') -> flattened Set<T>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'setFlatten',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'setFlatten<T>(\n' +
              '  set Set<Monad<T>|Foldable<T>|T>,\n' +
              ') -> flattened Set<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 12, column: 4, offset: 403 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 403 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/setFlatten.js'
  },
  {
    name: 'setMap',
    synopsis: '```coffeescript [specscript]\n' +
      'setMap<\n' +
      '  T any,\n' +
      '  value Set<T>,\n' +
      '  mapper T=>Promise|any,\n' +
      '>(value, mapper) -> Promise|Set\n' +
      '```',
    description: 'Apply a mapper concurrently to each element of a set, returning a set of results.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'setMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'setMap<\n' +
              '  T any,\n' +
              '  value Set<T>,\n' +
              '  mapper T=>Promise|any,\n' +
              '>(value, mapper) -> Promise|Set',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 122 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 122 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a mapper concurrently to each element of a set, returning a set of results.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 82, offset: 81 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 82, offset: 81 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 82, offset: 81 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/setMap.js'
  },
  {
    name: '_setMapPoolAsync',
    synopsis: '```coffeescript [specscript]\n' +
      '_setMapPoolAsync(\n' +
      '  s Set,\n' +
      '  iterator Iterator,\n' +
      '  concurrency number,\n' +
      '  f function,\n' +
      '  result Set,\n' +
      '  promises Set,\n' +
      ') -> result Promise<Set>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_setMapPoolAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_setMapPoolAsync(\n' +
              '  s Set,\n' +
              '  iterator Iterator,\n' +
              '  concurrency number,\n' +
              '  f function,\n' +
              '  result Set,\n' +
              '  promises Set,\n' +
              ') -> result Promise<Set>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 171 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 171 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/setMapPool.js'
  },
  {
    name: 'setMapPool',
    synopsis: '```coffeescript [specscript]\n' +
      'setMapPool(s Set, concurrency number, f function) -> Promise|Set\n' +
      '```',
    description: 'Apply a function `f` with limited concurrency to each element of a set `s`, returning an array of results.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'setMapPool',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'setMapPool(s Set, concurrency number, f function) -> Promise|Set',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 97 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 97 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a function ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              },
              {
                type: 'inlineCode',
                value: 'f',
                position: {
                  start: { line: 1, column: 18, offset: 17 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              },
              {
                type: 'text',
                value: ' with limited concurrency to each element of a set ',
                position: {
                  start: { line: 1, column: 21, offset: 20 },
                  end: { line: 1, column: 72, offset: 71 }
                }
              },
              {
                type: 'inlineCode',
                value: 's',
                position: {
                  start: { line: 1, column: 72, offset: 71 },
                  end: { line: 1, column: 75, offset: 74 }
                }
              },
              {
                type: 'text',
                value: ', returning an array of results.',
                position: {
                  start: { line: 1, column: 75, offset: 74 },
                  end: { line: 1, column: 107, offset: 106 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 107, offset: 106 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 107, offset: 106 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/setMapPool.js'
  },
  {
    name: 'setMapSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'type SetMapper = (\n' +
      '  value any,\n' +
      '  key any,\n' +
      '  collection Set\n' +
      ')=>(resultElement Promise|any)\n' +
      '\n' +
      'setMapSeries(set Set, f SetMapper) -> Promise|Set\n' +
      '```',
    description: 'Apply a mapper in series to each value of a set, returning a new set of mapped elements. Mapper may be asynchronous.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'setMapSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type SetMapper = (\n' +
              '  value any,\n' +
              '  key any,\n' +
              '  collection Set\n' +
              ')=>(resultElement Promise|any)\n' +
              '\n' +
              'setMapSeries(set Set, f SetMapper) -> Promise|Set',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 174 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 174 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a mapper in series to each value of a set, returning a new set of mapped elements. Mapper may be asynchronous.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 117, offset: 116 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 117, offset: 116 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 117, offset: 116 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/setMapSeries.js'
  },
  {
    name: 'sleep',
    synopsis: '```coffeescript [specscript]\n' +
      'sleep(time number) -> promiseThatResolvesAfterTime Promise\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'sleep',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'sleep(time number) -> promiseThatResolvesAfterTime Promise',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 91 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 91 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/sleep.js'
  },
  {
    name: 'spread2',
    synopsis: '```coffeescript [specscript]\n' +
      'spread2<\n' +
      '  func function,\n' +
      '  arg0 any,\n' +
      '  arg1 any,\n' +
      '>(func) -> spreading2 ([arg0, arg1])=>func(arg0, arg1)\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'spread2',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'spread2<\n' +
              '  func function,\n' +
              '  arg0 any,\n' +
              '  arg1 any,\n' +
              '>(func) -> spreading2 ([arg0, arg1])=>func(arg0, arg1)',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 137 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 137 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/spread2.js'
  },
  {
    name: '__streamWrite',
    synopsis: '```coffeescript [specscript]\n' +
      '__streamWrite<\n' +
      '  chunk string|Buffer|Uint8Array|any,\n' +
      '  encoding string,\n' +
      '  callback function,\n' +
      '  stream { write: (chunk, encoding?, callback?)=>() }\n' +
      '>(stream)(chunk, encoding?, callback?) -> stream\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '__streamWrite',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '__streamWrite<\n' +
              '  chunk string|Buffer|Uint8Array|any,\n' +
              '  encoding string,\n' +
              '  callback function,\n' +
              '  stream { write: (chunk, encoding?, callback?)=>() }\n' +
              '>(stream)(chunk, encoding?, callback?) -> stream',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 228 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 228 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/streamExtend.js'
  },
  {
    name: '_streamExtendExecutor',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream = { read: function, write: function }\n' +
      '\n' +
      '_streamExtendExecutor<\n' +
      '  resultStream Stream,\n' +
      '  stream Stream,\n' +
      '  resolve function,\n' +
      '  reject function,\n' +
      '>(resultStream, stream) -> executor (resolve, reject)=>()\n' +
      '```',
    note: 'optimizes function creation within _streamExtend',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_streamExtendExecutor',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 22, offset: 21 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 22, offset: 21 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 22, offset: 21 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream = { read: function, write: function }\n' +
              '\n' +
              '_streamExtendExecutor<\n' +
              '  resultStream Stream,\n' +
              '  stream Stream,\n' +
              '  resolve function,\n' +
              '  reject function,\n' +
              '>(resultStream, stream) -> executor (resolve, reject)=>()',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 238 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 238 }
        }
      },
      note: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'optimizes function creation within _streamExtend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 49, offset: 48 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 49, offset: 48 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 49, offset: 48 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/streamExtend.js'
  },
  {
    name: '_streamExtend',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream = { read: function, write: function }\n' +
      '\n' +
      '_streamExtend<\n' +
      '  resultStream Stream,\n' +
      '  stream Stream,\n' +
      '>(resultStream, stream) -> Promise<resultStream>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_streamExtend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream = { read: function, write: function }\n' +
              '\n' +
              '_streamExtend<\n' +
              '  resultStream Stream,\n' +
              '  stream Stream,\n' +
              '>(resultStream, stream) -> Promise<resultStream>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 182 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 182 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/streamExtend.js'
  },
  {
    name: 'streamExtend',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream = { read: function, write: function }\n' +
      '\n' +
      'streamExtend<\n' +
      '  stream Stream,\n' +
      '  values Stream|any,\n' +
      '>(stream, values) -> Promise|stream\n' +
      '```',
    TODO: 'maybe support `.read`',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'streamExtend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream = { read: function, write: function }\n' +
              '\n' +
              'streamExtend<\n' +
              '  stream Stream,\n' +
              '  values Stream|any,\n' +
              '>(stream, values) -> Promise|stream',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 166 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 166 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'maybe support ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              },
              {
                type: 'inlineCode',
                value: '.read',
                position: {
                  start: { line: 1, column: 15, offset: 14 },
                  end: { line: 1, column: 22, offset: 21 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 22, offset: 21 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 22, offset: 21 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/streamExtend.js'
  },
  {
    name: 'streamFlatExtend',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'streamFlatExtend<T>(\n' +
      '  stream Stream<T>,\n' +
      '  element <Monad<T>|Foldable<T>|T>\n' +
      ') -> stream\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'streamFlatExtend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'streamFlatExtend<T>(\n' +
              '  stream Stream<T>,\n' +
              '  element <Monad<T>|Foldable<T>|T>\n' +
              ') -> stream',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 13, column: 4, offset: 419 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 419 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/streamFlatExtend.js'
  },
  {
    name: 'streamFlatMap',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'streamFlatMap<T>(\n' +
      '  stream Stream<T>,\n' +
      '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
      ') -> Promise|Stream<T>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'streamFlatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'streamFlatMap<T>(\n' +
              '  stream Stream<T>,\n' +
              '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
              ') -> Promise|Stream<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 13, column: 4, offset: 440 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 440 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/streamFlatMap.js'
  },
  {
    name: 'streamWrite',
    synopsis: '```coffeescript [specscript]\n' +
      'streamWrite(\n' +
      '  stream Writable,\n' +
      '  chunk string|Buffer|Uint8Array|any,\n' +
      '  encoding string|undefined,\n' +
      '  callback function|undefined,\n' +
      ') -> stream\n' +
      '```',
    description: 'Call `.write` on a Node.js stream',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'streamWrite',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'streamWrite(\n' +
              '  stream Writable,\n' +
              '  chunk string|Buffer|Uint8Array|any,\n' +
              '  encoding string|undefined,\n' +
              '  callback function|undefined,\n' +
              ') -> stream',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 174 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 174 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Call ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              },
              {
                type: 'inlineCode',
                value: '.write',
                position: {
                  start: { line: 1, column: 6, offset: 5 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              },
              {
                type: 'text',
                value: ' on a Node.js stream',
                position: {
                  start: { line: 1, column: 14, offset: 13 },
                  end: { line: 1, column: 34, offset: 33 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 34, offset: 33 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 34, offset: 33 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/streamWrite.js'
  },
  {
    name: 'strictEqual',
    synopsis: '```coffeescript [specscript]\nstrictEqual(a any, b any) -> boolean\n```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'strictEqual',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'strictEqual(a any, b any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 69 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 69 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/strictEqual.js'
  },
  {
    name: 'stringMap',
    synopsis: '```coffeescript [specscript]\n' +
      'stringMap<\n' +
      '  character string,\n' +
      '  str String<character>,\n' +
      '  mapper character=>Promise|string|any,\n' +
      '>(str, mapper) -> stringWithCharactersMapped string\n' +
      '```',
    description: "Filter a string's characters by predicate.",
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'stringMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'stringMap<\n' +
              '  character string,\n' +
              '  str String<character>,\n' +
              '  mapper character=>Promise|string|any,\n' +
              '>(str, mapper) -> stringWithCharactersMapped string',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 180 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 180 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "Filter a string's characters by predicate.",
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 43, offset: 42 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 43, offset: 42 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 43, offset: 42 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/stringFilter.js'
  },
  {
    name: 'arrayFlattenToString',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'arrayFlattenToString<T>(\n' +
      '  array Array<Monad<T>|Foldable<T>|T>,\n' +
      ') -> String<T>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayFlattenToString',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'arrayFlattenToString<T>(\n' +
              '  array Array<Monad<T>|Foldable<T>|T>,\n' +
              ') -> String<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 12, column: 4, offset: 410 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 410 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/stringFlatMap.js'
  },
  {
    name: 'stringFlatMap',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
      '\n' +
      'stringFlatMap<T>(\n' +
      '  string String<T>,\n' +
      '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
      ') -> Promise|String<T>\n' +
      '```',
    related: 'arrayFlatMap',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'stringFlatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<Promise|T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T> }|Object<T>\n' +
              '\n' +
              'stringFlatMap<T>(\n' +
              '  string String<T>,\n' +
              '  flatMapper T=>Promise|Monad<T>|Foldable<T>|T,\n' +
              ') -> Promise|String<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 13, column: 4, offset: 440 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 440 }
        }
      },
      related: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayFlatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/stringFlatMap.js'
  },
  {
    name: 'stringMap',
    synopsis: '```coffeescript [specscript]\n' +
      'stringMap<\n' +
      '  character string,\n' +
      '  str String<character>,\n' +
      '  mapper character=>Promise|string|any,\n' +
      '>(str, mapper) -> stringWithCharactersMapped string\n' +
      '```',
    description: 'Apply a mapper concurrently to each character of a string, returning a string result. mapper function may be asynchronous.',
    related: 'stringFlatMap',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'stringMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'stringMap<\n' +
              '  character string,\n' +
              '  str String<character>,\n' +
              '  mapper character=>Promise|string|any,\n' +
              '>(str, mapper) -> stringWithCharactersMapped string',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 180 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 180 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a mapper concurrently to each character of a string, returning a string result. mapper function may be asynchronous.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 123, offset: 122 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 123, offset: 122 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 123, offset: 122 }
        }
      },
      related: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'stringFlatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/stringMap.js'
  },
  {
    name: 'stringMapPool',
    synopsis: '```coffeescript [specscript]\n' +
      'stringMapPool(s string, concurrency number, f function) -> Promise|string\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'stringMapPool',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'stringMapPool(s string, concurrency number, f function) -> Promise|string',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 106 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 106 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/stringMapPool.js'
  },
  {
    name: 'stringMapSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'stringMapSeries<\n' +
      '  character string,\n' +
      '  str String<character>,\n' +
      '  mapper character=>Promise|string|any,\n' +
      '>(str, mapper) -> stringWithCharactersMapped string\n' +
      '```',
    description: 'Apply a mapper function in series to each character of a string, returning a string result. mapper function may be asynchronous.',
    related: 'stringFlatMap',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'stringMapSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'stringMapSeries<\n' +
              '  character string,\n' +
              '  str String<character>,\n' +
              '  mapper character=>Promise|string|any,\n' +
              '>(str, mapper) -> stringWithCharactersMapped string',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 186 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 186 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Apply a mapper function in series to each character of a string, returning a string result. mapper function may be asynchronous.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 129, offset: 128 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 129, offset: 128 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 129, offset: 128 }
        }
      },
      related: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'stringFlatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/stringMapSeries.js'
  },
  {
    name: 'symbolAsyncIterator',
    synopsis: 'symbolAsyncIterator = Symbol.asyncIterator',
    description: 'Dereferenced `Symbol.asyncIterator`',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'symbolAsyncIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'symbolAsyncIterator = Symbol.asyncIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 43, offset: 42 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 43, offset: 42 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 43, offset: 42 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Dereferenced ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              },
              {
                type: 'inlineCode',
                value: 'Symbol.asyncIterator',
                position: {
                  start: { line: 1, column: 14, offset: 13 },
                  end: { line: 1, column: 36, offset: 35 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 36, offset: 35 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 36, offset: 35 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/symbolAsyncIterator.js'
  },
  {
    name: 'symbolIterator',
    synopsis: 'symbolIterator = Symbol.iterator',
    description: 'Dereferenced `Symbol.iterator`',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'symbolIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'symbolIterator = Symbol.iterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 33, offset: 32 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 33, offset: 32 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 33, offset: 32 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Dereferenced ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              },
              {
                type: 'inlineCode',
                value: 'Symbol.iterator',
                position: {
                  start: { line: 1, column: 14, offset: 13 },
                  end: { line: 1, column: 31, offset: 30 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 31, offset: 30 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 31, offset: 30 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/symbolIterator.js'
  },
  {
    name: 'tapSync',
    synopsis: '```coffeescript [specscript]\n' +
      'tapSync<\n' +
      '  tapper function,\n' +
      '  args ...any,\n' +
      '>(tapper)(...args) -> args[0]\n' +
      '```',
    description: 'Call a function with arguments, returning the first argument. Promises are not handled.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'tapSync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'tapSync<\n' +
              '  tapper function,\n' +
              '  args ...any,\n' +
              '>(tapper)(...args) -> args[0]',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 105 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 105 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Call a function with arguments, returning the first argument. Promises are not handled.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 88, offset: 87 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 88, offset: 87 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 88, offset: 87 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/tapSync.js'
  },
  {
    name: 'thunkConditional',
    synopsis: '```coffeescript [specscript]\n' +
      'thunkConditional<\n' +
      '  conditionalExpression boolean,\n' +
      '  thunkOnTruthy ()=>any,\n' +
      '  thunkOnFalsy ()=>any,\n' +
      '>(conditionalExpression, thunkOnTruthy, thunkOnFalsy) -> any\n' +
      '```',
    description: 'Like the conditional operator `a ? b : c` but for thunks.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'thunkConditional',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'thunkConditional<\n' +
              '  conditionalExpression boolean,\n' +
              '  thunkOnTruthy ()=>any,\n' +
              '  thunkOnFalsy ()=>any,\n' +
              '>(conditionalExpression, thunkOnTruthy, thunkOnFalsy) -> any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 193 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 193 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Like the conditional operator ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 31, offset: 30 }
                }
              },
              {
                type: 'inlineCode',
                value: 'a ? b : c',
                position: {
                  start: { line: 1, column: 31, offset: 30 },
                  end: { line: 1, column: 42, offset: 41 }
                }
              },
              {
                type: 'text',
                value: ' but for thunks.',
                position: {
                  start: { line: 1, column: 42, offset: 41 },
                  end: { line: 1, column: 58, offset: 57 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 58, offset: 57 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 58, offset: 57 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/thunkConditional.js'
  },
  {
    name: 'thunkify1',
    synopsis: '```coffeescript [specscript]\n' +
      'thunkify1<\n' +
      '  arg0 any,\n' +
      '  func arg0=>any,\n' +
      '>(func, arg0) -> thunk ()=>func(arg0)\n' +
      '```',
    description: 'Create a thunk from a function and one argument.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'thunkify1',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'thunkify1<\n' +
              '  arg0 any,\n' +
              '  func arg0=>any,\n' +
              '>(func, arg0) -> thunk ()=>func(arg0)',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 111 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 111 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a thunk from a function and one argument.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 49, offset: 48 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 49, offset: 48 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 49, offset: 48 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/thunkify1.js'
  },
  {
    name: 'thunkify2',
    synopsis: '```coffeescript [specscript]\n' +
      'thunkify2<\n' +
      '  arg0 any,\n' +
      '  arg1 any,\n' +
      '  func (arg0, arg1)=>any,\n' +
      '>(func, arg0, arg1) -> thunk ()=>func(arg0, arg1)\n' +
      '```',
    description: 'Create a thunk from a function and two arguments.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'thunkify2',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'thunkify2<\n' +
              '  arg0 any,\n' +
              '  arg1 any,\n' +
              '  func (arg0, arg1)=>any,\n' +
              '>(func, arg0, arg1) -> thunk ()=>func(arg0, arg1)',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 143 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 143 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a thunk from a function and two arguments.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 50, offset: 49 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 50, offset: 49 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 50, offset: 49 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/thunkify2.js'
  },
  {
    name: 'thunkify3',
    synopsis: '```coffeescript [specscript]\n' +
      'thunkify3<\n' +
      '  arg0 any,\n' +
      '  arg1 any,\n' +
      '  arg2 any,\n' +
      '  func (arg0, arg1, arg2)=>any,\n' +
      '>(func, arg0, arg1, arg2) -> thunk ()=>func(arg0, arg1, arg2)\n' +
      '```',
    description: 'Create a thunk from a function and three arguments.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'thunkify3',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'thunkify3<\n' +
              '  arg0 any,\n' +
              '  arg1 any,\n' +
              '  arg2 any,\n' +
              '  func (arg0, arg1, arg2)=>any,\n' +
              '>(func, arg0, arg1, arg2) -> thunk ()=>func(arg0, arg1, arg2)',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 173 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 173 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a thunk from a function and three arguments.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 52, offset: 51 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 52, offset: 51 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 52, offset: 51 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/thunkify3.js'
  },
  {
    name: 'thunkify4',
    synopsis: '```coffeescript [specscript]\n' +
      'thunkify4<\n' +
      '  arg0 any,\n' +
      '  arg1 any,\n' +
      '  arg2 any,\n' +
      '  arg3 any,\n' +
      '  func (arg0, arg1, arg2, arg3)=>any,\n' +
      '>(func, arg0, arg1, arg2, arg3) -> thunk ()=>func(arg0, arg1, arg2, arg3)\n' +
      '```',
    description: 'Create a thunk from a function and four arguments.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'thunkify4',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'thunkify4<\n' +
              '  arg0 any,\n' +
              '  arg1 any,\n' +
              '  arg2 any,\n' +
              '  arg3 any,\n' +
              '  func (arg0, arg1, arg2, arg3)=>any,\n' +
              '>(func, arg0, arg1, arg2, arg3) -> thunk ()=>func(arg0, arg1, arg2, arg3)',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 203 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 203 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a thunk from a function and four arguments.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 51, offset: 50 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 51, offset: 50 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 51, offset: 50 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/thunkify4.js'
  },
  {
    name: 'thunkify5',
    synopsis: '```coffeescript [specscript]\n' +
      'thunkify5<\n' +
      '  arg0 any,\n' +
      '  arg1 any,\n' +
      '  arg2 any,\n' +
      '  arg3 any,\n' +
      '  arg4 any,\n' +
      '  func (arg0, arg1, arg2, arg3, arg4)=>any,\n' +
      '>(func, arg0, arg1, arg2, arg3, arg4) -> thunk ()=>func(arg0, arg1, arg2, arg3, arg4)\n' +
      '```',
    description: 'Create a thunk from a function and five arguments.',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'thunkify5',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'thunkify5<\n' +
              '  arg0 any,\n' +
              '  arg1 any,\n' +
              '  arg2 any,\n' +
              '  arg3 any,\n' +
              '  arg4 any,\n' +
              '  func (arg0, arg1, arg2, arg3, arg4)=>any,\n' +
              '>(func, arg0, arg1, arg2, arg3, arg4) -> thunk ()=>func(arg0, arg1, arg2, arg3, arg4)',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 233 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 233 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a thunk from a function and five arguments.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 51, offset: 50 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 51, offset: 50 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 51, offset: 50 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/thunkify5.js'
  },
  {
    name: 'thunkifyArgs',
    synopsis: [
      '```coffeescript [specscript]\n' +
        'thunkifyArgs(func function, args Array) -> ()=>func(...args)\n' +
        '```',
      'Create a thunk from a function and an arguments array.'
    ],
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'thunkifyArgs',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/thunkifyArgs.js'
  },
  {
    name: 'timeInLoop',
    synopsis: '```coffeescript [specscript]\n' +
      'timeInLoop(description string, loopCount number, fn function, options? {\n' +
      '  silent?: boolean,\n' +
      '}) -> undefined\n' +
      '```',
    description: 'Logs the amount of time required for a function to run a certain number of times\n' +
      '\n' +
      '```js\n' +
      "timeInLoop('hello', 1e6, () => 'hello') // hello: 1e+6: 3.474ms\n" +
      '```\n' +
      '\n' +
      'Reference: https://gist.github.com/funfunction/91b5876a5f562e1e352aed0fcabc3858',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'timeInLoop',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'timeInLoop(description string, loopCount number, fn function, options? {\n' +
              '  silent?: boolean,\n' +
              '}) -> undefined',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 141 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 141 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Logs the amount of time required for a function to run a certain number of times',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 81, offset: 80 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 81, offset: 80 }
            }
          },
          {
            type: 'code',
            lang: 'js',
            meta: null,
            value: "timeInLoop('hello', 1e6, () => 'hello') // hello: 1e+6: 3.474ms",
            position: {
              start: { line: 3, column: 1, offset: 82 },
              end: { line: 5, column: 4, offset: 155 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Reference: https://gist.github.com/funfunction/91b5876a5f562e1e352aed0fcabc3858',
                position: {
                  start: { line: 7, column: 1, offset: 157 },
                  end: { line: 7, column: 80, offset: 236 }
                }
              }
            ],
            position: {
              start: { line: 7, column: 1, offset: 157 },
              end: { line: 7, column: 80, offset: 236 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 80, offset: 236 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/timeInLoop.js'
  },
  {
    name: 'timeInLoopAsync',
    synopsis: '```coffeescript [specscript]\n' +
      'timeInLoop.async(description string, loopCount number, fn function, options? {\n' +
      '  silent?: boolean,\n' +
      '}) -> undefined\n' +
      '```',
    description: 'Like timeInLoop, but every call is awaited\n' +
      '\n' +
      '```js\n' +
      "timeInLoop.async('async hello', 1e6, async () => 'hello') // async hello: 1e+6: 116.006ms\n" +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'timeInLoopAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'timeInLoop.async(description string, loopCount number, fn function, options? {\n' +
              '  silent?: boolean,\n' +
              '}) -> undefined',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 147 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 147 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Like timeInLoop, but every call is awaited',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 43, offset: 42 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 43, offset: 42 }
            }
          },
          {
            type: 'code',
            lang: 'js',
            meta: null,
            value: "timeInLoop.async('async hello', 1e6, async () => 'hello') // async hello: 1e+6: 116.006ms",
            position: {
              start: { line: 3, column: 1, offset: 44 },
              end: { line: 5, column: 4, offset: 143 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 143 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/_internal/timeInLoopAsync.js'
  },
  {
    name: '_allValues',
    synopsis: '```coffeescript [specscript]\n' +
      '_allValues(values Array<Promise|any>) -> Promise<Array>\n' +
      '_allValues(values Object<Promise|any>) -> Promise<Object>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_allValues',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_allValues(values Array<Promise|any>) -> Promise<Array>\n' +
              '_allValues(values Object<Promise|any>) -> Promise<Object>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 4, offset: 146 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 4, offset: 146 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/all.js'
  },
  {
    name: 'all',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncResolver = (...args)=>Promise|any\n' +
      '\n' +
      'arrayResolversOrPromisesOrValues Array<SyncOrAsyncResolver|Promise|any>\n' +
      'objectResolversOrPromisesOrValues Object<SyncOrAsyncResolver|Promise|any>\n' +
      '\n' +
      'all(arrayValues Promise|Array<Promise|any>) -> arrayResult Promise|Array\n' +
      'all(...argsOrPromises, arrayResolversOrPromisesOrValues) -> arrayResult Promise|Array\n' +
      'all(arrayResolversOrPromisesOrValues)(...args) -> arrayResult Promise|Array\n' +
      '\n' +
      'all(objectValues Promise|Object<Promise|any>) -> objectResult Promise|Object\n' +
      'all(...argsOrPromises, objectResolversOrPromisesOrValues) -> objectResult Promise|Object\n' +
      'all(objectResolversOrPromisesOrValues)(...args) -> objectResult Promise|Object\n' +
      '```',
    description: 'Constructs an array if provided an array of resolvers, promises, values, or a mix thereof. Constructs an object if provided an object of resolvers, promises, values, or a mix thereof. If provided any resolvers, `all` returns a function that constructs the array or object. Otherwise, if none of the provided values in the array or object are functions, `all` returns the constructed array or object directly.\n' +
      '\n' +
      '`all` constructs an array from resolvers.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const createArrayOfGreetingsFor = all([\n' +
      '  name => `Hi ${name}`,\n' +
      '  name => `Hey ${name}`,\n' +
      '  name => `Hello ${name}`,\n' +
      '])\n' +
      '\n' +
      "const arrayOfGreetingsFor1 = createArrayOfGreetingsFor('1')\n" +
      '\n' +
      'console.log(arrayOfGreetingsFor1)\n' +
      "// ['Hi 1', 'Hey 1', 'Hello 1']\n" +
      '```\n' +
      '\n' +
      'If any provided values are promises, `all` returns a promise.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const promise1 = all([\n' +
      '  Promise.resolve(1),\n' +
      '  Promise.resolve(2),\n' +
      '  3,\n' +
      '])\n' +
      'promise1.then(console.log) // [1, 2, 3]\n' +
      '\n' +
      'const promise2 = all({\n' +
      '  a: 1,\n' +
      '  b: Promise.resolve(2),\n' +
      '  c: Promise.resolve(3),\n' +
      '})\n' +
      'promise2.then(console.log) // { a: 1, b: 2, c: 3 }\n' +
      '```\n' +
      '\n' +
      'If any provided resolvers are asynchronous, `all` returns a promise. `all` can be used in a pipeline to compose and manpulate data.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const identity = value => value\n' +
      '\n' +
      'const userbase = new Map()\n' +
      "userbase.set('1', { _id: 1, name: 'John' })\n" +
      '\n' +
      'const getUserByID = async id => userbase.get(id)\n' +
      '\n' +
      'const getAndLogUserById = pipe([\n' +
      '  all({\n' +
      '    id: identity,\n' +
      '    user: getUserByID,\n' +
      '  }),\n' +
      '  tap(({ id, user }) => {\n' +
      '    console.log(`Got user ${JSON.stringify(user)} by id ${id}`)\n' +
      '  }),\n' +
      '])\n' +
      '\n' +
      `getAndLogUserById('1') // Got user {"_id":1,"name":"John"} by id 1\n` +
      '```\n' +
      '\n' +
      'Provided no resolvers, `all` returns the constructed array or object.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'all({}, {\n' +
      '  a: Promise.resolve(1),\n' +
      '  b: 2,\n' +
      '  c: () => 3,\n' +
      '  d: async () => 4,\n' +
      '}).then(console.log) // { a: 1, b: 2, c: 3, d: 4 }\n' +
      '\n' +
      'all([], [\n' +
      '  Promise.resolve(1),\n' +
      '  2,\n' +
      '  () => 3,\n' +
      '  async () => 4,\n' +
      ']).then(console.log) // [1, 2, 3, 4]\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'all(Promise.resolve({ a: 1 }), [\n' +
      '  obj => obj.a + 1,\n' +
      '  obj => obj.a + 2,\n' +
      '  obj => obj.a + 3,\n' +
      ']).then(console.log) // [2, 3, 4]\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [assign](/docs/assign)\n' +
      ' * [get](/docs/get)\n' +
      ' * [set](/docs/set)\n' +
      ' * [pick](/docs/pick)\n' +
      ' * [omit](/docs/omit)\n' +
      ' * [forEach](/docs/forEach)',
    execution: 'concurrent',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'all',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 4, offset: 3 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 4, offset: 3 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncResolver = (...args)=>Promise|any\n' +
              '\n' +
              'arrayResolversOrPromisesOrValues Array<SyncOrAsyncResolver|Promise|any>\n' +
              'objectResolversOrPromisesOrValues Object<SyncOrAsyncResolver|Promise|any>\n' +
              '\n' +
              'all(arrayValues Promise|Array<Promise|any>) -> arrayResult Promise|Array\n' +
              'all(...argsOrPromises, arrayResolversOrPromisesOrValues) -> arrayResult Promise|Array\n' +
              'all(arrayResolversOrPromisesOrValues)(...args) -> arrayResult Promise|Array\n' +
              '\n' +
              'all(objectValues Promise|Object<Promise|any>) -> objectResult Promise|Object\n' +
              'all(...argsOrPromises, objectResolversOrPromisesOrValues) -> objectResult Promise|Object\n' +
              'all(objectResolversOrPromisesOrValues)(...args) -> objectResult Promise|Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 17, column: 4, offset: 762 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 17, column: 4, offset: 762 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Constructs an array if provided an array of resolvers, promises, values, or a mix thereof. Constructs an object if provided an object of resolvers, promises, values, or a mix thereof. If provided any resolvers, ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 212, offset: 211 }
                }
              },
              {
                type: 'inlineCode',
                value: 'all',
                position: {
                  start: { line: 1, column: 212, offset: 211 },
                  end: { line: 1, column: 217, offset: 216 }
                }
              },
              {
                type: 'text',
                value: ' returns a function that constructs the array or object. Otherwise, if none of the provided values in the array or object are functions, ',
                position: {
                  start: { line: 1, column: 217, offset: 216 },
                  end: { line: 1, column: 354, offset: 353 }
                }
              },
              {
                type: 'inlineCode',
                value: 'all',
                position: {
                  start: { line: 1, column: 354, offset: 353 },
                  end: { line: 1, column: 359, offset: 358 }
                }
              },
              {
                type: 'text',
                value: ' returns the constructed array or object directly.',
                position: {
                  start: { line: 1, column: 359, offset: 358 },
                  end: { line: 1, column: 409, offset: 408 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 409, offset: 408 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'all',
                position: {
                  start: { line: 3, column: 1, offset: 410 },
                  end: { line: 3, column: 6, offset: 415 }
                }
              },
              {
                type: 'text',
                value: ' constructs an array from resolvers.',
                position: {
                  start: { line: 3, column: 6, offset: 415 },
                  end: { line: 3, column: 42, offset: 451 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 410 },
              end: { line: 3, column: 42, offset: 451 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const createArrayOfGreetingsFor = all([\n' +
              '  name => `Hi ${name}`,\n' +
              '  name => `Hey ${name}`,\n' +
              '  name => `Hello ${name}`,\n' +
              '])\n' +
              '\n' +
              "const arrayOfGreetingsFor1 = createArrayOfGreetingsFor('1')\n" +
              '\n' +
              'console.log(arrayOfGreetingsFor1)\n' +
              "// ['Hi 1', 'Hey 1', 'Hello 1']",
            position: {
              start: { line: 5, column: 1, offset: 453 },
              end: { line: 16, column: 4, offset: 730 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If any provided values are promises, ',
                position: {
                  start: { line: 18, column: 1, offset: 732 },
                  end: { line: 18, column: 38, offset: 769 }
                }
              },
              {
                type: 'inlineCode',
                value: 'all',
                position: {
                  start: { line: 18, column: 38, offset: 769 },
                  end: { line: 18, column: 43, offset: 774 }
                }
              },
              {
                type: 'text',
                value: ' returns a promise.',
                position: {
                  start: { line: 18, column: 43, offset: 774 },
                  end: { line: 18, column: 62, offset: 793 }
                }
              }
            ],
            position: {
              start: { line: 18, column: 1, offset: 732 },
              end: { line: 18, column: 62, offset: 793 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const promise1 = all([\n' +
              '  Promise.resolve(1),\n' +
              '  Promise.resolve(2),\n' +
              '  3,\n' +
              '])\n' +
              'promise1.then(console.log) // [1, 2, 3]\n' +
              '\n' +
              'const promise2 = all({\n' +
              '  a: 1,\n' +
              '  b: Promise.resolve(2),\n' +
              '  c: Promise.resolve(3),\n' +
              '})\n' +
              'promise2.then(console.log) // { a: 1, b: 2, c: 3 }',
            position: {
              start: { line: 20, column: 1, offset: 795 },
              end: { line: 34, column: 4, offset: 1076 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If any provided resolvers are asynchronous, ',
                position: {
                  start: { line: 36, column: 1, offset: 1078 },
                  end: { line: 36, column: 45, offset: 1122 }
                }
              },
              {
                type: 'inlineCode',
                value: 'all',
                position: {
                  start: { line: 36, column: 45, offset: 1122 },
                  end: { line: 36, column: 50, offset: 1127 }
                }
              },
              {
                type: 'text',
                value: ' returns a promise. ',
                position: {
                  start: { line: 36, column: 50, offset: 1127 },
                  end: { line: 36, column: 70, offset: 1147 }
                }
              },
              {
                type: 'inlineCode',
                value: 'all',
                position: {
                  start: { line: 36, column: 70, offset: 1147 },
                  end: { line: 36, column: 75, offset: 1152 }
                }
              },
              {
                type: 'text',
                value: ' can be used in a pipeline to compose and manpulate data.',
                position: {
                  start: { line: 36, column: 75, offset: 1152 },
                  end: { line: 36, column: 132, offset: 1209 }
                }
              }
            ],
            position: {
              start: { line: 36, column: 1, offset: 1078 },
              end: { line: 36, column: 132, offset: 1209 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const identity = value => value\n' +
              '\n' +
              'const userbase = new Map()\n' +
              "userbase.set('1', { _id: 1, name: 'John' })\n" +
              '\n' +
              'const getUserByID = async id => userbase.get(id)\n' +
              '\n' +
              'const getAndLogUserById = pipe([\n' +
              '  all({\n' +
              '    id: identity,\n' +
              '    user: getUserByID,\n' +
              '  }),\n' +
              '  tap(({ id, user }) => {\n' +
              '    console.log(`Got user ${JSON.stringify(user)} by id ${id}`)\n' +
              '  }),\n' +
              '])\n' +
              '\n' +
              `getAndLogUserById('1') // Got user {"_id":1,"name":"John"} by id 1`,
            position: {
              start: { line: 38, column: 1, offset: 1211 },
              end: { line: 57, column: 4, offset: 1651 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Provided no resolvers, ',
                position: {
                  start: { line: 59, column: 1, offset: 1653 },
                  end: { line: 59, column: 24, offset: 1676 }
                }
              },
              {
                type: 'inlineCode',
                value: 'all',
                position: {
                  start: { line: 59, column: 24, offset: 1676 },
                  end: { line: 59, column: 29, offset: 1681 }
                }
              },
              {
                type: 'text',
                value: ' returns the constructed array or object.',
                position: {
                  start: { line: 59, column: 29, offset: 1681 },
                  end: { line: 59, column: 70, offset: 1722 }
                }
              }
            ],
            position: {
              start: { line: 59, column: 1, offset: 1653 },
              end: { line: 59, column: 70, offset: 1722 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'all({}, {\n' +
              '  a: Promise.resolve(1),\n' +
              '  b: 2,\n' +
              '  c: () => 3,\n' +
              '  d: async () => 4,\n' +
              '}).then(console.log) // { a: 1, b: 2, c: 3, d: 4 }\n' +
              '\n' +
              'all([], [\n' +
              '  Promise.resolve(1),\n' +
              '  2,\n' +
              '  () => 3,\n' +
              '  async () => 4,\n' +
              ']).then(console.log) // [1, 2, 3, 4]',
            position: {
              start: { line: 61, column: 1, offset: 1724 },
              end: { line: 75, column: 4, offset: 1985 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 77, column: 1, offset: 1987 },
                  end: { line: 77, column: 148, offset: 2134 }
                }
              }
            ],
            position: {
              start: { line: 77, column: 1, offset: 1987 },
              end: { line: 77, column: 148, offset: 2134 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'all(Promise.resolve({ a: 1 }), [\n' +
              '  obj => obj.a + 1,\n' +
              '  obj => obj.a + 2,\n' +
              '  obj => obj.a + 3,\n' +
              ']).then(console.log) // [2, 3, 4]',
            position: {
              start: { line: 79, column: 1, offset: 2136 },
              end: { line: 85, column: 4, offset: 2293 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 87, column: 1, offset: 2295 },
                  end: { line: 87, column: 10, offset: 2304 }
                }
              }
            ],
            position: {
              start: { line: 87, column: 1, offset: 2295 },
              end: { line: 87, column: 10, offset: 2304 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 88, column: 5, offset: 2309 },
                              end: { line: 88, column: 9, offset: 2313 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 88, column: 4, offset: 2308 },
                          end: { line: 88, column: 22, offset: 2326 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 88, column: 4, offset: 2308 },
                      end: { line: 88, column: 22, offset: 2326 }
                    }
                  }
                ],
                position: {
                  start: { line: 88, column: 2, offset: 2306 },
                  end: { line: 88, column: 22, offset: 2326 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/assign',
                        children: [
                          {
                            type: 'text',
                            value: 'assign',
                            position: {
                              start: { line: 89, column: 5, offset: 2331 },
                              end: { line: 89, column: 11, offset: 2337 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 89, column: 4, offset: 2330 },
                          end: { line: 89, column: 26, offset: 2352 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 89, column: 4, offset: 2330 },
                      end: { line: 89, column: 26, offset: 2352 }
                    }
                  }
                ],
                position: {
                  start: { line: 89, column: 2, offset: 2328 },
                  end: { line: 89, column: 26, offset: 2352 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/get',
                        children: [
                          {
                            type: 'text',
                            value: 'get',
                            position: {
                              start: { line: 90, column: 5, offset: 2357 },
                              end: { line: 90, column: 8, offset: 2360 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 90, column: 4, offset: 2356 },
                          end: { line: 90, column: 20, offset: 2372 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 90, column: 4, offset: 2356 },
                      end: { line: 90, column: 20, offset: 2372 }
                    }
                  }
                ],
                position: {
                  start: { line: 90, column: 2, offset: 2354 },
                  end: { line: 90, column: 20, offset: 2372 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/set',
                        children: [
                          {
                            type: 'text',
                            value: 'set',
                            position: {
                              start: { line: 91, column: 5, offset: 2377 },
                              end: { line: 91, column: 8, offset: 2380 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 91, column: 4, offset: 2376 },
                          end: { line: 91, column: 20, offset: 2392 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 91, column: 4, offset: 2376 },
                      end: { line: 91, column: 20, offset: 2392 }
                    }
                  }
                ],
                position: {
                  start: { line: 91, column: 2, offset: 2374 },
                  end: { line: 91, column: 20, offset: 2392 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pick',
                        children: [
                          {
                            type: 'text',
                            value: 'pick',
                            position: {
                              start: { line: 92, column: 5, offset: 2397 },
                              end: { line: 92, column: 9, offset: 2401 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 92, column: 4, offset: 2396 },
                          end: { line: 92, column: 22, offset: 2414 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 92, column: 4, offset: 2396 },
                      end: { line: 92, column: 22, offset: 2414 }
                    }
                  }
                ],
                position: {
                  start: { line: 92, column: 2, offset: 2394 },
                  end: { line: 92, column: 22, offset: 2414 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/omit',
                        children: [
                          {
                            type: 'text',
                            value: 'omit',
                            position: {
                              start: { line: 93, column: 5, offset: 2419 },
                              end: { line: 93, column: 9, offset: 2423 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 93, column: 4, offset: 2418 },
                          end: { line: 93, column: 22, offset: 2436 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 93, column: 4, offset: 2418 },
                      end: { line: 93, column: 22, offset: 2436 }
                    }
                  }
                ],
                position: {
                  start: { line: 93, column: 2, offset: 2416 },
                  end: { line: 93, column: 22, offset: 2436 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 94, column: 5, offset: 2441 },
                              end: { line: 94, column: 12, offset: 2448 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 94, column: 4, offset: 2440 },
                          end: { line: 94, column: 28, offset: 2464 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 94, column: 4, offset: 2440 },
                      end: { line: 94, column: 28, offset: 2464 }
                    }
                  }
                ],
                position: {
                  start: { line: 94, column: 2, offset: 2438 },
                  end: { line: 94, column: 28, offset: 2464 }
                }
              }
            ],
            position: {
              start: { line: 88, column: 2, offset: 2306 },
              end: { line: 94, column: 28, offset: 2464 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 94, column: 28, offset: 2464 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'concurrent',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/all.js'
  },
  {
    name: 'all.series',
    synopsis: '```coffeescript [specscript]\n' +
      'all.series(...args, funcsArray Array<function>) -> result Promise|Array\n' +
      '\n' +
      'all.series(funcsArray Array<function>)(...args) -> result Promise|Array\n' +
      '```',
    description: '`all` with serial execution.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const sleep = ms => () => new Promise(resolve => setTimeout(resolve, ms))\n' +
      '\n' +
      'all.series([\n' +
      "  greeting => console.log(greeting + ' world'),\n" +
      '  sleep(1000),\n' +
      "  greeting => console.log(greeting + ' mom'),\n" +
      '  sleep(1000),\n' +
      "  greeting => console.log(greeting + ' goodbye'),\n" +
      "])('hello') // hello world\n" +
      '            // hello mom\n' +
      '            // hello goodbye\n' +
      '```',
    execution: 'series',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'all.series',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'all.series(...args, funcsArray Array<function>) -> result Promise|Array\n' +
              '\n' +
              'all.series(funcsArray Array<function>)(...args) -> result Promise|Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 177 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 177 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'all',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              },
              {
                type: 'text',
                value: ' with serial execution.',
                position: {
                  start: { line: 1, column: 6, offset: 5 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const sleep = ms => () => new Promise(resolve => setTimeout(resolve, ms))\n' +
              '\n' +
              'all.series([\n' +
              "  greeting => console.log(greeting + ' world'),\n" +
              '  sleep(1000),\n' +
              "  greeting => console.log(greeting + ' mom'),\n" +
              '  sleep(1000),\n' +
              "  greeting => console.log(greeting + ' goodbye'),\n" +
              "])('hello') // hello world\n" +
              '            // hello mom\n' +
              '            // hello goodbye',
            position: {
              start: { line: 3, column: 1, offset: 30 },
              end: { line: 15, column: 4, offset: 403 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 15, column: 4, offset: 403 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'series',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/all.js'
  },
  {
    name: 'always',
    synopsis: '```coffeescript [specscript]\nalways(value any) -> getter ()=>value\n```',
    description: 'Creates a function from a value that always returns the provided value.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const always5 = always(5)\n' +
      '\n' +
      'console.log(always5()) // 5\n' +
      'console.log(always5()) // 5\n' +
      'console.log(always5()) // 5\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [eq](/docs/eq)\n' +
      ' * [thunkify](/docs/thunkify)\n' +
      ' * [curry](/docs/curry)\n' +
      ' * [__](/docs/__)\n' +
      ' * [Transducer.map](/docs/Transducer.map)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'always',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'always(value any) -> getter ()=>value',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 70 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 70 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Creates a function from a value that always returns the provided value.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 72, offset: 71 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 72, offset: 71 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const always5 = always(5)\n' +
              '\n' +
              'console.log(always5()) // 5\n' +
              'console.log(always5()) // 5\n' +
              'console.log(always5()) // 5',
            position: {
              start: { line: 3, column: 1, offset: 73 },
              end: { line: 9, column: 4, offset: 214 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 11, column: 1, offset: 216 },
                  end: { line: 11, column: 10, offset: 225 }
                }
              }
            ],
            position: {
              start: { line: 11, column: 1, offset: 216 },
              end: { line: 11, column: 10, offset: 225 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/eq',
                        children: [
                          {
                            type: 'text',
                            value: 'eq',
                            position: {
                              start: { line: 12, column: 5, offset: 230 },
                              end: { line: 12, column: 7, offset: 232 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 12, column: 4, offset: 229 },
                          end: { line: 12, column: 18, offset: 243 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 12, column: 4, offset: 229 },
                      end: { line: 12, column: 18, offset: 243 }
                    }
                  }
                ],
                position: {
                  start: { line: 12, column: 2, offset: 227 },
                  end: { line: 12, column: 18, offset: 243 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 13, column: 5, offset: 248 },
                              end: { line: 13, column: 13, offset: 256 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 13, column: 4, offset: 247 },
                          end: { line: 13, column: 30, offset: 273 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 13, column: 4, offset: 247 },
                      end: { line: 13, column: 30, offset: 273 }
                    }
                  }
                ],
                position: {
                  start: { line: 13, column: 2, offset: 245 },
                  end: { line: 13, column: 30, offset: 273 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/curry',
                        children: [
                          {
                            type: 'text',
                            value: 'curry',
                            position: {
                              start: { line: 14, column: 5, offset: 278 },
                              end: { line: 14, column: 10, offset: 283 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 14, column: 4, offset: 277 },
                          end: { line: 14, column: 24, offset: 297 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 14, column: 4, offset: 277 },
                      end: { line: 14, column: 24, offset: 297 }
                    }
                  }
                ],
                position: {
                  start: { line: 14, column: 2, offset: 275 },
                  end: { line: 14, column: 24, offset: 297 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/__',
                        children: [
                          {
                            type: 'text',
                            value: '__',
                            position: {
                              start: { line: 15, column: 5, offset: 302 },
                              end: { line: 15, column: 7, offset: 304 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 15, column: 4, offset: 301 },
                          end: { line: 15, column: 18, offset: 315 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 15, column: 4, offset: 301 },
                      end: { line: 15, column: 18, offset: 315 }
                    }
                  }
                ],
                position: {
                  start: { line: 15, column: 2, offset: 299 },
                  end: { line: 15, column: 18, offset: 315 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.map',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.map',
                            position: {
                              start: { line: 16, column: 5, offset: 320 },
                              end: { line: 16, column: 19, offset: 334 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 16, column: 4, offset: 319 },
                          end: { line: 16, column: 42, offset: 357 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 16, column: 4, offset: 319 },
                      end: { line: 16, column: 42, offset: 357 }
                    }
                  }
                ],
                position: {
                  start: { line: 16, column: 2, offset: 317 },
                  end: { line: 16, column: 42, offset: 357 }
                }
              }
            ],
            position: {
              start: { line: 12, column: 2, offset: 227 },
              end: { line: 16, column: 42, offset: 357 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 16, column: 42, offset: 357 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/always.js'
  },
  {
    name: 'areAllValuesTruthy',
    synopsis: '```coffeescript [specscript]\n' +
      'areAllValuesTruthy(predicates Array<value>) -> Promise|boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'areAllValuesTruthy',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'areAllValuesTruthy(predicates Array<value>) -> Promise|boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 95 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 95 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/and.js'
  },
  {
    name: 'asyncArePredicatesAllTruthy',
    synopsis: '```coffeescript [specscript]\n' +
      'asyncArePredicatesAllTruthy(\n' +
      '  predicates Array<value=>Promise|boolean>\n' +
      '  args Array,\n' +
      '  index number,\n' +
      ') -> allTruthy boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncArePredicatesAllTruthy',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 28, offset: 27 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 28, offset: 27 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'asyncArePredicatesAllTruthy(\n' +
              '  predicates Array<value=>Promise|boolean>\n' +
              '  args Array,\n' +
              '  index number,\n' +
              ') -> allTruthy boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 157 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 157 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/and.js'
  },
  {
    name: 'and',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncPredicate = (...args)=>Promise|boolean|any\n' +
      '\n' +
      'predicatesOrValues Array<SyncOrAsyncPredicate|boolean|any>\n' +
      '\n' +
      'and(values Array<boolean|any>) -> result boolean\n' +
      'and(...argsOrPromises, predicatesOrValues) -> Promise|boolean\n' +
      'and(predicatesOrValues)(...args) -> Promise|boolean\n' +
      '```',
    description: 'Function equivalent to the [Logical AND](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND) operator. Tests an array of predicate functions, promises, values, or a mix thereof.\n' +
      '\n' +
      'If provided an array of boolean values, `and` returns true if all boolean values are true.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const oneIsLessThanThree = 1 < 3\n' +
      'const twoIsGreaterThanOne = 2 > 1\n' +
      'const threeIsEqualToThree = 3 === 3\n' +
      '\n' +
      'const condition = and([\n' +
      '  oneIsLessThanThree,\n' +
      '  twoIsGreaterThanOne,\n' +
      '  threeIsEqualToThree\n' +
      '])\n' +
      'console.log(condition) // true\n' +
      '```\n' +
      '\n' +
      'If any predicate functions are provided in the array, `and` returns an aggregate predicate function that returns true for a given set of arguments if all provided predicate functions test true. If any provided predicate functions are asynchronous, the aggregate predicate function becomes asynchronous.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const isOdd = number => number % 2 == 1\n' +
      'const isPositive = number => number > 0\n' +
      'const asyncIsLessThan3 = async number => number < 3\n' +
      '\n' +
      'const aggregatePredicate = and([\n' +
      '  true,\n' +
      '  isOdd,\n' +
      '  isPositive,\n' +
      '  asyncIsLessThan3,\n' +
      '])\n' +
      '\n' +
      'const condition = await aggregatePredicate(1)\n' +
      'console.log(condition) // true\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'and(Promise.resolve(5), [\n' +
      '  n => n > 0,\n' +
      '  n => n < 10,\n' +
      ']).then(console.log) // true\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [some](/docs/some)\n' +
      ' * [or](/docs/or)\n' +
      ' * [not](/docs/not)\n' +
      ' * [eq](/docs/eq)',
    execution: 'series',
    note: '...args slows down here by an order of magnitude',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'and',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 4, offset: 3 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 4, offset: 3 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncPredicate = (...args)=>Promise|boolean|any\n' +
              '\n' +
              'predicatesOrValues Array<SyncOrAsyncPredicate|boolean|any>\n' +
              '\n' +
              'and(values Array<boolean|any>) -> result boolean\n' +
              'and(...argsOrPromises, predicatesOrValues) -> Promise|boolean\n' +
              'and(predicatesOrValues)(...args) -> Promise|boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 12, column: 4, offset: 366 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 366 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Function equivalent to the ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND',
                children: [
                  {
                    type: 'text',
                    value: 'Logical AND',
                    position: {
                      start: { line: 1, column: 29, offset: 28 },
                      end: { line: 1, column: 40, offset: 39 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 28, offset: 27 },
                  end: { line: 1, column: 130, offset: 129 }
                }
              },
              {
                type: 'text',
                value: ' operator. Tests an array of predicate functions, promises, values, or a mix thereof.',
                position: {
                  start: { line: 1, column: 130, offset: 129 },
                  end: { line: 1, column: 215, offset: 214 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 215, offset: 214 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If provided an array of boolean values, ',
                position: {
                  start: { line: 3, column: 1, offset: 216 },
                  end: { line: 3, column: 41, offset: 256 }
                }
              },
              {
                type: 'inlineCode',
                value: 'and',
                position: {
                  start: { line: 3, column: 41, offset: 256 },
                  end: { line: 3, column: 46, offset: 261 }
                }
              },
              {
                type: 'text',
                value: ' returns true if all boolean values are true.',
                position: {
                  start: { line: 3, column: 46, offset: 261 },
                  end: { line: 3, column: 91, offset: 306 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 216 },
              end: { line: 3, column: 91, offset: 306 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const oneIsLessThanThree = 1 < 3\n' +
              'const twoIsGreaterThanOne = 2 > 1\n' +
              'const threeIsEqualToThree = 3 === 3\n' +
              '\n' +
              'const condition = and([\n' +
              '  oneIsLessThanThree,\n' +
              '  twoIsGreaterThanOne,\n' +
              '  threeIsEqualToThree\n' +
              '])\n' +
              'console.log(condition) // true',
            position: {
              start: { line: 5, column: 1, offset: 308 },
              end: { line: 16, column: 4, offset: 567 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If any predicate functions are provided in the array, ',
                position: {
                  start: { line: 18, column: 1, offset: 569 },
                  end: { line: 18, column: 55, offset: 623 }
                }
              },
              {
                type: 'inlineCode',
                value: 'and',
                position: {
                  start: { line: 18, column: 55, offset: 623 },
                  end: { line: 18, column: 60, offset: 628 }
                }
              },
              {
                type: 'text',
                value: ' returns an aggregate predicate function that returns true for a given set of arguments if all provided predicate functions test true. If any provided predicate functions are asynchronous, the aggregate predicate function becomes asynchronous.',
                position: {
                  start: { line: 18, column: 60, offset: 628 },
                  end: { line: 18, column: 303, offset: 871 }
                }
              }
            ],
            position: {
              start: { line: 18, column: 1, offset: 569 },
              end: { line: 18, column: 303, offset: 871 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const isOdd = number => number % 2 == 1\n' +
              'const isPositive = number => number > 0\n' +
              'const asyncIsLessThan3 = async number => number < 3\n' +
              '\n' +
              'const aggregatePredicate = and([\n' +
              '  true,\n' +
              '  isOdd,\n' +
              '  isPositive,\n' +
              '  asyncIsLessThan3,\n' +
              '])\n' +
              '\n' +
              'const condition = await aggregatePredicate(1)\n' +
              'console.log(condition) // true',
            position: {
              start: { line: 20, column: 1, offset: 873 },
              end: { line: 34, column: 4, offset: 1201 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 36, column: 1, offset: 1203 },
                  end: { line: 36, column: 148, offset: 1350 }
                }
              }
            ],
            position: {
              start: { line: 36, column: 1, offset: 1203 },
              end: { line: 36, column: 148, offset: 1350 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'and(Promise.resolve(5), [\n' +
              '  n => n > 0,\n' +
              '  n => n < 10,\n' +
              ']).then(console.log) // true',
            position: {
              start: { line: 38, column: 1, offset: 1352 },
              end: { line: 43, column: 4, offset: 1466 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 45, column: 1, offset: 1468 },
                  end: { line: 45, column: 10, offset: 1477 }
                }
              }
            ],
            position: {
              start: { line: 45, column: 1, offset: 1468 },
              end: { line: 45, column: 10, offset: 1477 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/some',
                        children: [
                          {
                            type: 'text',
                            value: 'some',
                            position: {
                              start: { line: 46, column: 5, offset: 1482 },
                              end: { line: 46, column: 9, offset: 1486 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 46, column: 4, offset: 1481 },
                          end: { line: 46, column: 22, offset: 1499 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 46, column: 4, offset: 1481 },
                      end: { line: 46, column: 22, offset: 1499 }
                    }
                  }
                ],
                position: {
                  start: { line: 46, column: 2, offset: 1479 },
                  end: { line: 46, column: 22, offset: 1499 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/or',
                        children: [
                          {
                            type: 'text',
                            value: 'or',
                            position: {
                              start: { line: 47, column: 5, offset: 1504 },
                              end: { line: 47, column: 7, offset: 1506 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 47, column: 4, offset: 1503 },
                          end: { line: 47, column: 18, offset: 1517 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 47, column: 4, offset: 1503 },
                      end: { line: 47, column: 18, offset: 1517 }
                    }
                  }
                ],
                position: {
                  start: { line: 47, column: 2, offset: 1501 },
                  end: { line: 47, column: 18, offset: 1517 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/not',
                        children: [
                          {
                            type: 'text',
                            value: 'not',
                            position: {
                              start: { line: 48, column: 5, offset: 1522 },
                              end: { line: 48, column: 8, offset: 1525 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 48, column: 4, offset: 1521 },
                          end: { line: 48, column: 20, offset: 1537 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 48, column: 4, offset: 1521 },
                      end: { line: 48, column: 20, offset: 1537 }
                    }
                  }
                ],
                position: {
                  start: { line: 48, column: 2, offset: 1519 },
                  end: { line: 48, column: 20, offset: 1537 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/eq',
                        children: [
                          {
                            type: 'text',
                            value: 'eq',
                            position: {
                              start: { line: 49, column: 5, offset: 1542 },
                              end: { line: 49, column: 7, offset: 1544 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 49, column: 4, offset: 1541 },
                          end: { line: 49, column: 18, offset: 1555 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 49, column: 4, offset: 1541 },
                      end: { line: 49, column: 18, offset: 1555 }
                    }
                  }
                ],
                position: {
                  start: { line: 49, column: 2, offset: 1539 },
                  end: { line: 49, column: 18, offset: 1555 }
                }
              }
            ],
            position: {
              start: { line: 46, column: 2, offset: 1479 },
              end: { line: 49, column: 18, offset: 1555 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 49, column: 18, offset: 1555 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'series',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      note: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '...args slows down here by an order of magnitude',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 49, offset: 48 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 49, offset: 48 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 49, offset: 48 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/and.js'
  },
  {
    name: 'assign',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      '\n' +
      'type UnarySyncOrAsyncResolver = any=>Promise|any\n' +
      '\n' +
      'objectResolversOrPromisesOrValues Object<UnarySyncOrAsyncResolver|Promise|any>\n' +
      '\n' +
      'assign(argumentObject Promise|Object, objectResolversOrPromisesOrValues) -> resultObject\n' +
      'assign(objectResolversOrPromisesOrValues)(argumentObject Object) -> resultObject\n' +
      '```',
    description: 'Function equivalent to [Object.assign](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign). Constructs an object `result` from an object `objectResolversOrPromisesOrValues` of resolvers, promises, values, or a mix thereof and an argument object `argumentObject`.\n' +
      '\n' +
      'If any values of `objectResolversOrPromisesOrValues` are resolvers, `assign` provides the `argumentObject` to those resolvers to resolve the values for assignment in `resultObject`.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const assignSquaredAndCubed = assign({\n' +
      '  squared: ({ number }) => number ** 2,\n' +
      '  cubed: ({ number }) => number ** 3,\n' +
      '  n: 1,\n' +
      '})\n' +
      '\n' +
      'console.log(assignSquaredAndCubed({ number: 2 }))\n' +
      '// { number: 2, squared: 4, cubed: 8, n: 1 }\n' +
      '\n' +
      'console.log(assignSquaredAndCubed({ number: 3 }))\n' +
      '// { number: 3, squared: 9, cubed: 27, n: 1 }\n' +
      '```\n' +
      '\n' +
      'If any of the resolvers in `objectResolversOrPromisesOrValues` are asynchronous, `assign` returns a promise of `resultObject`.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n' +
      '\n' +
      'const asyncAssignTotal = assign({\n' +
      '  async total({ numbers }) {\n' +
      '    await sleep(500)\n' +
      '    return numbers.reduce((a, b) => a + b)\n' +
      '  },\n' +
      '})\n' +
      '\n' +
      'asyncAssignTotal({ numbers: [1, 2, 3, 4, 5] }).then(console.log)\n' +
      '// { numbers: [1, 2, 3, 4, 5], total: 15 }\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'assign(Promise.resolve({}), {\n' +
      '  a() {\n' +
      '    return 1\n' +
      '  },\n' +
      '  b() {\n' +
      '    return 2\n' +
      '  },\n' +
      '}).then(console.log)\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [all](/docs/all)\n' +
      ' * [get](/docs/get)\n' +
      ' * [set](/docs/set)\n' +
      ' * [pick](/docs/pick)\n' +
      ' * [omit](/docs/omit)\n' +
      ' * [forEach](/docs/forEach)',
    execution: 'concurrent',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'assign',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              '\n' +
              'type UnarySyncOrAsyncResolver = any=>Promise|any\n' +
              '\n' +
              'objectResolversOrPromisesOrValues Object<UnarySyncOrAsyncResolver|Promise|any>\n' +
              '\n' +
              'assign(argumentObject Promise|Object, objectResolversOrPromisesOrValues) -> resultObject\n' +
              'assign(objectResolversOrPromisesOrValues)(argumentObject Object) -> resultObject',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 349 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 349 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Function equivalent to ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign',
                children: [
                  {
                    type: 'text',
                    value: 'Object.assign',
                    position: {
                      start: { line: 1, column: 25, offset: 24 },
                      end: { line: 1, column: 38, offset: 37 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 24, offset: 23 },
                  end: { line: 1, column: 135, offset: 134 }
                }
              },
              {
                type: 'text',
                value: '. Constructs an object ',
                position: {
                  start: { line: 1, column: 135, offset: 134 },
                  end: { line: 1, column: 158, offset: 157 }
                }
              },
              {
                type: 'inlineCode',
                value: 'result',
                position: {
                  start: { line: 1, column: 158, offset: 157 },
                  end: { line: 1, column: 166, offset: 165 }
                }
              },
              {
                type: 'text',
                value: ' from an object ',
                position: {
                  start: { line: 1, column: 166, offset: 165 },
                  end: { line: 1, column: 182, offset: 181 }
                }
              },
              {
                type: 'inlineCode',
                value: 'objectResolversOrPromisesOrValues',
                position: {
                  start: { line: 1, column: 182, offset: 181 },
                  end: { line: 1, column: 217, offset: 216 }
                }
              },
              {
                type: 'text',
                value: ' of resolvers, promises, values, or a mix thereof and an argument object ',
                position: {
                  start: { line: 1, column: 217, offset: 216 },
                  end: { line: 1, column: 290, offset: 289 }
                }
              },
              {
                type: 'inlineCode',
                value: 'argumentObject',
                position: {
                  start: { line: 1, column: 290, offset: 289 },
                  end: { line: 1, column: 306, offset: 305 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 1, column: 306, offset: 305 },
                  end: { line: 1, column: 307, offset: 306 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 307, offset: 306 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If any values of ',
                position: {
                  start: { line: 3, column: 1, offset: 308 },
                  end: { line: 3, column: 18, offset: 325 }
                }
              },
              {
                type: 'inlineCode',
                value: 'objectResolversOrPromisesOrValues',
                position: {
                  start: { line: 3, column: 18, offset: 325 },
                  end: { line: 3, column: 53, offset: 360 }
                }
              },
              {
                type: 'text',
                value: ' are resolvers, ',
                position: {
                  start: { line: 3, column: 53, offset: 360 },
                  end: { line: 3, column: 69, offset: 376 }
                }
              },
              {
                type: 'inlineCode',
                value: 'assign',
                position: {
                  start: { line: 3, column: 69, offset: 376 },
                  end: { line: 3, column: 77, offset: 384 }
                }
              },
              {
                type: 'text',
                value: ' provides the ',
                position: {
                  start: { line: 3, column: 77, offset: 384 },
                  end: { line: 3, column: 91, offset: 398 }
                }
              },
              {
                type: 'inlineCode',
                value: 'argumentObject',
                position: {
                  start: { line: 3, column: 91, offset: 398 },
                  end: { line: 3, column: 107, offset: 414 }
                }
              },
              {
                type: 'text',
                value: ' to those resolvers to resolve the values for assignment in ',
                position: {
                  start: { line: 3, column: 107, offset: 414 },
                  end: { line: 3, column: 167, offset: 474 }
                }
              },
              {
                type: 'inlineCode',
                value: 'resultObject',
                position: {
                  start: { line: 3, column: 167, offset: 474 },
                  end: { line: 3, column: 181, offset: 488 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 3, column: 181, offset: 488 },
                  end: { line: 3, column: 182, offset: 489 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 308 },
              end: { line: 3, column: 182, offset: 489 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const assignSquaredAndCubed = assign({\n' +
              '  squared: ({ number }) => number ** 2,\n' +
              '  cubed: ({ number }) => number ** 3,\n' +
              '  n: 1,\n' +
              '})\n' +
              '\n' +
              'console.log(assignSquaredAndCubed({ number: 2 }))\n' +
              '// { number: 2, squared: 4, cubed: 8, n: 1 }\n' +
              '\n' +
              'console.log(assignSquaredAndCubed({ number: 3 }))\n' +
              '// { number: 3, squared: 9, cubed: 27, n: 1 }',
            position: {
              start: { line: 5, column: 1, offset: 491 },
              end: { line: 17, column: 4, offset: 842 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If any of the resolvers in ',
                position: {
                  start: { line: 19, column: 1, offset: 844 },
                  end: { line: 19, column: 28, offset: 871 }
                }
              },
              {
                type: 'inlineCode',
                value: 'objectResolversOrPromisesOrValues',
                position: {
                  start: { line: 19, column: 28, offset: 871 },
                  end: { line: 19, column: 63, offset: 906 }
                }
              },
              {
                type: 'text',
                value: ' are asynchronous, ',
                position: {
                  start: { line: 19, column: 63, offset: 906 },
                  end: { line: 19, column: 82, offset: 925 }
                }
              },
              {
                type: 'inlineCode',
                value: 'assign',
                position: {
                  start: { line: 19, column: 82, offset: 925 },
                  end: { line: 19, column: 90, offset: 933 }
                }
              },
              {
                type: 'text',
                value: ' returns a promise of ',
                position: {
                  start: { line: 19, column: 90, offset: 933 },
                  end: { line: 19, column: 112, offset: 955 }
                }
              },
              {
                type: 'inlineCode',
                value: 'resultObject',
                position: {
                  start: { line: 19, column: 112, offset: 955 },
                  end: { line: 19, column: 126, offset: 969 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 19, column: 126, offset: 969 },
                  end: { line: 19, column: 127, offset: 970 }
                }
              }
            ],
            position: {
              start: { line: 19, column: 1, offset: 844 },
              end: { line: 19, column: 127, offset: 970 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n' +
              '\n' +
              'const asyncAssignTotal = assign({\n' +
              '  async total({ numbers }) {\n' +
              '    await sleep(500)\n' +
              '    return numbers.reduce((a, b) => a + b)\n' +
              '  },\n' +
              '})\n' +
              '\n' +
              'asyncAssignTotal({ numbers: [1, 2, 3, 4, 5] }).then(console.log)\n' +
              '// { numbers: [1, 2, 3, 4, 5], total: 15 }',
            position: {
              start: { line: 21, column: 1, offset: 972 },
              end: { line: 33, column: 4, offset: 1315 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 35, column: 1, offset: 1317 },
                  end: { line: 35, column: 148, offset: 1464 }
                }
              }
            ],
            position: {
              start: { line: 35, column: 1, offset: 1317 },
              end: { line: 35, column: 148, offset: 1464 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'assign(Promise.resolve({}), {\n' +
              '  a() {\n' +
              '    return 1\n' +
              '  },\n' +
              '  b() {\n' +
              '    return 2\n' +
              '  },\n' +
              '}).then(console.log)',
            position: {
              start: { line: 37, column: 1, offset: 1466 },
              end: { line: 46, column: 4, offset: 1599 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 48, column: 1, offset: 1601 },
                  end: { line: 48, column: 10, offset: 1610 }
                }
              }
            ],
            position: {
              start: { line: 48, column: 1, offset: 1601 },
              end: { line: 48, column: 10, offset: 1610 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 49, column: 5, offset: 1615 },
                              end: { line: 49, column: 9, offset: 1619 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 49, column: 4, offset: 1614 },
                          end: { line: 49, column: 22, offset: 1632 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 49, column: 4, offset: 1614 },
                      end: { line: 49, column: 22, offset: 1632 }
                    }
                  }
                ],
                position: {
                  start: { line: 49, column: 2, offset: 1612 },
                  end: { line: 49, column: 22, offset: 1632 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/all',
                        children: [
                          {
                            type: 'text',
                            value: 'all',
                            position: {
                              start: { line: 50, column: 5, offset: 1637 },
                              end: { line: 50, column: 8, offset: 1640 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 50, column: 4, offset: 1636 },
                          end: { line: 50, column: 20, offset: 1652 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 50, column: 4, offset: 1636 },
                      end: { line: 50, column: 20, offset: 1652 }
                    }
                  }
                ],
                position: {
                  start: { line: 50, column: 2, offset: 1634 },
                  end: { line: 50, column: 20, offset: 1652 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/get',
                        children: [
                          {
                            type: 'text',
                            value: 'get',
                            position: {
                              start: { line: 51, column: 5, offset: 1657 },
                              end: { line: 51, column: 8, offset: 1660 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 51, column: 4, offset: 1656 },
                          end: { line: 51, column: 20, offset: 1672 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 51, column: 4, offset: 1656 },
                      end: { line: 51, column: 20, offset: 1672 }
                    }
                  }
                ],
                position: {
                  start: { line: 51, column: 2, offset: 1654 },
                  end: { line: 51, column: 20, offset: 1672 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/set',
                        children: [
                          {
                            type: 'text',
                            value: 'set',
                            position: {
                              start: { line: 52, column: 5, offset: 1677 },
                              end: { line: 52, column: 8, offset: 1680 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 52, column: 4, offset: 1676 },
                          end: { line: 52, column: 20, offset: 1692 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 52, column: 4, offset: 1676 },
                      end: { line: 52, column: 20, offset: 1692 }
                    }
                  }
                ],
                position: {
                  start: { line: 52, column: 2, offset: 1674 },
                  end: { line: 52, column: 20, offset: 1692 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pick',
                        children: [
                          {
                            type: 'text',
                            value: 'pick',
                            position: {
                              start: { line: 53, column: 5, offset: 1697 },
                              end: { line: 53, column: 9, offset: 1701 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 53, column: 4, offset: 1696 },
                          end: { line: 53, column: 22, offset: 1714 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 53, column: 4, offset: 1696 },
                      end: { line: 53, column: 22, offset: 1714 }
                    }
                  }
                ],
                position: {
                  start: { line: 53, column: 2, offset: 1694 },
                  end: { line: 53, column: 22, offset: 1714 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/omit',
                        children: [
                          {
                            type: 'text',
                            value: 'omit',
                            position: {
                              start: { line: 54, column: 5, offset: 1719 },
                              end: { line: 54, column: 9, offset: 1723 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 54, column: 4, offset: 1718 },
                          end: { line: 54, column: 22, offset: 1736 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 54, column: 4, offset: 1718 },
                      end: { line: 54, column: 22, offset: 1736 }
                    }
                  }
                ],
                position: {
                  start: { line: 54, column: 2, offset: 1716 },
                  end: { line: 54, column: 22, offset: 1736 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 55, column: 5, offset: 1741 },
                              end: { line: 55, column: 12, offset: 1748 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 55, column: 4, offset: 1740 },
                          end: { line: 55, column: 28, offset: 1764 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 55, column: 4, offset: 1740 },
                      end: { line: 55, column: 28, offset: 1764 }
                    }
                  }
                ],
                position: {
                  start: { line: 55, column: 2, offset: 1738 },
                  end: { line: 55, column: 28, offset: 1764 }
                }
              }
            ],
            position: {
              start: { line: 49, column: 2, offset: 1612 },
              end: { line: 55, column: 28, offset: 1764 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 55, column: 28, offset: 1764 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'concurrent',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/assign.js'
  },
  {
    name: 'compose',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncFunction = (...args)=>Promise|any\n' +
      'type UnarySyncOrAsyncFunction = any=>Promise|any\n' +
      '\n' +
      'funcs [SyncOrAsyncFunction, ...Array<UnarySyncOrAsyncFunction>]\n' +
      '\n' +
      'compose(funcs)(...args) -> result Promise|any\n' +
      'compose(...argsOrPromises, funcs) -> result Promise|any\n' +
      'compose(...funcs)(...args) -> result Promise|any\n' +
      '```',
    description: 'Creates a function composition from multiple functions. Each function in the composition is evaluated starting from the last function in the composition in series, passing its return value as an argument to the previous function. The result of a composition execution is the return value of the first function in the composition. All arguments provided to the composition are provided to the last function in the composition. If any function in the composition is asynchronous, the result of the composition execution is a Promise.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const f = x => x * 2\n' +
      'const g = x => x + 3\n' +
      '\n' +
      'const result = compose(5, [f, g])\n' +
      'console.log(result) // 16\n' +
      '```\n' +
      '\n' +
      '`compose` supports a mathematical API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const f = x => x * 2\n' +
      'const g = x => x + 1\n' +
      '\n' +
      'const composition = compose(f, g)\n' +
      '\n' +
      'console.log(composition(1)) // 4\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'compose(Promise.resolve(1), 2, Promise.resolve(3), [\n' +
      '  console.log, // [1, 2, 3]\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [tap](/docs/tap)\n' +
      ' * [switchCase](/docs/switchCase)\n' +
      ' * [tryCatch](/docs/tryCatch)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'compose',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncFunction = (...args)=>Promise|any\n' +
              'type UnarySyncOrAsyncFunction = any=>Promise|any\n' +
              '\n' +
              'funcs [SyncOrAsyncFunction, ...Array<UnarySyncOrAsyncFunction>]\n' +
              '\n' +
              'compose(funcs)(...args) -> result Promise|any\n' +
              'compose(...argsOrPromises, funcs) -> result Promise|any\n' +
              'compose(...funcs)(...args) -> result Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 13, column: 4, offset: 399 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 399 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Creates a function composition from multiple functions. Each function in the composition is evaluated starting from the last function in the composition in series, passing its return value as an argument to the previous function. The result of a composition execution is the return value of the first function in the composition. All arguments provided to the composition are provided to the last function in the composition. If any function in the composition is asynchronous, the result of the composition execution is a Promise.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 532, offset: 531 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 532, offset: 531 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const f = x => x * 2\n' +
              'const g = x => x + 3\n' +
              '\n' +
              'const result = compose(5, [f, g])\n' +
              'console.log(result) // 16',
            position: {
              start: { line: 3, column: 1, offset: 533 },
              end: { line: 9, column: 4, offset: 666 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'compose',
                position: {
                  start: { line: 11, column: 1, offset: 668 },
                  end: { line: 11, column: 10, offset: 677 }
                }
              },
              {
                type: 'text',
                value: ' supports a mathematical API.',
                position: {
                  start: { line: 11, column: 10, offset: 677 },
                  end: { line: 11, column: 39, offset: 706 }
                }
              }
            ],
            position: {
              start: { line: 11, column: 1, offset: 668 },
              end: { line: 11, column: 39, offset: 706 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const f = x => x * 2\n' +
              'const g = x => x + 1\n' +
              '\n' +
              'const composition = compose(f, g)\n' +
              '\n' +
              'console.log(composition(1)) // 4',
            position: {
              start: { line: 13, column: 1, offset: 708 },
              end: { line: 20, column: 4, offset: 849 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 22, column: 1, offset: 851 },
                  end: { line: 22, column: 148, offset: 998 }
                }
              }
            ],
            position: {
              start: { line: 22, column: 1, offset: 851 },
              end: { line: 22, column: 148, offset: 998 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'compose(Promise.resolve(1), 2, Promise.resolve(3), [\n' +
              '  console.log, // [1, 2, 3]\n' +
              '])',
            position: {
              start: { line: 24, column: 1, offset: 1000 },
              end: { line: 28, column: 4, offset: 1114 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 30, column: 1, offset: 1116 },
                  end: { line: 30, column: 10, offset: 1125 }
                }
              }
            ],
            position: {
              start: { line: 30, column: 1, offset: 1116 },
              end: { line: 30, column: 10, offset: 1125 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 31, column: 5, offset: 1130 },
                              end: { line: 31, column: 9, offset: 1134 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 31, column: 4, offset: 1129 },
                          end: { line: 31, column: 22, offset: 1147 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 31, column: 4, offset: 1129 },
                      end: { line: 31, column: 22, offset: 1147 }
                    }
                  }
                ],
                position: {
                  start: { line: 31, column: 2, offset: 1127 },
                  end: { line: 31, column: 22, offset: 1147 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/tap',
                        children: [
                          {
                            type: 'text',
                            value: 'tap',
                            position: {
                              start: { line: 32, column: 5, offset: 1152 },
                              end: { line: 32, column: 8, offset: 1155 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 32, column: 4, offset: 1151 },
                          end: { line: 32, column: 20, offset: 1167 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 32, column: 4, offset: 1151 },
                      end: { line: 32, column: 20, offset: 1167 }
                    }
                  }
                ],
                position: {
                  start: { line: 32, column: 2, offset: 1149 },
                  end: { line: 32, column: 20, offset: 1167 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/switchCase',
                        children: [
                          {
                            type: 'text',
                            value: 'switchCase',
                            position: {
                              start: { line: 33, column: 5, offset: 1172 },
                              end: { line: 33, column: 15, offset: 1182 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 33, column: 4, offset: 1171 },
                          end: { line: 33, column: 34, offset: 1201 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 33, column: 4, offset: 1171 },
                      end: { line: 33, column: 34, offset: 1201 }
                    }
                  }
                ],
                position: {
                  start: { line: 33, column: 2, offset: 1169 },
                  end: { line: 33, column: 34, offset: 1201 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/tryCatch',
                        children: [
                          {
                            type: 'text',
                            value: 'tryCatch',
                            position: {
                              start: { line: 34, column: 5, offset: 1206 },
                              end: { line: 34, column: 13, offset: 1214 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 34, column: 4, offset: 1205 },
                          end: { line: 34, column: 30, offset: 1231 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 34, column: 4, offset: 1205 },
                      end: { line: 34, column: 30, offset: 1231 }
                    }
                  }
                ],
                position: {
                  start: { line: 34, column: 2, offset: 1203 },
                  end: { line: 34, column: 30, offset: 1231 }
                }
              }
            ],
            position: {
              start: { line: 31, column: 2, offset: 1127 },
              end: { line: 34, column: 30, offset: 1231 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 34, column: 30, offset: 1231 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/compose.js'
  },
  {
    name: 'curry',
    synopsis: '```coffeescript [specscript]\n' +
      '__ Symbol(placeholder)\n' +
      '\n' +
      'type ArgsWithPlaceholder = Array<__|any>\n' +
      '\n' +
      'args ArgsWithPlaceholder\n' +
      'moreArgs ArgsWithPlaceholder\n' +
      '\n' +
      'curry(func function, ...args) -> curriedFuncOrResult function|any\n' +
      'curriedFuncOrResult(...moreArgs) -> anotherCurriedFuncOrResult function|any\n' +
      '```',
    description: "Enable partial application of a function's arguments in any order. Provide the placeholder value `__` to specify an argument to be resolved in the partially applied function.\n" +
      '\n' +
      '```javascript [playground]\n' +
      'const add = (a, b, c) => a + b + c\n' +
      '\n' +
      "console.log(curry(add, 'a', 'b', 'c')) // 'abc'\n" +
      "console.log(curry(add)('a', 'b', 'c')) // 'abc'\n" +
      "console.log(curry(add, 'a')('b', 'c')) // 'abc'\n" +
      "console.log(curry(add, 'a', 'b')('c')) // 'abc'\n" +
      "console.log(curry(add)('a')('b')('c')) // 'abc'\n" +
      '\n' +
      "console.log(curry(add, __, 'b', 'c')('a')) // abc\n" +
      "console.log(curry(add, __, __, 'c')('a', 'b')) // abc\n" +
      "console.log(curry(add, __, __, 'c')(__, 'b')('a')) // abc\n" +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [eq](/docs/eq)\n' +
      ' * [thunkify](/docs/thunkify)\n' +
      ' * [always](/docs/always)\n' +
      ' * [curry.arity](/docs/curry.arity)\n' +
      ' * [__](/docs/__)\n' +
      ' * [Transducer.map](/docs/Transducer.map)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'curry',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '__ Symbol(placeholder)\n' +
              '\n' +
              'type ArgsWithPlaceholder = Array<__|any>\n' +
              '\n' +
              'args ArgsWithPlaceholder\n' +
              'moreArgs ArgsWithPlaceholder\n' +
              '\n' +
              'curry(func function, ...args) -> curriedFuncOrResult function|any\n' +
              'curriedFuncOrResult(...moreArgs) -> anotherCurriedFuncOrResult function|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 11, column: 4, offset: 295 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 4, offset: 295 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "Enable partial application of a function's arguments in any order. Provide the placeholder value ",
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 98, offset: 97 }
                }
              },
              {
                type: 'inlineCode',
                value: '__',
                position: {
                  start: { line: 1, column: 98, offset: 97 },
                  end: { line: 1, column: 102, offset: 101 }
                }
              },
              {
                type: 'text',
                value: ' to specify an argument to be resolved in the partially applied function.',
                position: {
                  start: { line: 1, column: 102, offset: 101 },
                  end: { line: 1, column: 175, offset: 174 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 175, offset: 174 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const add = (a, b, c) => a + b + c\n' +
              '\n' +
              "console.log(curry(add, 'a', 'b', 'c')) // 'abc'\n" +
              "console.log(curry(add)('a', 'b', 'c')) // 'abc'\n" +
              "console.log(curry(add, 'a')('b', 'c')) // 'abc'\n" +
              "console.log(curry(add, 'a', 'b')('c')) // 'abc'\n" +
              "console.log(curry(add)('a')('b')('c')) // 'abc'\n" +
              '\n' +
              "console.log(curry(add, __, 'b', 'c')('a')) // abc\n" +
              "console.log(curry(add, __, __, 'c')('a', 'b')) // abc\n" +
              "console.log(curry(add, __, __, 'c')(__, 'b')('a')) // abc",
            position: {
              start: { line: 3, column: 1, offset: 176 },
              end: { line: 15, column: 4, offset: 645 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 17, column: 1, offset: 647 },
                  end: { line: 17, column: 10, offset: 656 }
                }
              }
            ],
            position: {
              start: { line: 17, column: 1, offset: 647 },
              end: { line: 17, column: 10, offset: 656 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/eq',
                        children: [
                          {
                            type: 'text',
                            value: 'eq',
                            position: {
                              start: { line: 18, column: 5, offset: 661 },
                              end: { line: 18, column: 7, offset: 663 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 18, column: 4, offset: 660 },
                          end: { line: 18, column: 18, offset: 674 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 18, column: 4, offset: 660 },
                      end: { line: 18, column: 18, offset: 674 }
                    }
                  }
                ],
                position: {
                  start: { line: 18, column: 2, offset: 658 },
                  end: { line: 18, column: 18, offset: 674 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 19, column: 5, offset: 679 },
                              end: { line: 19, column: 13, offset: 687 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 19, column: 4, offset: 678 },
                          end: { line: 19, column: 30, offset: 704 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 19, column: 4, offset: 678 },
                      end: { line: 19, column: 30, offset: 704 }
                    }
                  }
                ],
                position: {
                  start: { line: 19, column: 2, offset: 676 },
                  end: { line: 19, column: 30, offset: 704 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/always',
                        children: [
                          {
                            type: 'text',
                            value: 'always',
                            position: {
                              start: { line: 20, column: 5, offset: 709 },
                              end: { line: 20, column: 11, offset: 715 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 20, column: 4, offset: 708 },
                          end: { line: 20, column: 26, offset: 730 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 20, column: 4, offset: 708 },
                      end: { line: 20, column: 26, offset: 730 }
                    }
                  }
                ],
                position: {
                  start: { line: 20, column: 2, offset: 706 },
                  end: { line: 20, column: 26, offset: 730 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/curry.arity',
                        children: [
                          {
                            type: 'text',
                            value: 'curry.arity',
                            position: {
                              start: { line: 21, column: 5, offset: 735 },
                              end: { line: 21, column: 16, offset: 746 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 21, column: 4, offset: 734 },
                          end: { line: 21, column: 36, offset: 766 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 21, column: 4, offset: 734 },
                      end: { line: 21, column: 36, offset: 766 }
                    }
                  }
                ],
                position: {
                  start: { line: 21, column: 2, offset: 732 },
                  end: { line: 21, column: 36, offset: 766 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/__',
                        children: [
                          {
                            type: 'text',
                            value: '__',
                            position: {
                              start: { line: 22, column: 5, offset: 771 },
                              end: { line: 22, column: 7, offset: 773 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 22, column: 4, offset: 770 },
                          end: { line: 22, column: 18, offset: 784 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 22, column: 4, offset: 770 },
                      end: { line: 22, column: 18, offset: 784 }
                    }
                  }
                ],
                position: {
                  start: { line: 22, column: 2, offset: 768 },
                  end: { line: 22, column: 18, offset: 784 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.map',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.map',
                            position: {
                              start: { line: 23, column: 5, offset: 789 },
                              end: { line: 23, column: 19, offset: 803 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 23, column: 4, offset: 788 },
                          end: { line: 23, column: 42, offset: 826 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 23, column: 4, offset: 788 },
                      end: { line: 23, column: 42, offset: 826 }
                    }
                  }
                ],
                position: {
                  start: { line: 23, column: 2, offset: 786 },
                  end: { line: 23, column: 42, offset: 826 }
                }
              }
            ],
            position: {
              start: { line: 18, column: 2, offset: 658 },
              end: { line: 23, column: 42, offset: 826 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 23, column: 42, offset: 826 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/curry.js'
  },
  {
    name: 'curry.arity',
    synopsis: '```coffeescript [specscript]\n' +
      'type __ = Symbol(placeholder)\n' +
      'type ArgsWithPlaceholder = Array<__|any>\n' +
      '\n' +
      'n number\n' +
      'args ArgsWithPlaceholder\n' +
      'moreArgs ArgsWithPlaceholder\n' +
      '\n' +
      'curry.arity(n number, func function, ...args) -> curriedFuncOrResult function|any\n' +
      'curriedFuncOrResult(...moreArgs) -> anotherCurriedFuncOrResult function|any\n' +
      '```',
    description: '`curry` with specified arity (number of arguments taken by the function) as the first parameter.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const add = (a, b, c = 0) => a + b + c\n' +
      '\n' +
      'console.log(curry.arity(2, add, 1, 2)) // 3\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [eq](/docs/eq)\n' +
      ' * [thunkify](/docs/thunkify)\n' +
      ' * [always](/docs/always)\n' +
      ' * [curry](/docs/curry)\n' +
      ' * [__](/docs/__)\n' +
      ' * [Transducer.map](/docs/Transducer.map)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'curry.arity',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type __ = Symbol(placeholder)\n' +
              'type ArgsWithPlaceholder = Array<__|any>\n' +
              '\n' +
              'n number\n' +
              'args ArgsWithPlaceholder\n' +
              'moreArgs ArgsWithPlaceholder\n' +
              '\n' +
              'curry.arity(n number, func function, ...args) -> curriedFuncOrResult function|any\n' +
              'curriedFuncOrResult(...moreArgs) -> anotherCurriedFuncOrResult function|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 11, column: 4, offset: 326 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 4, offset: 326 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'curry',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              },
              {
                type: 'text',
                value: ' with specified arity (number of arguments taken by the function) as the first parameter.',
                position: {
                  start: { line: 1, column: 8, offset: 7 },
                  end: { line: 1, column: 97, offset: 96 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 97, offset: 96 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const add = (a, b, c = 0) => a + b + c\n' +
              '\n' +
              'console.log(curry.arity(2, add, 1, 2)) // 3',
            position: {
              start: { line: 3, column: 1, offset: 98 },
              end: { line: 7, column: 4, offset: 212 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 9, column: 1, offset: 214 },
                  end: { line: 9, column: 10, offset: 223 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 214 },
              end: { line: 9, column: 10, offset: 223 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/eq',
                        children: [
                          {
                            type: 'text',
                            value: 'eq',
                            position: {
                              start: { line: 10, column: 5, offset: 228 },
                              end: { line: 10, column: 7, offset: 230 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 10, column: 4, offset: 227 },
                          end: { line: 10, column: 18, offset: 241 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 10, column: 4, offset: 227 },
                      end: { line: 10, column: 18, offset: 241 }
                    }
                  }
                ],
                position: {
                  start: { line: 10, column: 2, offset: 225 },
                  end: { line: 10, column: 18, offset: 241 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 11, column: 5, offset: 246 },
                              end: { line: 11, column: 13, offset: 254 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 11, column: 4, offset: 245 },
                          end: { line: 11, column: 30, offset: 271 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 11, column: 4, offset: 245 },
                      end: { line: 11, column: 30, offset: 271 }
                    }
                  }
                ],
                position: {
                  start: { line: 11, column: 2, offset: 243 },
                  end: { line: 11, column: 30, offset: 271 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/always',
                        children: [
                          {
                            type: 'text',
                            value: 'always',
                            position: {
                              start: { line: 12, column: 5, offset: 276 },
                              end: { line: 12, column: 11, offset: 282 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 12, column: 4, offset: 275 },
                          end: { line: 12, column: 26, offset: 297 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 12, column: 4, offset: 275 },
                      end: { line: 12, column: 26, offset: 297 }
                    }
                  }
                ],
                position: {
                  start: { line: 12, column: 2, offset: 273 },
                  end: { line: 12, column: 26, offset: 297 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/curry',
                        children: [
                          {
                            type: 'text',
                            value: 'curry',
                            position: {
                              start: { line: 13, column: 5, offset: 302 },
                              end: { line: 13, column: 10, offset: 307 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 13, column: 4, offset: 301 },
                          end: { line: 13, column: 24, offset: 321 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 13, column: 4, offset: 301 },
                      end: { line: 13, column: 24, offset: 321 }
                    }
                  }
                ],
                position: {
                  start: { line: 13, column: 2, offset: 299 },
                  end: { line: 13, column: 24, offset: 321 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/__',
                        children: [
                          {
                            type: 'text',
                            value: '__',
                            position: {
                              start: { line: 14, column: 5, offset: 326 },
                              end: { line: 14, column: 7, offset: 328 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 14, column: 4, offset: 325 },
                          end: { line: 14, column: 18, offset: 339 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 14, column: 4, offset: 325 },
                      end: { line: 14, column: 18, offset: 339 }
                    }
                  }
                ],
                position: {
                  start: { line: 14, column: 2, offset: 323 },
                  end: { line: 14, column: 18, offset: 339 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.map',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.map',
                            position: {
                              start: { line: 15, column: 5, offset: 344 },
                              end: { line: 15, column: 19, offset: 358 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 15, column: 4, offset: 343 },
                          end: { line: 15, column: 42, offset: 381 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 15, column: 4, offset: 343 },
                      end: { line: 15, column: 42, offset: 381 }
                    }
                  }
                ],
                position: {
                  start: { line: 15, column: 2, offset: 341 },
                  end: { line: 15, column: 42, offset: 381 }
                }
              }
            ],
            position: {
              start: { line: 10, column: 2, offset: 225 },
              end: { line: 15, column: 42, offset: 381 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 15, column: 42, offset: 381 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/curry.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/Transducer.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/Transducer.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/Transducer.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/Transducer.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/__.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/__.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/__.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/__.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/all.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/all.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/all.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/all.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/always.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/always.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/always.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/always.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/and.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/and.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/and.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/and.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/assign.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/assign.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/assign.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/assign.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/compose.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/compose.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/compose.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/compose.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/curry.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/curry.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/curry.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/curry.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/eq.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/eq.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/eq.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/eq.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/every.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/every.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/every.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/every.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/filter.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/filter.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/filter.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/filter.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/flatMap.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/flatMap.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/flatMap.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/flatMap.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/forEach.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/forEach.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/forEach.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/forEach.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/get.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/get.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/get.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/get.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/gt.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/gt.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/gt.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/gt.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/gte.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/gte.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/gte.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/gte.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/lt.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/lt.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/lt.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/lt.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/lte.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/lte.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/lte.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/lte.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/map.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/map.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/map.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/map.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/not.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/not.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/not.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/not.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/omit.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/omit.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/omit.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/omit.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/or.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/or.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/or.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/or.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/pick.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/pick.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/pick.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/pick.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/pipe.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/pipe.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/pipe.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/pipe.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/reduce.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/reduce.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/reduce.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/reduce.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/rubico.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/rubico.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/rubico.global.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/rubico.global.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/rubico.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/rubico.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/set.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/set.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/set.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/set.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/some.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/some.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/some.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/some.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/switchCase.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/switchCase.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/switchCase.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/switchCase.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/tap.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/tap.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/tap.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/tap.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/thunkify.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/thunkify.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/thunkify.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/thunkify.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/transform.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/transform.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/transform.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/transform.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/tryCatch.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/tryCatch.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/tryCatch.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/tryCatch.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/append.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/append.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/append.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/append.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/callProp.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/callProp.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/callProp.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/callProp.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/defaultsDeep.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/defaultsDeep.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/defaultsDeep.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/defaultsDeep.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/differenceWith.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/differenceWith.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/differenceWith.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/differenceWith.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/filterOut.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/filterOut.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/filterOut.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/filterOut.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/find.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/find.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/find.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/find.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/findIndex.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/findIndex.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/findIndex.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/findIndex.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/first.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/first.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/first.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/first.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/flatten.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/flatten.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/flatten.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/flatten.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/groupBy.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/groupBy.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/groupBy.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/groupBy.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/has.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/has.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/has.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/has.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/identity.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/identity.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/identity.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/identity.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/includes.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/includes.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/includes.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/includes.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isDeepEqual.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isDeepEqual.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isDeepEqual.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isDeepEqual.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isEmpty.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isEmpty.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isEmpty.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isEmpty.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isEqual.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isEqual.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isEqual.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isEqual.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isFunction.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isFunction.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isFunction.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isFunction.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isIn.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isIn.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isIn.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isIn.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isObject.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isObject.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isObject.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isObject.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isString.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isString.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isString.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/isString.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/keys.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/keys.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/keys.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/keys.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/last.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/last.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/last.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/last.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/maxBy.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/maxBy.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/maxBy.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/maxBy.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/noop.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/noop.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/noop.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/noop.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/pluck.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/pluck.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/pluck.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/pluck.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/prepend.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/prepend.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/prepend.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/prepend.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/size.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/size.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/size.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/size.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/trace.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/trace.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/trace.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/trace.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/unionWith.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/unionWith.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/unionWith.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/unionWith.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/uniq.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/uniq.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/uniq.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/uniq.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/unless.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/unless.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/unless.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/unless.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/values.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/values.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/values.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/values.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/when.es.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/when.es.min.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/when.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/dist/x/when.min.js'
  },
  {
    name: 'eq',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncResolver = (...args)=>Promise|any\n' +
      '\n' +
      'leftValue Promise|any\n' +
      'rightValue Promise|any\n' +
      'leftResolver SyncOrAsyncResolver\n' +
      'rightResolver SyncOrAsyncResolver\n' +
      '\n' +
      'eq(leftValue, rightValue) -> Promise|boolean\n' +
      'eq(...argsOrPromises, leftResolver, rightValue) -> Promise|boolean\n' +
      'eq(...argsOrPromises, leftValue, rightResolver) -> Promise|boolean\n' +
      'eq(...argsOrPromises, leftResolver, rightResolver) -> Promise|boolean\n' +
      'eq(leftResolver, rightValue)(...args) -> Promise|boolean\n' +
      'eq(leftValue, rightResolver)(...args) -> Promise|boolean\n' +
      'eq(leftResolver, rightResolver)(...args) -> Promise|boolean\n' +
      '\n' +
      '```',
    description: 'Function equivalent to the [Equality (==)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) operator. Tests for equality (`==`) between two values.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "const areNamesEqual = eq('Ted', 'John')\n" +
      '\n' +
      'console.log(areNamesEqual) // false\n' +
      '```\n' +
      '\n' +
      'If either of the two values are resolver functions, `eq` returns a function that resolves the value(s) to compare.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "const personIsJohn = eq(get('name'), 'John')\n" +
      '\n' +
      "const person = { name: 'John', likes: 'bananas' }\n" +
      '\n' +
      'if (personIsJohn(person)) {\n' +
      "  console.log('The person is John')\n" +
      '}\n' +
      '```\n' +
      '\n' +
      'If either of the two resolver functions is asynchronous, `eq` returns an asynchronous function.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "const asyncPersonIsJohn = eq(async person => person.name, 'John')\n" +
      '\n' +
      "const person = { name: 'John', likes: 'bananas' }\n" +
      '\n' +
      'asyncPersonIsJohn(person).then(condition => {\n' +
      '  if (condition) {\n' +
      "    console.log('The person is John')\n" +
      '  }\n' +
      '})\n' +
      '```\n' +
      '\n' +
      '`eq` supports a lazy API for composability.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "pipe({ name: 'John' }, [\n" +
      "  eq('John', get('name')),\n" +
      '  console.log, // true\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "eq(Promise.resolve({ a: 1, b: 1 }), get('a'), get('b')).then(console.log) // true\n" +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [and](/docs/and)\n' +
      ' * [gt](/docs/gt)\n' +
      ' * [lt](/docs/lt)\n' +
      ' * [gte](/docs/gte)\n' +
      ' * [lte](/docs/lte)\n' +
      ' * [thunkify](/docs/thunkify)',
    execution: 'concurrent',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'eq',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 3, offset: 2 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 3, offset: 2 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 3, offset: 2 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncResolver = (...args)=>Promise|any\n' +
              '\n' +
              'leftValue Promise|any\n' +
              'rightValue Promise|any\n' +
              'leftResolver SyncOrAsyncResolver\n' +
              'rightResolver SyncOrAsyncResolver\n' +
              '\n' +
              'eq(leftValue, rightValue) -> Promise|boolean\n' +
              'eq(...argsOrPromises, leftResolver, rightValue) -> Promise|boolean\n' +
              'eq(...argsOrPromises, leftValue, rightResolver) -> Promise|boolean\n' +
              'eq(...argsOrPromises, leftResolver, rightResolver) -> Promise|boolean\n' +
              'eq(leftResolver, rightValue)(...args) -> Promise|boolean\n' +
              'eq(leftValue, rightResolver)(...args) -> Promise|boolean\n' +
              'eq(leftResolver, rightResolver)(...args) -> Promise|boolean\n',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 20, column: 4, offset: 671 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 20, column: 4, offset: 671 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Function equivalent to the ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality',
                children: [
                  {
                    type: 'text',
                    value: 'Equality (==)',
                    position: {
                      start: { line: 1, column: 29, offset: 28 },
                      end: { line: 1, column: 42, offset: 41 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 28, offset: 27 },
                  end: { line: 1, column: 129, offset: 128 }
                }
              },
              {
                type: 'text',
                value: ' operator. Tests for equality (',
                position: {
                  start: { line: 1, column: 129, offset: 128 },
                  end: { line: 1, column: 160, offset: 159 }
                }
              },
              {
                type: 'inlineCode',
                value: '==',
                position: {
                  start: { line: 1, column: 160, offset: 159 },
                  end: { line: 1, column: 164, offset: 163 }
                }
              },
              {
                type: 'text',
                value: ') between two values.',
                position: {
                  start: { line: 1, column: 164, offset: 163 },
                  end: { line: 1, column: 185, offset: 184 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 185, offset: 184 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "const areNamesEqual = eq('Ted', 'John')\n" +
              '\n' +
              'console.log(areNamesEqual) // false',
            position: {
              start: { line: 3, column: 1, offset: 186 },
              end: { line: 7, column: 4, offset: 293 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If either of the two values are resolver functions, ',
                position: {
                  start: { line: 9, column: 1, offset: 295 },
                  end: { line: 9, column: 53, offset: 347 }
                }
              },
              {
                type: 'inlineCode',
                value: 'eq',
                position: {
                  start: { line: 9, column: 53, offset: 347 },
                  end: { line: 9, column: 57, offset: 351 }
                }
              },
              {
                type: 'text',
                value: ' returns a function that resolves the value(s) to compare.',
                position: {
                  start: { line: 9, column: 57, offset: 351 },
                  end: { line: 9, column: 115, offset: 409 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 295 },
              end: { line: 9, column: 115, offset: 409 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "const personIsJohn = eq(get('name'), 'John')\n" +
              '\n' +
              "const person = { name: 'John', likes: 'bananas' }\n" +
              '\n' +
              'if (personIsJohn(person)) {\n' +
              "  console.log('The person is John')\n" +
              '}',
            position: {
              start: { line: 11, column: 1, offset: 411 },
              end: { line: 19, column: 4, offset: 604 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If either of the two resolver functions is asynchronous, ',
                position: {
                  start: { line: 21, column: 1, offset: 606 },
                  end: { line: 21, column: 58, offset: 663 }
                }
              },
              {
                type: 'inlineCode',
                value: 'eq',
                position: {
                  start: { line: 21, column: 58, offset: 663 },
                  end: { line: 21, column: 62, offset: 667 }
                }
              },
              {
                type: 'text',
                value: ' returns an asynchronous function.',
                position: {
                  start: { line: 21, column: 62, offset: 667 },
                  end: { line: 21, column: 96, offset: 701 }
                }
              }
            ],
            position: {
              start: { line: 21, column: 1, offset: 606 },
              end: { line: 21, column: 96, offset: 701 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "const asyncPersonIsJohn = eq(async person => person.name, 'John')\n" +
              '\n' +
              "const person = { name: 'John', likes: 'bananas' }\n" +
              '\n' +
              'asyncPersonIsJohn(person).then(condition => {\n' +
              '  if (condition) {\n' +
              "    console.log('The person is John')\n" +
              '  }\n' +
              '})',
            position: {
              start: { line: 23, column: 1, offset: 703 },
              end: { line: 33, column: 4, offset: 961 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'eq',
                position: {
                  start: { line: 35, column: 1, offset: 963 },
                  end: { line: 35, column: 5, offset: 967 }
                }
              },
              {
                type: 'text',
                value: ' supports a lazy API for composability.',
                position: {
                  start: { line: 35, column: 5, offset: 967 },
                  end: { line: 35, column: 44, offset: 1006 }
                }
              }
            ],
            position: {
              start: { line: 35, column: 1, offset: 963 },
              end: { line: 35, column: 44, offset: 1006 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "pipe({ name: 'John' }, [\n" +
              "  eq('John', get('name')),\n" +
              '  console.log, // true\n' +
              '])',
            position: {
              start: { line: 37, column: 1, offset: 1008 },
              end: { line: 42, column: 4, offset: 1116 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 44, column: 1, offset: 1118 },
                  end: { line: 44, column: 148, offset: 1265 }
                }
              }
            ],
            position: {
              start: { line: 44, column: 1, offset: 1118 },
              end: { line: 44, column: 148, offset: 1265 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "eq(Promise.resolve({ a: 1, b: 1 }), get('a'), get('b')).then(console.log) // true",
            position: {
              start: { line: 46, column: 1, offset: 1267 },
              end: { line: 48, column: 4, offset: 1379 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 50, column: 1, offset: 1381 },
                  end: { line: 50, column: 10, offset: 1390 }
                }
              }
            ],
            position: {
              start: { line: 50, column: 1, offset: 1381 },
              end: { line: 50, column: 10, offset: 1390 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/and',
                        children: [
                          {
                            type: 'text',
                            value: 'and',
                            position: {
                              start: { line: 51, column: 5, offset: 1395 },
                              end: { line: 51, column: 8, offset: 1398 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 51, column: 4, offset: 1394 },
                          end: { line: 51, column: 20, offset: 1410 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 51, column: 4, offset: 1394 },
                      end: { line: 51, column: 20, offset: 1410 }
                    }
                  }
                ],
                position: {
                  start: { line: 51, column: 2, offset: 1392 },
                  end: { line: 51, column: 20, offset: 1410 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/gt',
                        children: [
                          {
                            type: 'text',
                            value: 'gt',
                            position: {
                              start: { line: 52, column: 5, offset: 1415 },
                              end: { line: 52, column: 7, offset: 1417 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 52, column: 4, offset: 1414 },
                          end: { line: 52, column: 18, offset: 1428 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 52, column: 4, offset: 1414 },
                      end: { line: 52, column: 18, offset: 1428 }
                    }
                  }
                ],
                position: {
                  start: { line: 52, column: 2, offset: 1412 },
                  end: { line: 52, column: 18, offset: 1428 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/lt',
                        children: [
                          {
                            type: 'text',
                            value: 'lt',
                            position: {
                              start: { line: 53, column: 5, offset: 1433 },
                              end: { line: 53, column: 7, offset: 1435 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 53, column: 4, offset: 1432 },
                          end: { line: 53, column: 18, offset: 1446 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 53, column: 4, offset: 1432 },
                      end: { line: 53, column: 18, offset: 1446 }
                    }
                  }
                ],
                position: {
                  start: { line: 53, column: 2, offset: 1430 },
                  end: { line: 53, column: 18, offset: 1446 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/gte',
                        children: [
                          {
                            type: 'text',
                            value: 'gte',
                            position: {
                              start: { line: 54, column: 5, offset: 1451 },
                              end: { line: 54, column: 8, offset: 1454 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 54, column: 4, offset: 1450 },
                          end: { line: 54, column: 20, offset: 1466 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 54, column: 4, offset: 1450 },
                      end: { line: 54, column: 20, offset: 1466 }
                    }
                  }
                ],
                position: {
                  start: { line: 54, column: 2, offset: 1448 },
                  end: { line: 54, column: 20, offset: 1466 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/lte',
                        children: [
                          {
                            type: 'text',
                            value: 'lte',
                            position: {
                              start: { line: 55, column: 5, offset: 1471 },
                              end: { line: 55, column: 8, offset: 1474 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 55, column: 4, offset: 1470 },
                          end: { line: 55, column: 20, offset: 1486 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 55, column: 4, offset: 1470 },
                      end: { line: 55, column: 20, offset: 1486 }
                    }
                  }
                ],
                position: {
                  start: { line: 55, column: 2, offset: 1468 },
                  end: { line: 55, column: 20, offset: 1486 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 56, column: 5, offset: 1491 },
                              end: { line: 56, column: 13, offset: 1499 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 56, column: 4, offset: 1490 },
                          end: { line: 56, column: 30, offset: 1516 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 56, column: 4, offset: 1490 },
                      end: { line: 56, column: 30, offset: 1516 }
                    }
                  }
                ],
                position: {
                  start: { line: 56, column: 2, offset: 1488 },
                  end: { line: 56, column: 30, offset: 1516 }
                }
              }
            ],
            position: {
              start: { line: 51, column: 2, offset: 1392 },
              end: { line: 56, column: 30, offset: 1516 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 56, column: 30, offset: 1516 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'concurrent',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/eq.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/es.js'
  },
  {
    name: 'every',
    synopsis: '```coffeescript [specscript]\n' +
      'type Foldable = Array|Set|Map|Generator|AsyncGenerator|{ reduce: function }|Object\n' +
      'type UnarySyncOrAsyncPredicate = any=>Promise|boolean\n' +
      '\n' +
      'predicate UnarySyncOrAsyncPredicate\n' +
      '\n' +
      'every(foldable Foldable, predicate) -> result Promise|boolean\n' +
      'every(predicate)(foldable Foldable) -> result Promise|boolean\n' +
      '```',
    description: 'Test a predicate concurrently across all elements of a foldable, returning true if all executions return true.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const isOdd = number => number % 2 == 1\n' +
      '\n' +
      'console.log(\n' +
      '  every([1, 2, 3, 4, 5], isOdd),\n' +
      ') // false\n' +
      '\n' +
      'console.log(\n' +
      '  every([1, 3, 5], isOdd),\n' +
      ') // true\n' +
      '```\n' +
      '\n' +
      'The following data types are considered to be foldables:\n' +
      ' * `array`\n' +
      ' * `set`\n' +
      ' * `map`\n' +
      ' * `generator`\n' +
      ' * `async generator`\n' +
      ' * `object with .reduce method`\n' +
      ' * `object`\n' +
      '\n' +
      '`every` works for async generators.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncNumbers = async function* () {\n' +
      '  yield 1; yield 2; yield 3; yield 4; yield 5\n' +
      '}\n' +
      '\n' +
      'every(asyncNumbers(), async number => number < 6).then(console.log) // true\n' +
      '```\n' +
      '\n' +
      '`every` supports a lazy API for composability.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'pipe([1, 2, 3], [\n' +
      '  every(number => number < 5),\n' +
      '  console.log, // true\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'every(Promise.resolve([1, 2, 3, 4, 5]), n => n < 6).then(console.log) // true\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [map](/docs/map)\n' +
      ' * [some](/docs/some)\n' +
      ' * [and](/docs/and)',
    execution: 'concurrent',
    muxing: '',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'every',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Foldable = Array|Set|Map|Generator|AsyncGenerator|{ reduce: function }|Object\n' +
              'type UnarySyncOrAsyncPredicate = any=>Promise|boolean\n' +
              '\n' +
              'predicate UnarySyncOrAsyncPredicate\n' +
              '\n' +
              'every(foldable Foldable, predicate) -> result Promise|boolean\n' +
              'every(predicate)(foldable Foldable) -> result Promise|boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 331 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 331 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Test a predicate concurrently across all elements of a foldable, returning true if all executions return true.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 111, offset: 110 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 111, offset: 110 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const isOdd = number => number % 2 == 1\n' +
              '\n' +
              'console.log(\n' +
              '  every([1, 2, 3, 4, 5], isOdd),\n' +
              ') // false\n' +
              '\n' +
              'console.log(\n' +
              '  every([1, 3, 5], isOdd),\n' +
              ') // true',
            position: {
              start: { line: 3, column: 1, offset: 112 },
              end: { line: 13, column: 4, offset: 291 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The following data types are considered to be foldables:',
                position: {
                  start: { line: 15, column: 1, offset: 293 },
                  end: { line: 15, column: 57, offset: 349 }
                }
              }
            ],
            position: {
              start: { line: 15, column: 1, offset: 293 },
              end: { line: 15, column: 57, offset: 349 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'array',
                        position: {
                          start: { line: 16, column: 4, offset: 353 },
                          end: { line: 16, column: 11, offset: 360 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 16, column: 4, offset: 353 },
                      end: { line: 16, column: 11, offset: 360 }
                    }
                  }
                ],
                position: {
                  start: { line: 16, column: 2, offset: 351 },
                  end: { line: 16, column: 11, offset: 360 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'set',
                        position: {
                          start: { line: 17, column: 4, offset: 364 },
                          end: { line: 17, column: 9, offset: 369 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 17, column: 4, offset: 364 },
                      end: { line: 17, column: 9, offset: 369 }
                    }
                  }
                ],
                position: {
                  start: { line: 17, column: 2, offset: 362 },
                  end: { line: 17, column: 9, offset: 369 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'map',
                        position: {
                          start: { line: 18, column: 4, offset: 373 },
                          end: { line: 18, column: 9, offset: 378 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 18, column: 4, offset: 373 },
                      end: { line: 18, column: 9, offset: 378 }
                    }
                  }
                ],
                position: {
                  start: { line: 18, column: 2, offset: 371 },
                  end: { line: 18, column: 9, offset: 378 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'generator',
                        position: {
                          start: { line: 19, column: 4, offset: 382 },
                          end: { line: 19, column: 15, offset: 393 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 19, column: 4, offset: 382 },
                      end: { line: 19, column: 15, offset: 393 }
                    }
                  }
                ],
                position: {
                  start: { line: 19, column: 2, offset: 380 },
                  end: { line: 19, column: 15, offset: 393 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'async generator',
                        position: {
                          start: { line: 20, column: 4, offset: 397 },
                          end: { line: 20, column: 21, offset: 414 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 20, column: 4, offset: 397 },
                      end: { line: 20, column: 21, offset: 414 }
                    }
                  }
                ],
                position: {
                  start: { line: 20, column: 2, offset: 395 },
                  end: { line: 20, column: 21, offset: 414 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object with .reduce method',
                        position: {
                          start: { line: 21, column: 4, offset: 418 },
                          end: { line: 21, column: 32, offset: 446 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 21, column: 4, offset: 418 },
                      end: { line: 21, column: 32, offset: 446 }
                    }
                  }
                ],
                position: {
                  start: { line: 21, column: 2, offset: 416 },
                  end: { line: 21, column: 32, offset: 446 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object',
                        position: {
                          start: { line: 22, column: 4, offset: 450 },
                          end: { line: 22, column: 12, offset: 458 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 22, column: 4, offset: 450 },
                      end: { line: 22, column: 12, offset: 458 }
                    }
                  }
                ],
                position: {
                  start: { line: 22, column: 2, offset: 448 },
                  end: { line: 22, column: 12, offset: 458 }
                }
              }
            ],
            position: {
              start: { line: 16, column: 2, offset: 351 },
              end: { line: 22, column: 12, offset: 458 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'every',
                position: {
                  start: { line: 24, column: 1, offset: 460 },
                  end: { line: 24, column: 8, offset: 467 }
                }
              },
              {
                type: 'text',
                value: ' works for async generators.',
                position: {
                  start: { line: 24, column: 8, offset: 467 },
                  end: { line: 24, column: 36, offset: 495 }
                }
              }
            ],
            position: {
              start: { line: 24, column: 1, offset: 460 },
              end: { line: 24, column: 36, offset: 495 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncNumbers = async function* () {\n' +
              '  yield 1; yield 2; yield 3; yield 4; yield 5\n' +
              '}\n' +
              '\n' +
              'every(asyncNumbers(), async number => number < 6).then(console.log) // true',
            position: {
              start: { line: 26, column: 1, offset: 497 },
              end: { line: 32, column: 4, offset: 694 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'every',
                position: {
                  start: { line: 34, column: 1, offset: 696 },
                  end: { line: 34, column: 8, offset: 703 }
                }
              },
              {
                type: 'text',
                value: ' supports a lazy API for composability.',
                position: {
                  start: { line: 34, column: 8, offset: 703 },
                  end: { line: 34, column: 47, offset: 742 }
                }
              }
            ],
            position: {
              start: { line: 34, column: 1, offset: 696 },
              end: { line: 34, column: 47, offset: 742 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'pipe([1, 2, 3], [\n' +
              '  every(number => number < 5),\n' +
              '  console.log, // true\n' +
              '])',
            position: {
              start: { line: 36, column: 1, offset: 744 },
              end: { line: 41, column: 4, offset: 849 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 43, column: 1, offset: 851 },
                  end: { line: 43, column: 148, offset: 998 }
                }
              }
            ],
            position: {
              start: { line: 43, column: 1, offset: 851 },
              end: { line: 43, column: 148, offset: 998 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'every(Promise.resolve([1, 2, 3, 4, 5]), n => n < 6).then(console.log) // true',
            position: {
              start: { line: 45, column: 1, offset: 1000 },
              end: { line: 47, column: 4, offset: 1108 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 49, column: 1, offset: 1110 },
                  end: { line: 49, column: 10, offset: 1119 }
                }
              }
            ],
            position: {
              start: { line: 49, column: 1, offset: 1110 },
              end: { line: 49, column: 10, offset: 1119 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map',
                        children: [
                          {
                            type: 'text',
                            value: 'map',
                            position: {
                              start: { line: 50, column: 5, offset: 1124 },
                              end: { line: 50, column: 8, offset: 1127 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 50, column: 4, offset: 1123 },
                          end: { line: 50, column: 20, offset: 1139 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 50, column: 4, offset: 1123 },
                      end: { line: 50, column: 20, offset: 1139 }
                    }
                  }
                ],
                position: {
                  start: { line: 50, column: 2, offset: 1121 },
                  end: { line: 50, column: 20, offset: 1139 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/some',
                        children: [
                          {
                            type: 'text',
                            value: 'some',
                            position: {
                              start: { line: 51, column: 5, offset: 1144 },
                              end: { line: 51, column: 9, offset: 1148 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 51, column: 4, offset: 1143 },
                          end: { line: 51, column: 22, offset: 1161 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 51, column: 4, offset: 1143 },
                      end: { line: 51, column: 22, offset: 1161 }
                    }
                  }
                ],
                position: {
                  start: { line: 51, column: 2, offset: 1141 },
                  end: { line: 51, column: 22, offset: 1161 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/and',
                        children: [
                          {
                            type: 'text',
                            value: 'and',
                            position: {
                              start: { line: 52, column: 5, offset: 1166 },
                              end: { line: 52, column: 8, offset: 1169 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 52, column: 4, offset: 1165 },
                          end: { line: 52, column: 20, offset: 1181 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 52, column: 4, offset: 1165 },
                      end: { line: 52, column: 20, offset: 1181 }
                    }
                  }
                ],
                position: {
                  start: { line: 52, column: 2, offset: 1163 },
                  end: { line: 52, column: 20, offset: 1181 }
                }
              }
            ],
            position: {
              start: { line: 50, column: 2, offset: 1121 },
              end: { line: 52, column: 20, offset: 1181 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 52, column: 20, offset: 1181 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'concurrent',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      muxing: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/every.js'
  },
  {
    name: '_filter',
    synopsis: '```coffeescript [specscript]\n' +
      '_filter(\n' +
      '  array Array,\n' +
      '  arrayPredicate (value any, index number, array Array)=>Promise|boolean\n' +
      ') -> filteredArray Promise|Array\n' +
      '\n' +
      '_filter(\n' +
      '  object Object,\n' +
      '  objectPredicate (value any, key string, object Object)=>Promise|boolean\n' +
      ') -> filteredObject Promise|Object\n' +
      '\n' +
      '_filter(\n' +
      '  set Set,\n' +
      '  setPredicate (value any, value, set Set)=>Promise|boolean\n' +
      ') -> filteredSet Promise|Set\n' +
      '\n' +
      '_filter(\n' +
      '  map Map,\n' +
      '  mapPredicate (value any, key any, map Map)=>Promise|boolean\n' +
      ') -> filteredMap Promise|Map\n' +
      '\n' +
      '_filter(\n' +
      '  generatorFunction GeneratorFunction,\n' +
      '  predicate (value any)=>Promise|boolean\n' +
      ') -> filteringGeneratorFunction GeneratorFunction\n' +
      '\n' +
      '_filter(\n' +
      '  asyncGeneratorFunction AsyncGeneratorFunction,\n' +
      '  predicate (value any)=>Promise|boolean\n' +
      ') -> filteringAsyncGeneratorFunction AsyncGeneratorFunction\n' +
      '\n' +
      '_filter(\n' +
      '  reducer Reducer,\n' +
      '  predicate (value any)=>Promise|boolean\n' +
      ') -> filteringReducer Reducer\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_filter',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_filter(\n' +
              '  array Array,\n' +
              '  arrayPredicate (value any, index number, array Array)=>Promise|boolean\n' +
              ') -> filteredArray Promise|Array\n' +
              '\n' +
              '_filter(\n' +
              '  object Object,\n' +
              '  objectPredicate (value any, key string, object Object)=>Promise|boolean\n' +
              ') -> filteredObject Promise|Object\n' +
              '\n' +
              '_filter(\n' +
              '  set Set,\n' +
              '  setPredicate (value any, value, set Set)=>Promise|boolean\n' +
              ') -> filteredSet Promise|Set\n' +
              '\n' +
              '_filter(\n' +
              '  map Map,\n' +
              '  mapPredicate (value any, key any, map Map)=>Promise|boolean\n' +
              ') -> filteredMap Promise|Map\n' +
              '\n' +
              '_filter(\n' +
              '  generatorFunction GeneratorFunction,\n' +
              '  predicate (value any)=>Promise|boolean\n' +
              ') -> filteringGeneratorFunction GeneratorFunction\n' +
              '\n' +
              '_filter(\n' +
              '  asyncGeneratorFunction AsyncGeneratorFunction,\n' +
              '  predicate (value any)=>Promise|boolean\n' +
              ') -> filteringAsyncGeneratorFunction AsyncGeneratorFunction\n' +
              '\n' +
              '_filter(\n' +
              '  reducer Reducer,\n' +
              '  predicate (value any)=>Promise|boolean\n' +
              ') -> filteringReducer Reducer',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 36, column: 4, offset: 920 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 36, column: 4, offset: 920 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/filter.js'
  },
  {
    name: 'filter',
    synopsis: '```coffeescript [specscript]\n' +
      'type Filterable = Array|Set|Map|Generator|AsyncGenerator|{ filter: function }|Object\n' +
      '\n' +
      'type SyncOrAsyncPredicate = (\n' +
      '  value any,\n' +
      '  indexOrKey number|string|any,\n' +
      '  filterable Filterable,\n' +
      ')=>(condition Promise|boolean)\n' +
      '\n' +
      'filter(filterable Promise|Filterable, predicate SyncOrAsyncPredicate) -> result Promise|Filterable\n' +
      'filter(predicate SyncOrAsyncPredicate)(filterable Filterable) -> result Promise|Filterable\n' +
      '```',
    description: 'Filters out elements from a filterable. Returns a filterable of the same type. The order of the elements in the filterable is preserved.\n' +
      '\n' +
      'The following data types are considered to be filterables:\n' +
      ' * `array`\n' +
      ' * `set`\n' +
      ' * `map`\n' +
      ' * `generator`\n' +
      ' * `async generator`\n' +
      ' * `object with .filter method`\n' +
      ' * `object`\n' +
      '\n' +
      'The filtering operation is defined by a given predicate function. The predicate function dictates whether a given element from the filterable should be included in the returned filterable.\n' +
      '\n' +
      '```javascript\n' +
      'const predicate = function (element) {\n' +
      '  // condition is the boolean result of the predicate test on element\n' +
      '  return condition\n' +
      '}\n' +
      '```\n' +
      '\n' +
      'The predicate function signature changes depending on the provided filterable.\n' +
      '\n' +
      'If the filterable is an array:\n' +
      '```coffeescript [specscript]\n' +
      'predicate(element any, index number, filt Array) -> condition Promise|boolean|any\n' +
      '```\n' +
      '\n' +
      'If the filterable is a set:\n' +
      '```coffeescript [specscript]\n' +
      'predicate(element any, element any, filt Set) -> condition Promise|boolean|any\n' +
      '```\n' +
      '\n' +
      'If the filterable is a map:\n' +
      '```coffeescript [specscript]\n' +
      'predicate(element any, key any, filt Map) -> condition Promise|boolean|any\n' +
      '```\n' +
      '\n' +
      'If the filterable is a generator:\n' +
      '```coffeescript [specscript]\n' +
      'predicate(element any) -> condition Promise|boolean|any\n' +
      '```\n' +
      '\n' +
      'If the filterable is an async generator:\n' +
      '```coffeescript [specscript]\n' +
      'predicate(element any) -> condition Promise|boolean|any\n' +
      '```\n' +
      '\n' +
      'If the filterable is an object with a `.filter` method, the predicate function signature is defined externally.\n' +
      '\n' +
      'If the filterable is a plain object:\n' +
      '```coffeescript [specscript]\n' +
      'predicate(element any, key string, filt Object) -> condition Promise|boolean|any\n' +
      '```\n' +
      '\n' +
      '`filter` works for arrays.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const isOdd = number => number % 2 == 1\n' +
      '\n' +
      'const array = [1, 2, 3, 4, 5]\n' +
      '\n' +
      'const result = filter(array, isOdd)\n' +
      'console.log(result) // [1, 3, 5]\n' +
      '```\n' +
      '\n' +
      'If the predicate is asynchronous, the returned promise is concurrently resolved for its boolean condition before continuing with the filtering operation.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncIsOdd = async number => number % 2 == 1\n' +
      '\n' +
      'const array = [1, 2, 3, 4, 5]\n' +
      '\n' +
      'const promise = filter(array, asyncIsOdd)\n' +
      'promise.then(console.log) // [1, 3, 5]\n' +
      '```\n' +
      '\n' +
      '`filter` applies the predicate function to just the values of an object.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const isOdd = number => number % 2 == 1\n' +
      '\n' +
      'const obj = { a: 1, b: 2, c: 3, d: 4, e: 5 }\n' +
      '\n' +
      'const result = filter(obj, isOdd)\n' +
      'console.log(result) // { a: 1, c: 3, e: 5 }\n' +
      '```\n' +
      '\n' +
      '`filter` applies the predicate to the values of the entries of a map.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const isOdd = number => number % 2 == 1\n' +
      '\n' +
      "const myMap = new Map([['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5]])\n" +
      '\n' +
      'const result = filter(myMap, isOdd)\n' +
      "console.log(result) // Map(3) { 'a' => 1, 'c' => 3, 'e' => 5 }\n" +
      '```\n' +
      '\n' +
      'For generators, `filter` returns a lazily filtered generator. All values that are normally yielded by the generator that test false by the predicate are excluded from the returned generator.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const isOdd = number => number % 2 == 1\n' +
      '\n' +
      'const numbersGeneratorFunction = function* () {\n' +
      '  yield 1; yield 2; yield 3; yield 4; yield 5\n' +
      '}\n' +
      '\n' +
      'const numbersGenerator = numbersGeneratorFunction()\n' +
      'const oddNumbersGenerator = filter(numbersGeneratorFunction(), isOdd)\n' +
      '\n' +
      'for (const number of numbersGenerator) {\n' +
      '  console.log(number) // 1\n' +
      '                      // 2\n' +
      '                      // 3\n' +
      '                      // 4\n' +
      '                      // 5\n' +
      '}\n' +
      '\n' +
      'for (const number of oddNumbersGenerator) {\n' +
      '  console.log(number) // 1\n' +
      '                      // 3\n' +
      '                      // 5\n' +
      '}\n' +
      '```\n' +
      '\n' +
      'For async generators, `filter` returns a lazily filtered async generator. All values that are normally yielded by the async generator that test falsy by the predicate are excluded from the returned async generator.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncIsOdd = async number => number % 2 == 1\n' +
      '\n' +
      'const asyncNumbersGeneratorFunction = async function* () {\n' +
      '  yield 1; yield 2; yield 3; yield 4; yield 5\n' +
      '}\n' +
      '\n' +
      'const asyncNumbersGenerator = asyncNumbersGeneratorFunction()\n' +
      '\n' +
      'const asyncOddNumbersGenerator = filter(asyncNumbersGeneratorFunction(), asyncIsOdd)\n' +
      '\n' +
      'for await (const number of asyncNumbersGenerator) {\n' +
      '  console.log(number) // 1\n' +
      '                      // 2\n' +
      '                      // 3\n' +
      '                      // 4\n' +
      '                      // 5\n' +
      '}\n' +
      '\n' +
      'for await (const number of asyncOddNumbersGenerator) {\n' +
      '  console.log(number) // 1\n' +
      '                      // 3\n' +
      '                      // 5\n' +
      '}\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const isOdd = number => number % 2 == 1\n' +
      '\n' +
      'filter(Promise.resolve([1, 2, 3, 4, 5]), isOdd).then(console.log)\n' +
      '// [1, 3, 5]\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [forEach](/docs/forEach)\n' +
      ' * [map](/docs/map)\n' +
      ' * [reduce](/docs/reduce)\n' +
      ' * [transform](/docs/transform)\n' +
      ' * [flatMap](/docs/flatMap)\n' +
      ' * [some](/docs/some)',
    execution: 'concurrent',
    transducing: '',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'filter',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Filterable = Array|Set|Map|Generator|AsyncGenerator|{ filter: function }|Object\n' +
              '\n' +
              'type SyncOrAsyncPredicate = (\n' +
              '  value any,\n' +
              '  indexOrKey number|string|any,\n' +
              '  filterable Filterable,\n' +
              ')=>(condition Promise|boolean)\n' +
              '\n' +
              'filter(filterable Promise|Filterable, predicate SyncOrAsyncPredicate) -> result Promise|Filterable\n' +
              'filter(predicate SyncOrAsyncPredicate)(filterable Filterable) -> result Promise|Filterable',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 12, column: 4, offset: 440 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 440 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Filters out elements from a filterable. Returns a filterable of the same type. The order of the elements in the filterable is preserved.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 137, offset: 136 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 137, offset: 136 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The following data types are considered to be filterables:',
                position: {
                  start: { line: 3, column: 1, offset: 138 },
                  end: { line: 3, column: 59, offset: 196 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 138 },
              end: { line: 3, column: 59, offset: 196 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'array',
                        position: {
                          start: { line: 4, column: 4, offset: 200 },
                          end: { line: 4, column: 11, offset: 207 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 4, column: 4, offset: 200 },
                      end: { line: 4, column: 11, offset: 207 }
                    }
                  }
                ],
                position: {
                  start: { line: 4, column: 2, offset: 198 },
                  end: { line: 4, column: 11, offset: 207 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'set',
                        position: {
                          start: { line: 5, column: 4, offset: 211 },
                          end: { line: 5, column: 9, offset: 216 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 5, column: 4, offset: 211 },
                      end: { line: 5, column: 9, offset: 216 }
                    }
                  }
                ],
                position: {
                  start: { line: 5, column: 2, offset: 209 },
                  end: { line: 5, column: 9, offset: 216 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'map',
                        position: {
                          start: { line: 6, column: 4, offset: 220 },
                          end: { line: 6, column: 9, offset: 225 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 6, column: 4, offset: 220 },
                      end: { line: 6, column: 9, offset: 225 }
                    }
                  }
                ],
                position: {
                  start: { line: 6, column: 2, offset: 218 },
                  end: { line: 6, column: 9, offset: 225 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'generator',
                        position: {
                          start: { line: 7, column: 4, offset: 229 },
                          end: { line: 7, column: 15, offset: 240 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 7, column: 4, offset: 229 },
                      end: { line: 7, column: 15, offset: 240 }
                    }
                  }
                ],
                position: {
                  start: { line: 7, column: 2, offset: 227 },
                  end: { line: 7, column: 15, offset: 240 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'async generator',
                        position: {
                          start: { line: 8, column: 4, offset: 244 },
                          end: { line: 8, column: 21, offset: 261 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 8, column: 4, offset: 244 },
                      end: { line: 8, column: 21, offset: 261 }
                    }
                  }
                ],
                position: {
                  start: { line: 8, column: 2, offset: 242 },
                  end: { line: 8, column: 21, offset: 261 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object with .filter method',
                        position: {
                          start: { line: 9, column: 4, offset: 265 },
                          end: { line: 9, column: 32, offset: 293 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 9, column: 4, offset: 265 },
                      end: { line: 9, column: 32, offset: 293 }
                    }
                  }
                ],
                position: {
                  start: { line: 9, column: 2, offset: 263 },
                  end: { line: 9, column: 32, offset: 293 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object',
                        position: {
                          start: { line: 10, column: 4, offset: 297 },
                          end: { line: 10, column: 12, offset: 305 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 10, column: 4, offset: 297 },
                      end: { line: 10, column: 12, offset: 305 }
                    }
                  }
                ],
                position: {
                  start: { line: 10, column: 2, offset: 295 },
                  end: { line: 10, column: 12, offset: 305 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 2, offset: 198 },
              end: { line: 10, column: 12, offset: 305 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The filtering operation is defined by a given predicate function. The predicate function dictates whether a given element from the filterable should be included in the returned filterable.',
                position: {
                  start: { line: 12, column: 1, offset: 307 },
                  end: { line: 12, column: 189, offset: 495 }
                }
              }
            ],
            position: {
              start: { line: 12, column: 1, offset: 307 },
              end: { line: 12, column: 189, offset: 495 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: 'const predicate = function (element) {\n' +
              '  // condition is the boolean result of the predicate test on element\n' +
              '  return condition\n' +
              '}',
            position: {
              start: { line: 14, column: 1, offset: 497 },
              end: { line: 19, column: 4, offset: 644 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The predicate function signature changes depending on the provided filterable.',
                position: {
                  start: { line: 21, column: 1, offset: 646 },
                  end: { line: 21, column: 79, offset: 724 }
                }
              }
            ],
            position: {
              start: { line: 21, column: 1, offset: 646 },
              end: { line: 21, column: 79, offset: 724 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the filterable is an array:',
                position: {
                  start: { line: 23, column: 1, offset: 726 },
                  end: { line: 23, column: 31, offset: 756 }
                }
              }
            ],
            position: {
              start: { line: 23, column: 1, offset: 726 },
              end: { line: 23, column: 31, offset: 756 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'predicate(element any, index number, filt Array) -> condition Promise|boolean|any',
            position: {
              start: { line: 24, column: 1, offset: 757 },
              end: { line: 26, column: 4, offset: 871 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the filterable is a set:',
                position: {
                  start: { line: 28, column: 1, offset: 873 },
                  end: { line: 28, column: 28, offset: 900 }
                }
              }
            ],
            position: {
              start: { line: 28, column: 1, offset: 873 },
              end: { line: 28, column: 28, offset: 900 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'predicate(element any, element any, filt Set) -> condition Promise|boolean|any',
            position: {
              start: { line: 29, column: 1, offset: 901 },
              end: { line: 31, column: 4, offset: 1012 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the filterable is a map:',
                position: {
                  start: { line: 33, column: 1, offset: 1014 },
                  end: { line: 33, column: 28, offset: 1041 }
                }
              }
            ],
            position: {
              start: { line: 33, column: 1, offset: 1014 },
              end: { line: 33, column: 28, offset: 1041 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'predicate(element any, key any, filt Map) -> condition Promise|boolean|any',
            position: {
              start: { line: 34, column: 1, offset: 1042 },
              end: { line: 36, column: 4, offset: 1149 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the filterable is a generator:',
                position: {
                  start: { line: 38, column: 1, offset: 1151 },
                  end: { line: 38, column: 34, offset: 1184 }
                }
              }
            ],
            position: {
              start: { line: 38, column: 1, offset: 1151 },
              end: { line: 38, column: 34, offset: 1184 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'predicate(element any) -> condition Promise|boolean|any',
            position: {
              start: { line: 39, column: 1, offset: 1185 },
              end: { line: 41, column: 4, offset: 1273 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the filterable is an async generator:',
                position: {
                  start: { line: 43, column: 1, offset: 1275 },
                  end: { line: 43, column: 41, offset: 1315 }
                }
              }
            ],
            position: {
              start: { line: 43, column: 1, offset: 1275 },
              end: { line: 43, column: 41, offset: 1315 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'predicate(element any) -> condition Promise|boolean|any',
            position: {
              start: { line: 44, column: 1, offset: 1316 },
              end: { line: 46, column: 4, offset: 1404 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the filterable is an object with a ',
                position: {
                  start: { line: 48, column: 1, offset: 1406 },
                  end: { line: 48, column: 39, offset: 1444 }
                }
              },
              {
                type: 'inlineCode',
                value: '.filter',
                position: {
                  start: { line: 48, column: 39, offset: 1444 },
                  end: { line: 48, column: 48, offset: 1453 }
                }
              },
              {
                type: 'text',
                value: ' method, the predicate function signature is defined externally.',
                position: {
                  start: { line: 48, column: 48, offset: 1453 },
                  end: { line: 48, column: 112, offset: 1517 }
                }
              }
            ],
            position: {
              start: { line: 48, column: 1, offset: 1406 },
              end: { line: 48, column: 112, offset: 1517 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the filterable is a plain object:',
                position: {
                  start: { line: 50, column: 1, offset: 1519 },
                  end: { line: 50, column: 37, offset: 1555 }
                }
              }
            ],
            position: {
              start: { line: 50, column: 1, offset: 1519 },
              end: { line: 50, column: 37, offset: 1555 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'predicate(element any, key string, filt Object) -> condition Promise|boolean|any',
            position: {
              start: { line: 51, column: 1, offset: 1556 },
              end: { line: 53, column: 4, offset: 1669 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'filter',
                position: {
                  start: { line: 55, column: 1, offset: 1671 },
                  end: { line: 55, column: 9, offset: 1679 }
                }
              },
              {
                type: 'text',
                value: ' works for arrays.',
                position: {
                  start: { line: 55, column: 9, offset: 1679 },
                  end: { line: 55, column: 27, offset: 1697 }
                }
              }
            ],
            position: {
              start: { line: 55, column: 1, offset: 1671 },
              end: { line: 55, column: 27, offset: 1697 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const isOdd = number => number % 2 == 1\n' +
              '\n' +
              'const array = [1, 2, 3, 4, 5]\n' +
              '\n' +
              'const result = filter(array, isOdd)\n' +
              'console.log(result) // [1, 3, 5]',
            position: {
              start: { line: 57, column: 1, offset: 1699 },
              end: { line: 64, column: 4, offset: 1870 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the predicate is asynchronous, the returned promise is concurrently resolved for its boolean condition before continuing with the filtering operation.',
                position: {
                  start: { line: 66, column: 1, offset: 1872 },
                  end: { line: 66, column: 154, offset: 2025 }
                }
              }
            ],
            position: {
              start: { line: 66, column: 1, offset: 1872 },
              end: { line: 66, column: 154, offset: 2025 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncIsOdd = async number => number % 2 == 1\n' +
              '\n' +
              'const array = [1, 2, 3, 4, 5]\n' +
              '\n' +
              'const promise = filter(array, asyncIsOdd)\n' +
              'promise.then(console.log) // [1, 3, 5]',
            position: {
              start: { line: 68, column: 1, offset: 2027 },
              end: { line: 75, column: 4, offset: 2221 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'filter',
                position: {
                  start: { line: 77, column: 1, offset: 2223 },
                  end: { line: 77, column: 9, offset: 2231 }
                }
              },
              {
                type: 'text',
                value: ' applies the predicate function to just the values of an object.',
                position: {
                  start: { line: 77, column: 9, offset: 2231 },
                  end: { line: 77, column: 73, offset: 2295 }
                }
              }
            ],
            position: {
              start: { line: 77, column: 1, offset: 2223 },
              end: { line: 77, column: 73, offset: 2295 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const isOdd = number => number % 2 == 1\n' +
              '\n' +
              'const obj = { a: 1, b: 2, c: 3, d: 4, e: 5 }\n' +
              '\n' +
              'const result = filter(obj, isOdd)\n' +
              'console.log(result) // { a: 1, c: 3, e: 5 }',
            position: {
              start: { line: 79, column: 1, offset: 2297 },
              end: { line: 86, column: 4, offset: 2492 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'filter',
                position: {
                  start: { line: 88, column: 1, offset: 2494 },
                  end: { line: 88, column: 9, offset: 2502 }
                }
              },
              {
                type: 'text',
                value: ' applies the predicate to the values of the entries of a map.',
                position: {
                  start: { line: 88, column: 9, offset: 2502 },
                  end: { line: 88, column: 70, offset: 2563 }
                }
              }
            ],
            position: {
              start: { line: 88, column: 1, offset: 2494 },
              end: { line: 88, column: 70, offset: 2563 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const isOdd = number => number % 2 == 1\n' +
              '\n' +
              "const myMap = new Map([['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5]])\n" +
              '\n' +
              'const result = filter(myMap, isOdd)\n' +
              "console.log(result) // Map(3) { 'a' => 1, 'c' => 3, 'e' => 5 }",
            position: {
              start: { line: 90, column: 1, offset: 2565 },
              end: { line: 97, column: 4, offset: 2810 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'For generators, ',
                position: {
                  start: { line: 99, column: 1, offset: 2812 },
                  end: { line: 99, column: 17, offset: 2828 }
                }
              },
              {
                type: 'inlineCode',
                value: 'filter',
                position: {
                  start: { line: 99, column: 17, offset: 2828 },
                  end: { line: 99, column: 25, offset: 2836 }
                }
              },
              {
                type: 'text',
                value: ' returns a lazily filtered generator. All values that are normally yielded by the generator that test false by the predicate are excluded from the returned generator.',
                position: {
                  start: { line: 99, column: 25, offset: 2836 },
                  end: { line: 99, column: 191, offset: 3002 }
                }
              }
            ],
            position: {
              start: { line: 99, column: 1, offset: 2812 },
              end: { line: 99, column: 191, offset: 3002 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const isOdd = number => number % 2 == 1\n' +
              '\n' +
              'const numbersGeneratorFunction = function* () {\n' +
              '  yield 1; yield 2; yield 3; yield 4; yield 5\n' +
              '}\n' +
              '\n' +
              'const numbersGenerator = numbersGeneratorFunction()\n' +
              'const oddNumbersGenerator = filter(numbersGeneratorFunction(), isOdd)\n' +
              '\n' +
              'for (const number of numbersGenerator) {\n' +
              '  console.log(number) // 1\n' +
              '                      // 2\n' +
              '                      // 3\n' +
              '                      // 4\n' +
              '                      // 5\n' +
              '}\n' +
              '\n' +
              'for (const number of oddNumbersGenerator) {\n' +
              '  console.log(number) // 1\n' +
              '                      // 3\n' +
              '                      // 5\n' +
              '}',
            position: {
              start: { line: 101, column: 1, offset: 3004 },
              end: { line: 124, column: 4, offset: 3601 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'For async generators, ',
                position: {
                  start: { line: 126, column: 1, offset: 3603 },
                  end: { line: 126, column: 23, offset: 3625 }
                }
              },
              {
                type: 'inlineCode',
                value: 'filter',
                position: {
                  start: { line: 126, column: 23, offset: 3625 },
                  end: { line: 126, column: 31, offset: 3633 }
                }
              },
              {
                type: 'text',
                value: ' returns a lazily filtered async generator. All values that are normally yielded by the async generator that test falsy by the predicate are excluded from the returned async generator.',
                position: {
                  start: { line: 126, column: 31, offset: 3633 },
                  end: { line: 126, column: 215, offset: 3817 }
                }
              }
            ],
            position: {
              start: { line: 126, column: 1, offset: 3603 },
              end: { line: 126, column: 215, offset: 3817 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncIsOdd = async number => number % 2 == 1\n' +
              '\n' +
              'const asyncNumbersGeneratorFunction = async function* () {\n' +
              '  yield 1; yield 2; yield 3; yield 4; yield 5\n' +
              '}\n' +
              '\n' +
              'const asyncNumbersGenerator = asyncNumbersGeneratorFunction()\n' +
              '\n' +
              'const asyncOddNumbersGenerator = filter(asyncNumbersGeneratorFunction(), asyncIsOdd)\n' +
              '\n' +
              'for await (const number of asyncNumbersGenerator) {\n' +
              '  console.log(number) // 1\n' +
              '                      // 2\n' +
              '                      // 3\n' +
              '                      // 4\n' +
              '                      // 5\n' +
              '}\n' +
              '\n' +
              'for await (const number of asyncOddNumbersGenerator) {\n' +
              '  console.log(number) // 1\n' +
              '                      // 3\n' +
              '                      // 5\n' +
              '}',
            position: {
              start: { line: 128, column: 1, offset: 3819 },
              end: { line: 152, column: 4, offset: 4486 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 154, column: 1, offset: 4488 },
                  end: { line: 154, column: 148, offset: 4635 }
                }
              }
            ],
            position: {
              start: { line: 154, column: 1, offset: 4488 },
              end: { line: 154, column: 148, offset: 4635 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const isOdd = number => number % 2 == 1\n' +
              '\n' +
              'filter(Promise.resolve([1, 2, 3, 4, 5]), isOdd).then(console.log)\n' +
              '// [1, 3, 5]',
            position: {
              start: { line: 156, column: 1, offset: 4637 },
              end: { line: 161, column: 4, offset: 4787 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 163, column: 1, offset: 4789 },
                  end: { line: 163, column: 10, offset: 4798 }
                }
              }
            ],
            position: {
              start: { line: 163, column: 1, offset: 4789 },
              end: { line: 163, column: 10, offset: 4798 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 164, column: 5, offset: 4803 },
                              end: { line: 164, column: 12, offset: 4810 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 164, column: 4, offset: 4802 },
                          end: { line: 164, column: 28, offset: 4826 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 164, column: 4, offset: 4802 },
                      end: { line: 164, column: 28, offset: 4826 }
                    }
                  }
                ],
                position: {
                  start: { line: 164, column: 2, offset: 4800 },
                  end: { line: 164, column: 28, offset: 4826 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map',
                        children: [
                          {
                            type: 'text',
                            value: 'map',
                            position: {
                              start: { line: 165, column: 5, offset: 4831 },
                              end: { line: 165, column: 8, offset: 4834 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 165, column: 4, offset: 4830 },
                          end: { line: 165, column: 20, offset: 4846 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 165, column: 4, offset: 4830 },
                      end: { line: 165, column: 20, offset: 4846 }
                    }
                  }
                ],
                position: {
                  start: { line: 165, column: 2, offset: 4828 },
                  end: { line: 165, column: 20, offset: 4846 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/reduce',
                        children: [
                          {
                            type: 'text',
                            value: 'reduce',
                            position: {
                              start: { line: 166, column: 5, offset: 4851 },
                              end: { line: 166, column: 11, offset: 4857 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 166, column: 4, offset: 4850 },
                          end: { line: 166, column: 26, offset: 4872 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 166, column: 4, offset: 4850 },
                      end: { line: 166, column: 26, offset: 4872 }
                    }
                  }
                ],
                position: {
                  start: { line: 166, column: 2, offset: 4848 },
                  end: { line: 166, column: 26, offset: 4872 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/transform',
                        children: [
                          {
                            type: 'text',
                            value: 'transform',
                            position: {
                              start: { line: 167, column: 5, offset: 4877 },
                              end: { line: 167, column: 14, offset: 4886 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 167, column: 4, offset: 4876 },
                          end: { line: 167, column: 32, offset: 4904 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 167, column: 4, offset: 4876 },
                      end: { line: 167, column: 32, offset: 4904 }
                    }
                  }
                ],
                position: {
                  start: { line: 167, column: 2, offset: 4874 },
                  end: { line: 167, column: 32, offset: 4904 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/flatMap',
                        children: [
                          {
                            type: 'text',
                            value: 'flatMap',
                            position: {
                              start: { line: 168, column: 5, offset: 4909 },
                              end: { line: 168, column: 12, offset: 4916 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 168, column: 4, offset: 4908 },
                          end: { line: 168, column: 28, offset: 4932 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 168, column: 4, offset: 4908 },
                      end: { line: 168, column: 28, offset: 4932 }
                    }
                  }
                ],
                position: {
                  start: { line: 168, column: 2, offset: 4906 },
                  end: { line: 168, column: 28, offset: 4932 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/some',
                        children: [
                          {
                            type: 'text',
                            value: 'some',
                            position: {
                              start: { line: 169, column: 5, offset: 4937 },
                              end: { line: 169, column: 9, offset: 4941 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 169, column: 4, offset: 4936 },
                          end: { line: 169, column: 22, offset: 4954 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 169, column: 4, offset: 4936 },
                      end: { line: 169, column: 22, offset: 4954 }
                    }
                  }
                ],
                position: {
                  start: { line: 169, column: 2, offset: 4934 },
                  end: { line: 169, column: 22, offset: 4954 }
                }
              }
            ],
            position: {
              start: { line: 164, column: 2, offset: 4800 },
              end: { line: 169, column: 22, offset: 4954 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 169, column: 22, offset: 4954 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'concurrent',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      transducing: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/filter.js'
  },
  {
    name: '_flatMap',
    synopsis: '```coffeescript [specscript]\n' +
      'type Monad = Array|String|Set|Generator|AsyncGenerator\n' +
      'type Iterable = Iterable|AsyncIterable|Object<value any>\n' +
      '\n' +
      '_flatMap(\n' +
      '  m Monad,\n' +
      '  flatMapper (element any)=>Promise|Iterable,\n' +
      ') -> result Promise|Monad\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_flatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Monad = Array|String|Set|Generator|AsyncGenerator\n' +
              'type Iterable = Iterable|AsyncIterable|Object<value any>\n' +
              '\n' +
              '_flatMap(\n' +
              '  m Monad,\n' +
              '  flatMapper (element any)=>Promise|Iterable,\n' +
              ') -> result Promise|Monad',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 238 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 238 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/flatMap.js'
  },
  {
    name: 'flatMap',
    synopsis: '```coffeescript [specscript]\n' +
      'type Monad = Array|String|Set|Generator|AsyncGenerator|{ flatMap: string }|{ chain: string }|Object\n' +
      '\n' +
      'type SyncOrAsyncFlatMapper = (\n' +
      '  element any,\n' +
      '  indexOrKey number|string|any,\n' +
      '  monad Monad\n' +
      ')=>Promise|Monad|any\n' +
      '\n' +
      'flatMapper SyncOrAsyncFlatMapper\n' +
      '\n' +
      'flatMap(monad Promise|Monad, flatMapper) -> result Promise|Monad\n' +
      'flatMap(flatMapper)(monad Monad) -> result Promise|Monad\n' +
      '```',
    description: 'Applies a flatMapper function to each element of a monad, returning a monad of the same type.\n' +
      '\n' +
      'A flatMapping operation iterates through each element of a monad and applies the flatMapper function to each element, flattening the result of the execution into the returned monad.\n' +
      '\n' +
      'If the flatMapper is asynchronous, it is executed concurrently. The execution result may be asynchronously iterable, in which case it is muxed into the returned monad.\n' +
      '\n' +
      'The following data types are considered to be monads, all are flattenable into other monads:\n' +
      ' * `array`\n' +
      ' * `string`\n' +
      ' * `set`\n' +
      ' * `genreator`\n' +
      ' * `async generator`\n' +
      ' * `object with .flatMap method`\n' +
      ' * `object with .chain method`\n' +
      ' * `object`\n' +
      '\n' +
      '`flatMap` flattens various data types.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const identity = value => value\n' +
      '\n' +
      'flatMap(identity)([\n' +
      '  [1, 1], // array\n' +
      '  new Set([2, 2]), // set\n' +
      '  (function* () { yield 3; yield 3 })(),\n' +
      '  (async function* () { yield 7; yield 7 })(),\n' +
      '  { a: 5, b: 5 }, // object\n' +
      '  new Uint8Array([8]), // typedArray\n' +
      ']).then(console.log)\n' +
      '// [1, 1, 2, 3, 3, 5, 5, 8, 7, 7]\n' +
      '```\n' +
      '\n' +
      'Values from async generators are muxed. Muxing, or asynchronously "mixing", is the process of combining multiple asynchronous sources into one source, with order determined by the asynchronous resolution of the individual elements.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n' +
      '\n' +
      'const repeat3 = function* (message) {\n' +
      '  yield message; yield message; yield message\n' +
      '}\n' +
      '\n' +
      'console.log( // sync is concatenated\n' +
      "  flatMap(['foo', 'bar', 'baz'], repeat3),\n" +
      ") // ['foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'baz', 'baz', 'baz']\n" +
      '\n' +
      'const asyncRepeat3 = async function* (message) {\n' +
      '  yield message\n' +
      '  await sleep(100)\n' +
      '  yield message\n' +
      '  await sleep(1000)\n' +
      '  yield message\n' +
      '}\n' +
      '\n' +
      '// values from async generators are muxed\n' +
      "flatMap(['foo', 'bar', 'baz'], asyncRepeat3).then(console.log)\n" +
      "// ['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n" +
      '```\n' +
      '\n' +
      '`flatMap` applies the flatMapper function to each element of an array, flattening the results into a new array.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const duplicate = value => [value, value]\n' +
      '\n' +
      'console.log(\n' +
      '  flatMap([1, 2, 3, 4, 5], duplicate)\n' +
      ') // [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\n' +
      '```\n' +
      '\n' +
      '`flatMap` acts on each character of a string.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const duplicate = value => [value, value]\n' +
      '\n' +
      'console.log(\n' +
      "  flatMap('12345', duplicate)\n" +
      ') // 1122334455\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'flatMap(Promise.resolve([1, 2, 3, 4, 5]), n => [n, n]).then(console.log)\n' +
      '// [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [forEach](/docs/forEach)\n' +
      ' * [map](/docs/map)\n' +
      ' * [filter](/docs/filter)\n' +
      ' * [reduce](/docs/reduce)\n' +
      ' * [transform](/docs/transform)\n' +
      ' * [some](/docs/some)',
    execution: 'concurrent',
    transducing: '',
    archive: '* For typed arrays (type [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects)) and Node.js buffers (type [`Buffer`](https://nodejs.org/api/buffer.html)), `flatMap` applies a flatMapper function to each value of the typed array/buffer, joining the result of each execution with `.set` into the resulting typed array\n' +
      '\n' +
      ' * For Node.js duplex streams (type [Stream](https://nodejs.org/api/stream.html#class-streamduplex)), `flatMap` applies a flatMapper function to each element of the stream, writing (`.write`) each element of each execution into the duplex stream',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'flatMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Monad = Array|String|Set|Generator|AsyncGenerator|{ flatMap: string }|{ chain: string }|Object\n' +
              '\n' +
              'type SyncOrAsyncFlatMapper = (\n' +
              '  element any,\n' +
              '  indexOrKey number|string|any,\n' +
              '  monad Monad\n' +
              ')=>Promise|Monad|any\n' +
              '\n' +
              'flatMapper SyncOrAsyncFlatMapper\n' +
              '\n' +
              'flatMap(monad Promise|Monad, flatMapper) -> result Promise|Monad\n' +
              'flatMap(flatMapper)(monad Monad) -> result Promise|Monad',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 14, column: 4, offset: 403 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 14, column: 4, offset: 403 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Applies a flatMapper function to each element of a monad, returning a monad of the same type.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 94, offset: 93 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 94, offset: 93 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'A flatMapping operation iterates through each element of a monad and applies the flatMapper function to each element, flattening the result of the execution into the returned monad.',
                position: {
                  start: { line: 3, column: 1, offset: 95 },
                  end: { line: 3, column: 182, offset: 276 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 95 },
              end: { line: 3, column: 182, offset: 276 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the flatMapper is asynchronous, it is executed concurrently. The execution result may be asynchronously iterable, in which case it is muxed into the returned monad.',
                position: {
                  start: { line: 5, column: 1, offset: 278 },
                  end: { line: 5, column: 168, offset: 445 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 278 },
              end: { line: 5, column: 168, offset: 445 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The following data types are considered to be monads, all are flattenable into other monads:',
                position: {
                  start: { line: 7, column: 1, offset: 447 },
                  end: { line: 7, column: 93, offset: 539 }
                }
              }
            ],
            position: {
              start: { line: 7, column: 1, offset: 447 },
              end: { line: 7, column: 93, offset: 539 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'array',
                        position: {
                          start: { line: 8, column: 4, offset: 543 },
                          end: { line: 8, column: 11, offset: 550 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 8, column: 4, offset: 543 },
                      end: { line: 8, column: 11, offset: 550 }
                    }
                  }
                ],
                position: {
                  start: { line: 8, column: 2, offset: 541 },
                  end: { line: 8, column: 11, offset: 550 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'string',
                        position: {
                          start: { line: 9, column: 4, offset: 554 },
                          end: { line: 9, column: 12, offset: 562 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 9, column: 4, offset: 554 },
                      end: { line: 9, column: 12, offset: 562 }
                    }
                  }
                ],
                position: {
                  start: { line: 9, column: 2, offset: 552 },
                  end: { line: 9, column: 12, offset: 562 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'set',
                        position: {
                          start: { line: 10, column: 4, offset: 566 },
                          end: { line: 10, column: 9, offset: 571 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 10, column: 4, offset: 566 },
                      end: { line: 10, column: 9, offset: 571 }
                    }
                  }
                ],
                position: {
                  start: { line: 10, column: 2, offset: 564 },
                  end: { line: 10, column: 9, offset: 571 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'genreator',
                        position: {
                          start: { line: 11, column: 4, offset: 575 },
                          end: { line: 11, column: 15, offset: 586 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 11, column: 4, offset: 575 },
                      end: { line: 11, column: 15, offset: 586 }
                    }
                  }
                ],
                position: {
                  start: { line: 11, column: 2, offset: 573 },
                  end: { line: 11, column: 15, offset: 586 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'async generator',
                        position: {
                          start: { line: 12, column: 4, offset: 590 },
                          end: { line: 12, column: 21, offset: 607 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 12, column: 4, offset: 590 },
                      end: { line: 12, column: 21, offset: 607 }
                    }
                  }
                ],
                position: {
                  start: { line: 12, column: 2, offset: 588 },
                  end: { line: 12, column: 21, offset: 607 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object with .flatMap method',
                        position: {
                          start: { line: 13, column: 4, offset: 611 },
                          end: { line: 13, column: 33, offset: 640 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 13, column: 4, offset: 611 },
                      end: { line: 13, column: 33, offset: 640 }
                    }
                  }
                ],
                position: {
                  start: { line: 13, column: 2, offset: 609 },
                  end: { line: 13, column: 33, offset: 640 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object with .chain method',
                        position: {
                          start: { line: 14, column: 4, offset: 644 },
                          end: { line: 14, column: 31, offset: 671 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 14, column: 4, offset: 644 },
                      end: { line: 14, column: 31, offset: 671 }
                    }
                  }
                ],
                position: {
                  start: { line: 14, column: 2, offset: 642 },
                  end: { line: 14, column: 31, offset: 671 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object',
                        position: {
                          start: { line: 15, column: 4, offset: 675 },
                          end: { line: 15, column: 12, offset: 683 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 15, column: 4, offset: 675 },
                      end: { line: 15, column: 12, offset: 683 }
                    }
                  }
                ],
                position: {
                  start: { line: 15, column: 2, offset: 673 },
                  end: { line: 15, column: 12, offset: 683 }
                }
              }
            ],
            position: {
              start: { line: 8, column: 2, offset: 541 },
              end: { line: 15, column: 12, offset: 683 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'flatMap',
                position: {
                  start: { line: 17, column: 1, offset: 685 },
                  end: { line: 17, column: 10, offset: 694 }
                }
              },
              {
                type: 'text',
                value: ' flattens various data types.',
                position: {
                  start: { line: 17, column: 10, offset: 694 },
                  end: { line: 17, column: 39, offset: 723 }
                }
              }
            ],
            position: {
              start: { line: 17, column: 1, offset: 685 },
              end: { line: 17, column: 39, offset: 723 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const identity = value => value\n' +
              '\n' +
              'flatMap(identity)([\n' +
              '  [1, 1], // array\n' +
              '  new Set([2, 2]), // set\n' +
              '  (function* () { yield 3; yield 3 })(),\n' +
              '  (async function* () { yield 7; yield 7 })(),\n' +
              '  { a: 5, b: 5 }, // object\n' +
              '  new Uint8Array([8]), // typedArray\n' +
              ']).then(console.log)\n' +
              '// [1, 1, 2, 3, 3, 5, 5, 8, 7, 7]',
            position: {
              start: { line: 19, column: 1, offset: 725 },
              end: { line: 31, column: 4, offset: 1061 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Values from async generators are muxed. Muxing, or asynchronously "mixing", is the process of combining multiple asynchronous sources into one source, with order determined by the asynchronous resolution of the individual elements.',
                position: {
                  start: { line: 33, column: 1, offset: 1063 },
                  end: { line: 33, column: 232, offset: 1294 }
                }
              }
            ],
            position: {
              start: { line: 33, column: 1, offset: 1063 },
              end: { line: 33, column: 232, offset: 1294 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n' +
              '\n' +
              'const repeat3 = function* (message) {\n' +
              '  yield message; yield message; yield message\n' +
              '}\n' +
              '\n' +
              'console.log( // sync is concatenated\n' +
              "  flatMap(['foo', 'bar', 'baz'], repeat3),\n" +
              ") // ['foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'baz', 'baz', 'baz']\n" +
              '\n' +
              'const asyncRepeat3 = async function* (message) {\n' +
              '  yield message\n' +
              '  await sleep(100)\n' +
              '  yield message\n' +
              '  await sleep(1000)\n' +
              '  yield message\n' +
              '}\n' +
              '\n' +
              '// values from async generators are muxed\n' +
              "flatMap(['foo', 'bar', 'baz'], asyncRepeat3).then(console.log)\n" +
              "// ['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz']",
            position: {
              start: { line: 35, column: 1, offset: 1296 },
              end: { line: 57, column: 4, offset: 1943 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'flatMap',
                position: {
                  start: { line: 59, column: 1, offset: 1945 },
                  end: { line: 59, column: 10, offset: 1954 }
                }
              },
              {
                type: 'text',
                value: ' applies the flatMapper function to each element of an array, flattening the results into a new array.',
                position: {
                  start: { line: 59, column: 10, offset: 1954 },
                  end: { line: 59, column: 112, offset: 2056 }
                }
              }
            ],
            position: {
              start: { line: 59, column: 1, offset: 1945 },
              end: { line: 59, column: 112, offset: 2056 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const duplicate = value => [value, value]\n' +
              '\n' +
              'console.log(\n' +
              '  flatMap([1, 2, 3, 4, 5], duplicate)\n' +
              ') // [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]',
            position: {
              start: { line: 61, column: 1, offset: 2058 },
              end: { line: 67, column: 4, offset: 2218 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'flatMap',
                position: {
                  start: { line: 69, column: 1, offset: 2220 },
                  end: { line: 69, column: 10, offset: 2229 }
                }
              },
              {
                type: 'text',
                value: ' acts on each character of a string.',
                position: {
                  start: { line: 69, column: 10, offset: 2229 },
                  end: { line: 69, column: 46, offset: 2265 }
                }
              }
            ],
            position: {
              start: { line: 69, column: 1, offset: 2220 },
              end: { line: 69, column: 46, offset: 2265 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const duplicate = value => [value, value]\n' +
              '\n' +
              'console.log(\n' +
              "  flatMap('12345', duplicate)\n" +
              ') // 1122334455',
            position: {
              start: { line: 71, column: 1, offset: 2267 },
              end: { line: 77, column: 4, offset: 2399 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 79, column: 1, offset: 2401 },
                  end: { line: 79, column: 148, offset: 2548 }
                }
              }
            ],
            position: {
              start: { line: 79, column: 1, offset: 2401 },
              end: { line: 79, column: 148, offset: 2548 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'flatMap(Promise.resolve([1, 2, 3, 4, 5]), n => [n, n]).then(console.log)\n' +
              '// [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]',
            position: {
              start: { line: 81, column: 1, offset: 2550 },
              end: { line: 84, column: 4, offset: 2687 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 86, column: 1, offset: 2689 },
                  end: { line: 86, column: 10, offset: 2698 }
                }
              }
            ],
            position: {
              start: { line: 86, column: 1, offset: 2689 },
              end: { line: 86, column: 10, offset: 2698 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 87, column: 5, offset: 2703 },
                              end: { line: 87, column: 12, offset: 2710 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 87, column: 4, offset: 2702 },
                          end: { line: 87, column: 28, offset: 2726 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 87, column: 4, offset: 2702 },
                      end: { line: 87, column: 28, offset: 2726 }
                    }
                  }
                ],
                position: {
                  start: { line: 87, column: 2, offset: 2700 },
                  end: { line: 87, column: 28, offset: 2726 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map',
                        children: [
                          {
                            type: 'text',
                            value: 'map',
                            position: {
                              start: { line: 88, column: 5, offset: 2731 },
                              end: { line: 88, column: 8, offset: 2734 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 88, column: 4, offset: 2730 },
                          end: { line: 88, column: 20, offset: 2746 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 88, column: 4, offset: 2730 },
                      end: { line: 88, column: 20, offset: 2746 }
                    }
                  }
                ],
                position: {
                  start: { line: 88, column: 2, offset: 2728 },
                  end: { line: 88, column: 20, offset: 2746 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/filter',
                        children: [
                          {
                            type: 'text',
                            value: 'filter',
                            position: {
                              start: { line: 89, column: 5, offset: 2751 },
                              end: { line: 89, column: 11, offset: 2757 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 89, column: 4, offset: 2750 },
                          end: { line: 89, column: 26, offset: 2772 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 89, column: 4, offset: 2750 },
                      end: { line: 89, column: 26, offset: 2772 }
                    }
                  }
                ],
                position: {
                  start: { line: 89, column: 2, offset: 2748 },
                  end: { line: 89, column: 26, offset: 2772 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/reduce',
                        children: [
                          {
                            type: 'text',
                            value: 'reduce',
                            position: {
                              start: { line: 90, column: 5, offset: 2777 },
                              end: { line: 90, column: 11, offset: 2783 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 90, column: 4, offset: 2776 },
                          end: { line: 90, column: 26, offset: 2798 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 90, column: 4, offset: 2776 },
                      end: { line: 90, column: 26, offset: 2798 }
                    }
                  }
                ],
                position: {
                  start: { line: 90, column: 2, offset: 2774 },
                  end: { line: 90, column: 26, offset: 2798 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/transform',
                        children: [
                          {
                            type: 'text',
                            value: 'transform',
                            position: {
                              start: { line: 91, column: 5, offset: 2803 },
                              end: { line: 91, column: 14, offset: 2812 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 91, column: 4, offset: 2802 },
                          end: { line: 91, column: 32, offset: 2830 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 91, column: 4, offset: 2802 },
                      end: { line: 91, column: 32, offset: 2830 }
                    }
                  }
                ],
                position: {
                  start: { line: 91, column: 2, offset: 2800 },
                  end: { line: 91, column: 32, offset: 2830 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/some',
                        children: [
                          {
                            type: 'text',
                            value: 'some',
                            position: {
                              start: { line: 92, column: 5, offset: 2835 },
                              end: { line: 92, column: 9, offset: 2839 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 92, column: 4, offset: 2834 },
                          end: { line: 92, column: 22, offset: 2852 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 92, column: 4, offset: 2834 },
                      end: { line: 92, column: 22, offset: 2852 }
                    }
                  }
                ],
                position: {
                  start: { line: 92, column: 2, offset: 2832 },
                  end: { line: 92, column: 22, offset: 2852 }
                }
              }
            ],
            position: {
              start: { line: 87, column: 2, offset: 2700 },
              end: { line: 92, column: 22, offset: 2852 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 92, column: 22, offset: 2852 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'concurrent',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      transducing: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      },
      archive: {
        type: 'root',
        children: [
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: true,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'For typed arrays (type ',
                        position: {
                          start: { line: 1, column: 3, offset: 2 },
                          end: { line: 1, column: 26, offset: 25 }
                        }
                      },
                      {
                        type: 'link',
                        title: null,
                        url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects',
                        children: [
                          {
                            type: 'inlineCode',
                            value: 'TypedArray',
                            position: {
                              start: { line: 1, column: 27, offset: 26 },
                              end: { line: 1, column: 39, offset: 38 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 1, column: 26, offset: 25 },
                          end: { line: 1, column: 152, offset: 151 }
                        }
                      },
                      {
                        type: 'text',
                        value: ') and Node.js buffers (type ',
                        position: {
                          start: { line: 1, column: 152, offset: 151 },
                          end: { line: 1, column: 180, offset: 179 }
                        }
                      },
                      {
                        type: 'link',
                        title: null,
                        url: 'https://nodejs.org/api/buffer.html',
                        children: [
                          {
                            type: 'inlineCode',
                            value: 'Buffer',
                            position: {
                              start: { line: 1, column: 181, offset: 180 },
                              end: { line: 1, column: 189, offset: 188 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 1, column: 180, offset: 179 },
                          end: { line: 1, column: 226, offset: 225 }
                        }
                      },
                      {
                        type: 'text',
                        value: '), ',
                        position: {
                          start: { line: 1, column: 226, offset: 225 },
                          end: { line: 1, column: 229, offset: 228 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: 'flatMap',
                        position: {
                          start: { line: 1, column: 229, offset: 228 },
                          end: { line: 1, column: 238, offset: 237 }
                        }
                      },
                      {
                        type: 'text',
                        value: ' applies a flatMapper function to each value of the typed array/buffer, joining the result of each execution with ',
                        position: {
                          start: { line: 1, column: 238, offset: 237 },
                          end: { line: 1, column: 352, offset: 351 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: '.set',
                        position: {
                          start: { line: 1, column: 352, offset: 351 },
                          end: { line: 1, column: 358, offset: 357 }
                        }
                      },
                      {
                        type: 'text',
                        value: ' into the resulting typed array',
                        position: {
                          start: { line: 1, column: 358, offset: 357 },
                          end: { line: 1, column: 389, offset: 388 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 1, column: 3, offset: 2 },
                      end: { line: 1, column: 389, offset: 388 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 389, offset: 388 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'For Node.js duplex streams (type ',
                        position: {
                          start: { line: 3, column: 4, offset: 393 },
                          end: { line: 3, column: 37, offset: 426 }
                        }
                      },
                      {
                        type: 'link',
                        title: null,
                        url: 'https://nodejs.org/api/stream.html#class-streamduplex',
                        children: [
                          {
                            type: 'text',
                            value: 'Stream',
                            position: {
                              start: { line: 3, column: 38, offset: 427 },
                              end: { line: 3, column: 44, offset: 433 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 3, column: 37, offset: 426 },
                          end: { line: 3, column: 100, offset: 489 }
                        }
                      },
                      {
                        type: 'text',
                        value: '), ',
                        position: {
                          start: { line: 3, column: 100, offset: 489 },
                          end: { line: 3, column: 103, offset: 492 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: 'flatMap',
                        position: {
                          start: { line: 3, column: 103, offset: 492 },
                          end: { line: 3, column: 112, offset: 501 }
                        }
                      },
                      {
                        type: 'text',
                        value: ' applies a flatMapper function to each element of the stream, writing (',
                        position: {
                          start: { line: 3, column: 112, offset: 501 },
                          end: { line: 3, column: 183, offset: 572 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: '.write',
                        position: {
                          start: { line: 3, column: 183, offset: 572 },
                          end: { line: 3, column: 191, offset: 580 }
                        }
                      },
                      {
                        type: 'text',
                        value: ') each element of each execution into the duplex stream',
                        position: {
                          start: { line: 3, column: 191, offset: 580 },
                          end: { line: 3, column: 246, offset: 635 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 3, column: 4, offset: 393 },
                      end: { line: 3, column: 246, offset: 635 }
                    }
                  }
                ],
                position: {
                  start: { line: 3, column: 2, offset: 391 },
                  end: { line: 3, column: 246, offset: 635 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 246, offset: 635 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 246, offset: 635 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/flatMap.js'
  },
  {
    name: 'forEach',
    synopsis: '```coffeescript [specscript]\n' +
      'type Iterable = Array|Set|Map|Generator|AsyncGenerator|{ forEach: function }|Object\n' +
      '\n' +
      'type SyncOrAsyncCallback = (\n' +
      '  element any,\n' +
      '  indexOrKey number|string|any,\n' +
      '  iter Iterable\n' +
      ')=>Promise|undefined\n' +
      '\n' +
      'iterable Iterable\n' +
      'cb SyncOrAsyncCallback\n' +
      '\n' +
      'forEach(iterable, cb) -> unmodifiedIterable Promise|Iterable\n' +
      'forEach(cb)(iterable) -> unmodifiedIterable Promise|Iterable\n' +
      '```',
    description: 'Execute a callback function for each element of an iterable, returning the original iterable unmodified.\n' +
      '\n' +
      'The following data types are considered to be iterables:\n' +
      ' * `array`\n' +
      ' * `set`\n' +
      ' * `map`\n' +
      ' * `generator`\n' +
      ' * `async generator`\n' +
      ' * `object with .forEach method`\n' +
      ' * `object`\n' +
      '\n' +
      'The callback function signature changes depending on the provided iterable.\n' +
      '\n' +
      'If the iterable is an array:\n' +
      '```coffeescript [specscript]\n' +
      'callback(element any, index number, iter Array) -> Promise|undefined\n' +
      '```\n' +
      '\n' +
      'If the iterable is a set:\n' +
      '```coffeescript [specscript]\n' +
      'callback(element any, key any, iter Set) -> Promise|undefined\n' +
      '```\n' +
      '\n' +
      'If the iterable is a map:\n' +
      '```coffeescript [specscript]\n' +
      'callback(element any, key any, filt Map) -> Promise|undefined\n' +
      '```\n' +
      '\n' +
      'If the iterable is a generator:\n' +
      '```coffeescript [specscript]\n' +
      'callback(element any) -> Promise|undefined\n' +
      '```\n' +
      '\n' +
      'If the iterable is an async generator:\n' +
      '```coffeescript [specscript]\n' +
      'callback(element any) -> Promise|undefined\n' +
      '```\n' +
      '\n' +
      'If the iterable is an object with a `.forEach` method, the callback function signature is defined externally.\n' +
      '\n' +
      'If the iterable is a plain object:\n' +
      '```coffeescript [specscript]\n' +
      'callback(element any, key string, iter Object) -> Promise|undefined\n' +
      '```\n' +
      '\n' +
      'If the callback function is asynchronous, it is executed concurrently.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'forEach([1, 2, 3, 4, 5], async number => {\n' +
      '  await new Promise(resolve => {\n' +
      '    setTimeout(resolve, 1000)\n' +
      '  })\n' +
      '  console.log(number)\n' +
      '})\n' +
      '```\n' +
      '\n' +
      '`forEach` works for arrays.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'forEach([1, 2, 3, 4, 5], num => console.log(num)) // 1 2 3 4 5\n' +
      '```\n' +
      '\n' +
      '`forEach` works for objects.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'forEach({ a: 1, b: 2, c: 3 }, num => console.log(num)) // 1 2 3\n' +
      '```\n' +
      '\n' +
      'Omit the data argument for a composable API\n' +
      '\n' +
      '```javascript [playground]\n' +
      'pipe([1, 2, 3, 4, 5], [\n' +
      '  filter(number => number % 2 == 1),\n' +
      '  map(number => number ** 2),\n' +
      '  forEach(console.log), // 1\n' +
      '                        // 9\n' +
      '                        // 25\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'forEach(Promise.resolve([1, 2, 3]), console.log)\n' +
      '// 1\n' +
      '// 2\n' +
      '// 3\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [tap](/docs/tap)\n' +
      ' * [all](/docs/all)\n' +
      ' * [forEach.series](/docs/forEach.series)\n' +
      ' * [map](/docs/map)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'forEach',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Iterable = Array|Set|Map|Generator|AsyncGenerator|{ forEach: function }|Object\n' +
              '\n' +
              'type SyncOrAsyncCallback = (\n' +
              '  element any,\n' +
              '  indexOrKey number|string|any,\n' +
              '  iter Iterable\n' +
              ')=>Promise|undefined\n' +
              '\n' +
              'iterable Iterable\n' +
              'cb SyncOrAsyncCallback\n' +
              '\n' +
              'forEach(iterable, cb) -> unmodifiedIterable Promise|Iterable\n' +
              'forEach(cb)(iterable) -> unmodifiedIterable Promise|Iterable',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 15, column: 4, offset: 395 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 15, column: 4, offset: 395 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Execute a callback function for each element of an iterable, returning the original iterable unmodified.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 105, offset: 104 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 105, offset: 104 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The following data types are considered to be iterables:',
                position: {
                  start: { line: 3, column: 1, offset: 106 },
                  end: { line: 3, column: 57, offset: 162 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 106 },
              end: { line: 3, column: 57, offset: 162 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'array',
                        position: {
                          start: { line: 4, column: 4, offset: 166 },
                          end: { line: 4, column: 11, offset: 173 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 4, column: 4, offset: 166 },
                      end: { line: 4, column: 11, offset: 173 }
                    }
                  }
                ],
                position: {
                  start: { line: 4, column: 2, offset: 164 },
                  end: { line: 4, column: 11, offset: 173 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'set',
                        position: {
                          start: { line: 5, column: 4, offset: 177 },
                          end: { line: 5, column: 9, offset: 182 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 5, column: 4, offset: 177 },
                      end: { line: 5, column: 9, offset: 182 }
                    }
                  }
                ],
                position: {
                  start: { line: 5, column: 2, offset: 175 },
                  end: { line: 5, column: 9, offset: 182 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'map',
                        position: {
                          start: { line: 6, column: 4, offset: 186 },
                          end: { line: 6, column: 9, offset: 191 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 6, column: 4, offset: 186 },
                      end: { line: 6, column: 9, offset: 191 }
                    }
                  }
                ],
                position: {
                  start: { line: 6, column: 2, offset: 184 },
                  end: { line: 6, column: 9, offset: 191 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'generator',
                        position: {
                          start: { line: 7, column: 4, offset: 195 },
                          end: { line: 7, column: 15, offset: 206 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 7, column: 4, offset: 195 },
                      end: { line: 7, column: 15, offset: 206 }
                    }
                  }
                ],
                position: {
                  start: { line: 7, column: 2, offset: 193 },
                  end: { line: 7, column: 15, offset: 206 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'async generator',
                        position: {
                          start: { line: 8, column: 4, offset: 210 },
                          end: { line: 8, column: 21, offset: 227 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 8, column: 4, offset: 210 },
                      end: { line: 8, column: 21, offset: 227 }
                    }
                  }
                ],
                position: {
                  start: { line: 8, column: 2, offset: 208 },
                  end: { line: 8, column: 21, offset: 227 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object with .forEach method',
                        position: {
                          start: { line: 9, column: 4, offset: 231 },
                          end: { line: 9, column: 33, offset: 260 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 9, column: 4, offset: 231 },
                      end: { line: 9, column: 33, offset: 260 }
                    }
                  }
                ],
                position: {
                  start: { line: 9, column: 2, offset: 229 },
                  end: { line: 9, column: 33, offset: 260 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object',
                        position: {
                          start: { line: 10, column: 4, offset: 264 },
                          end: { line: 10, column: 12, offset: 272 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 10, column: 4, offset: 264 },
                      end: { line: 10, column: 12, offset: 272 }
                    }
                  }
                ],
                position: {
                  start: { line: 10, column: 2, offset: 262 },
                  end: { line: 10, column: 12, offset: 272 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 2, offset: 164 },
              end: { line: 10, column: 12, offset: 272 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The callback function signature changes depending on the provided iterable.',
                position: {
                  start: { line: 12, column: 1, offset: 274 },
                  end: { line: 12, column: 76, offset: 349 }
                }
              }
            ],
            position: {
              start: { line: 12, column: 1, offset: 274 },
              end: { line: 12, column: 76, offset: 349 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the iterable is an array:',
                position: {
                  start: { line: 14, column: 1, offset: 351 },
                  end: { line: 14, column: 29, offset: 379 }
                }
              }
            ],
            position: {
              start: { line: 14, column: 1, offset: 351 },
              end: { line: 14, column: 29, offset: 379 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'callback(element any, index number, iter Array) -> Promise|undefined',
            position: {
              start: { line: 15, column: 1, offset: 380 },
              end: { line: 17, column: 4, offset: 481 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the iterable is a set:',
                position: {
                  start: { line: 19, column: 1, offset: 483 },
                  end: { line: 19, column: 26, offset: 508 }
                }
              }
            ],
            position: {
              start: { line: 19, column: 1, offset: 483 },
              end: { line: 19, column: 26, offset: 508 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'callback(element any, key any, iter Set) -> Promise|undefined',
            position: {
              start: { line: 20, column: 1, offset: 509 },
              end: { line: 22, column: 4, offset: 603 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the iterable is a map:',
                position: {
                  start: { line: 24, column: 1, offset: 605 },
                  end: { line: 24, column: 26, offset: 630 }
                }
              }
            ],
            position: {
              start: { line: 24, column: 1, offset: 605 },
              end: { line: 24, column: 26, offset: 630 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'callback(element any, key any, filt Map) -> Promise|undefined',
            position: {
              start: { line: 25, column: 1, offset: 631 },
              end: { line: 27, column: 4, offset: 725 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the iterable is a generator:',
                position: {
                  start: { line: 29, column: 1, offset: 727 },
                  end: { line: 29, column: 32, offset: 758 }
                }
              }
            ],
            position: {
              start: { line: 29, column: 1, offset: 727 },
              end: { line: 29, column: 32, offset: 758 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'callback(element any) -> Promise|undefined',
            position: {
              start: { line: 30, column: 1, offset: 759 },
              end: { line: 32, column: 4, offset: 834 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the iterable is an async generator:',
                position: {
                  start: { line: 34, column: 1, offset: 836 },
                  end: { line: 34, column: 39, offset: 874 }
                }
              }
            ],
            position: {
              start: { line: 34, column: 1, offset: 836 },
              end: { line: 34, column: 39, offset: 874 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'callback(element any) -> Promise|undefined',
            position: {
              start: { line: 35, column: 1, offset: 875 },
              end: { line: 37, column: 4, offset: 950 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the iterable is an object with a ',
                position: {
                  start: { line: 39, column: 1, offset: 952 },
                  end: { line: 39, column: 37, offset: 988 }
                }
              },
              {
                type: 'inlineCode',
                value: '.forEach',
                position: {
                  start: { line: 39, column: 37, offset: 988 },
                  end: { line: 39, column: 47, offset: 998 }
                }
              },
              {
                type: 'text',
                value: ' method, the callback function signature is defined externally.',
                position: {
                  start: { line: 39, column: 47, offset: 998 },
                  end: { line: 39, column: 110, offset: 1061 }
                }
              }
            ],
            position: {
              start: { line: 39, column: 1, offset: 952 },
              end: { line: 39, column: 110, offset: 1061 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the iterable is a plain object:',
                position: {
                  start: { line: 41, column: 1, offset: 1063 },
                  end: { line: 41, column: 35, offset: 1097 }
                }
              }
            ],
            position: {
              start: { line: 41, column: 1, offset: 1063 },
              end: { line: 41, column: 35, offset: 1097 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'callback(element any, key string, iter Object) -> Promise|undefined',
            position: {
              start: { line: 42, column: 1, offset: 1098 },
              end: { line: 44, column: 4, offset: 1198 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the callback function is asynchronous, it is executed concurrently.',
                position: {
                  start: { line: 46, column: 1, offset: 1200 },
                  end: { line: 46, column: 71, offset: 1270 }
                }
              }
            ],
            position: {
              start: { line: 46, column: 1, offset: 1200 },
              end: { line: 46, column: 71, offset: 1270 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'forEach([1, 2, 3, 4, 5], async number => {\n' +
              '  await new Promise(resolve => {\n' +
              '    setTimeout(resolve, 1000)\n' +
              '  })\n' +
              '  console.log(number)\n' +
              '})',
            position: {
              start: { line: 48, column: 1, offset: 1272 },
              end: { line: 55, column: 4, offset: 1438 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'forEach',
                position: {
                  start: { line: 57, column: 1, offset: 1440 },
                  end: { line: 57, column: 10, offset: 1449 }
                }
              },
              {
                type: 'text',
                value: ' works for arrays.',
                position: {
                  start: { line: 57, column: 10, offset: 1449 },
                  end: { line: 57, column: 28, offset: 1467 }
                }
              }
            ],
            position: {
              start: { line: 57, column: 1, offset: 1440 },
              end: { line: 57, column: 28, offset: 1467 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'forEach([1, 2, 3, 4, 5], num => console.log(num)) // 1 2 3 4 5',
            position: {
              start: { line: 59, column: 1, offset: 1469 },
              end: { line: 61, column: 4, offset: 1562 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'forEach',
                position: {
                  start: { line: 63, column: 1, offset: 1564 },
                  end: { line: 63, column: 10, offset: 1573 }
                }
              },
              {
                type: 'text',
                value: ' works for objects.',
                position: {
                  start: { line: 63, column: 10, offset: 1573 },
                  end: { line: 63, column: 29, offset: 1592 }
                }
              }
            ],
            position: {
              start: { line: 63, column: 1, offset: 1564 },
              end: { line: 63, column: 29, offset: 1592 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'forEach({ a: 1, b: 2, c: 3 }, num => console.log(num)) // 1 2 3',
            position: {
              start: { line: 65, column: 1, offset: 1594 },
              end: { line: 67, column: 4, offset: 1688 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Omit the data argument for a composable API',
                position: {
                  start: { line: 69, column: 1, offset: 1690 },
                  end: { line: 69, column: 44, offset: 1733 }
                }
              }
            ],
            position: {
              start: { line: 69, column: 1, offset: 1690 },
              end: { line: 69, column: 44, offset: 1733 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'pipe([1, 2, 3, 4, 5], [\n' +
              '  filter(number => number % 2 == 1),\n' +
              '  map(number => number ** 2),\n' +
              '  forEach(console.log), // 1\n' +
              '                        // 9\n' +
              '                        // 25\n' +
              '])',
            position: {
              start: { line: 71, column: 1, offset: 1735 },
              end: { line: 79, column: 4, offset: 1947 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 81, column: 1, offset: 1949 },
                  end: { line: 81, column: 148, offset: 2096 }
                }
              }
            ],
            position: {
              start: { line: 81, column: 1, offset: 1949 },
              end: { line: 81, column: 148, offset: 2096 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'forEach(Promise.resolve([1, 2, 3]), console.log)\n// 1\n// 2\n// 3',
            position: {
              start: { line: 83, column: 1, offset: 2098 },
              end: { line: 88, column: 4, offset: 2192 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 90, column: 1, offset: 2194 },
                  end: { line: 90, column: 10, offset: 2203 }
                }
              }
            ],
            position: {
              start: { line: 90, column: 1, offset: 2194 },
              end: { line: 90, column: 10, offset: 2203 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 91, column: 5, offset: 2208 },
                              end: { line: 91, column: 9, offset: 2212 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 91, column: 4, offset: 2207 },
                          end: { line: 91, column: 22, offset: 2225 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 91, column: 4, offset: 2207 },
                      end: { line: 91, column: 22, offset: 2225 }
                    }
                  }
                ],
                position: {
                  start: { line: 91, column: 2, offset: 2205 },
                  end: { line: 91, column: 22, offset: 2225 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/tap',
                        children: [
                          {
                            type: 'text',
                            value: 'tap',
                            position: {
                              start: { line: 92, column: 5, offset: 2230 },
                              end: { line: 92, column: 8, offset: 2233 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 92, column: 4, offset: 2229 },
                          end: { line: 92, column: 20, offset: 2245 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 92, column: 4, offset: 2229 },
                      end: { line: 92, column: 20, offset: 2245 }
                    }
                  }
                ],
                position: {
                  start: { line: 92, column: 2, offset: 2227 },
                  end: { line: 92, column: 20, offset: 2245 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/all',
                        children: [
                          {
                            type: 'text',
                            value: 'all',
                            position: {
                              start: { line: 93, column: 5, offset: 2250 },
                              end: { line: 93, column: 8, offset: 2253 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 93, column: 4, offset: 2249 },
                          end: { line: 93, column: 20, offset: 2265 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 93, column: 4, offset: 2249 },
                      end: { line: 93, column: 20, offset: 2265 }
                    }
                  }
                ],
                position: {
                  start: { line: 93, column: 2, offset: 2247 },
                  end: { line: 93, column: 20, offset: 2265 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach.series',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach.series',
                            position: {
                              start: { line: 94, column: 5, offset: 2270 },
                              end: { line: 94, column: 19, offset: 2284 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 94, column: 4, offset: 2269 },
                          end: { line: 94, column: 42, offset: 2307 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 94, column: 4, offset: 2269 },
                      end: { line: 94, column: 42, offset: 2307 }
                    }
                  }
                ],
                position: {
                  start: { line: 94, column: 2, offset: 2267 },
                  end: { line: 94, column: 42, offset: 2307 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map',
                        children: [
                          {
                            type: 'text',
                            value: 'map',
                            position: {
                              start: { line: 95, column: 5, offset: 2312 },
                              end: { line: 95, column: 8, offset: 2315 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 95, column: 4, offset: 2311 },
                          end: { line: 95, column: 20, offset: 2327 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 95, column: 4, offset: 2311 },
                      end: { line: 95, column: 20, offset: 2327 }
                    }
                  }
                ],
                position: {
                  start: { line: 95, column: 2, offset: 2309 },
                  end: { line: 95, column: 20, offset: 2327 }
                }
              }
            ],
            position: {
              start: { line: 91, column: 2, offset: 2205 },
              end: { line: 95, column: 20, offset: 2327 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 95, column: 20, offset: 2327 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/forEach.js'
  },
  {
    name: '_forEachSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'type Collection = Array|Iterable|AsyncIterable|{ forEach: function }|Object\n' +
      '\n' +
      '_forEachSeries(collection Collection, callback function) -> collection Promise|Collection\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_forEachSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Collection = Array|Iterable|AsyncIterable|{ forEach: function }|Object\n' +
              '\n' +
              '_forEachSeries(collection Collection, callback function) -> collection Promise|Collection',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 199 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 199 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/forEach.js'
  },
  {
    name: 'forEach.series',
    synopsis: '```coffeescript [specscript]\n' +
      'type Iterable = Array|Set|Map|Generator|AsyncGenerator|{ forEach: function }|Object\n' +
      '\n' +
      'type SyncOrAsyncCallback = (\n' +
      '  element any,\n' +
      '  indexOrKey number|string|any,\n' +
      '  iter Iterable\n' +
      ')=>Promise|undefined\n' +
      '\n' +
      'iterable Iterable\n' +
      'cb SyncOrAsyncCallback\n' +
      '\n' +
      'forEach(iterable, cb) -> unmodifiedIterable Promise|Iterable\n' +
      'forEach(cb)(iterable) -> unmodifiedIterable Promise|Iterable\n' +
      '```',
    description: '[forEach](/docs/forEach) with serial execution.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'forEach.series([1, 2, 3, 4, 5], async number => {\n' +
      '  await new Promise(resolve => {\n' +
      '    setTimeout(resolve, 1000)\n' +
      '  })\n' +
      '  console.log(number)\n' +
      '  // 1\n' +
      '  // 2\n' +
      '  // 3\n' +
      '  // 4\n' +
      '  // 5\n' +
      '})\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'forEach.series(Promise.resolve([1, 2, 3]), console.log)\n' +
      '// 1\n' +
      '// 2\n' +
      '// 3\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [tap](/docs/tap)\n' +
      ' * [all](/docs/all)\n' +
      ' * [forEach](/docs/forEach)\n' +
      ' * [map](/docs/map)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'forEach.series',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Iterable = Array|Set|Map|Generator|AsyncGenerator|{ forEach: function }|Object\n' +
              '\n' +
              'type SyncOrAsyncCallback = (\n' +
              '  element any,\n' +
              '  indexOrKey number|string|any,\n' +
              '  iter Iterable\n' +
              ')=>Promise|undefined\n' +
              '\n' +
              'iterable Iterable\n' +
              'cb SyncOrAsyncCallback\n' +
              '\n' +
              'forEach(iterable, cb) -> unmodifiedIterable Promise|Iterable\n' +
              'forEach(cb)(iterable) -> unmodifiedIterable Promise|Iterable',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 15, column: 4, offset: 395 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 15, column: 4, offset: 395 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'link',
                title: null,
                url: '/docs/forEach',
                children: [
                  {
                    type: 'text',
                    value: 'forEach',
                    position: {
                      start: { line: 1, column: 2, offset: 1 },
                      end: { line: 1, column: 9, offset: 8 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              },
              {
                type: 'text',
                value: ' with serial execution.',
                position: {
                  start: { line: 1, column: 25, offset: 24 },
                  end: { line: 1, column: 48, offset: 47 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 48, offset: 47 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'forEach.series([1, 2, 3, 4, 5], async number => {\n' +
              '  await new Promise(resolve => {\n' +
              '    setTimeout(resolve, 1000)\n' +
              '  })\n' +
              '  console.log(number)\n' +
              '  // 1\n' +
              '  // 2\n' +
              '  // 3\n' +
              '  // 4\n' +
              '  // 5\n' +
              '})',
            position: {
              start: { line: 3, column: 1, offset: 49 },
              end: { line: 15, column: 4, offset: 257 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 17, column: 1, offset: 259 },
                  end: { line: 17, column: 148, offset: 406 }
                }
              }
            ],
            position: {
              start: { line: 17, column: 1, offset: 259 },
              end: { line: 17, column: 148, offset: 406 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'forEach.series(Promise.resolve([1, 2, 3]), console.log)\n' +
              '// 1\n' +
              '// 2\n' +
              '// 3',
            position: {
              start: { line: 19, column: 1, offset: 408 },
              end: { line: 24, column: 4, offset: 509 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 26, column: 1, offset: 511 },
                  end: { line: 26, column: 10, offset: 520 }
                }
              }
            ],
            position: {
              start: { line: 26, column: 1, offset: 511 },
              end: { line: 26, column: 10, offset: 520 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 27, column: 5, offset: 525 },
                              end: { line: 27, column: 9, offset: 529 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 27, column: 4, offset: 524 },
                          end: { line: 27, column: 22, offset: 542 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 27, column: 4, offset: 524 },
                      end: { line: 27, column: 22, offset: 542 }
                    }
                  }
                ],
                position: {
                  start: { line: 27, column: 2, offset: 522 },
                  end: { line: 27, column: 22, offset: 542 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/tap',
                        children: [
                          {
                            type: 'text',
                            value: 'tap',
                            position: {
                              start: { line: 28, column: 5, offset: 547 },
                              end: { line: 28, column: 8, offset: 550 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 28, column: 4, offset: 546 },
                          end: { line: 28, column: 20, offset: 562 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 28, column: 4, offset: 546 },
                      end: { line: 28, column: 20, offset: 562 }
                    }
                  }
                ],
                position: {
                  start: { line: 28, column: 2, offset: 544 },
                  end: { line: 28, column: 20, offset: 562 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/all',
                        children: [
                          {
                            type: 'text',
                            value: 'all',
                            position: {
                              start: { line: 29, column: 5, offset: 567 },
                              end: { line: 29, column: 8, offset: 570 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 29, column: 4, offset: 566 },
                          end: { line: 29, column: 20, offset: 582 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 29, column: 4, offset: 566 },
                      end: { line: 29, column: 20, offset: 582 }
                    }
                  }
                ],
                position: {
                  start: { line: 29, column: 2, offset: 564 },
                  end: { line: 29, column: 20, offset: 582 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 30, column: 5, offset: 587 },
                              end: { line: 30, column: 12, offset: 594 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 30, column: 4, offset: 586 },
                          end: { line: 30, column: 28, offset: 610 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 30, column: 4, offset: 586 },
                      end: { line: 30, column: 28, offset: 610 }
                    }
                  }
                ],
                position: {
                  start: { line: 30, column: 2, offset: 584 },
                  end: { line: 30, column: 28, offset: 610 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map',
                        children: [
                          {
                            type: 'text',
                            value: 'map',
                            position: {
                              start: { line: 31, column: 5, offset: 615 },
                              end: { line: 31, column: 8, offset: 618 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 31, column: 4, offset: 614 },
                          end: { line: 31, column: 20, offset: 630 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 31, column: 4, offset: 614 },
                      end: { line: 31, column: 20, offset: 630 }
                    }
                  }
                ],
                position: {
                  start: { line: 31, column: 2, offset: 612 },
                  end: { line: 31, column: 20, offset: 630 }
                }
              }
            ],
            position: {
              start: { line: 27, column: 2, offset: 522 },
              end: { line: 31, column: 20, offset: 630 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 31, column: 20, offset: 630 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/forEach.js'
  },
  {
    name: 'get',
    synopsis: '```coffeescript [specscript]\n' +
      'get(\n' +
      '  object Promise|Object,\n' +
      '  path string|number|Array<string|number>,\n' +
      '  defaultValue? function|any\n' +
      ') -> result Promise|Object\n' +
      '\n' +
      'get(\n' +
      '  path string|number|Array<string|number>,\n' +
      '  defaultValue? function|any\n' +
      ')(object Object) -> result Promise|Object\n' +
      '```',
    description: 'Accesses a property of an object given a path denoted by a string, number, or an array of string or numbers.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "const obj = { hello: 'world' }\n" +
      '\n' +
      "console.log(get(obj, 'hello')) // world\n" +
      '```\n' +
      '\n' +
      '`get` supports a lazy API for composability\n' +
      '\n' +
      '```javascript [playground]\n' +
      "const obj = { hello: 'world' }\n" +
      '\n' +
      "const getHello = get('hello')\n" +
      '\n' +
      "console.log(getHello({ hello: 'world' })) // world\n" +
      '```\n' +
      '\n' +
      'If the value at the end of the path is not found on the object, returns an optional default value. The default value can be a function resolver that takes the object as an argument. If no default value is provided, returns `undefined`. The function resolver may be asynchronous (returns a promise).\n' +
      '\n' +
      '```javascript [playground]\n' +
      "const getHelloWithDefaultValue = get('hello', 'default')\n" +
      '\n' +
      "console.log(getHelloWithDefaultValue({ foo: 'bar' })) // default\n" +
      '\n' +
      "const getHelloWithDefaultResolver = get('hello', object => object.foo)\n" +
      '\n' +
      "console.log(getHelloWithDefaultResolver({ foo: 'bar' })) // bar\n" +
      '```\n' +
      '\n' +
      '`get` supports three types of path patterns for nested property access.\n' +
      '\n' +
      " * dot delimited - `'a.b.c'`\n" +
      " * bracket notation - `'a[0].value'`\n" +
      " * an array of keys or indices - `['a', 0, 'value']`\n" +
      '\n' +
      '```javascript [playground]\n' +
      "const getABC0 = get('a.b.c[0]')\n" +
      '\n' +
      "console.log(getABC0({ a: { b: { c: ['hello'] } } })) // hello\n" +
      '\n' +
      "const get00000DotNotation = get('0.0.0.0.0')\n" +
      "const get00000BracketNotation = get('[0][0][0][0][0]')\n" +
      'const get00000ArrayNotation = get([0, 0, 0, 0, 0])\n' +
      '\n' +
      "console.log(get00000DotNotation([[[[['foo']]]]])) // foo\n" +
      "console.log(get00000BracketNotation([[[[['foo']]]]])) // foo\n" +
      "console.log(get00000ArrayNotation([[[[['foo']]]]])) // foo\n" +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "get(Promise.resolve({ a: 1 }), 'a').then(console.log) // 1\n" +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [all](/docs/all)\n' +
      ' * [assign](/docs/assign)\n' +
      ' * [set](/docs/set)\n' +
      ' * [pick](/docs/pick)\n' +
      ' * [omit](/docs/omit)\n' +
      ' * [forEach](/docs/forEach)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'get',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 4, offset: 3 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 4, offset: 3 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'get(\n' +
              '  object Promise|Object,\n' +
              '  path string|number|Array<string|number>,\n' +
              '  defaultValue? function|any\n' +
              ') -> result Promise|Object\n' +
              '\n' +
              'get(\n' +
              '  path string|number|Array<string|number>,\n' +
              '  defaultValue? function|any\n' +
              ')(object Object) -> result Promise|Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 12, column: 4, offset: 281 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 281 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Accesses a property of an object given a path denoted by a string, number, or an array of string or numbers.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 109, offset: 108 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 109, offset: 108 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "const obj = { hello: 'world' }\n" +
              '\n' +
              "console.log(get(obj, 'hello')) // world",
            position: {
              start: { line: 3, column: 1, offset: 110 },
              end: { line: 7, column: 4, offset: 212 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'get',
                position: {
                  start: { line: 9, column: 1, offset: 214 },
                  end: { line: 9, column: 6, offset: 219 }
                }
              },
              {
                type: 'text',
                value: ' supports a lazy API for composability',
                position: {
                  start: { line: 9, column: 6, offset: 219 },
                  end: { line: 9, column: 44, offset: 257 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 214 },
              end: { line: 9, column: 44, offset: 257 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "const obj = { hello: 'world' }\n" +
              '\n' +
              "const getHello = get('hello')\n" +
              '\n' +
              "console.log(getHello({ hello: 'world' })) // world",
            position: {
              start: { line: 11, column: 1, offset: 259 },
              end: { line: 17, column: 4, offset: 403 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the value at the end of the path is not found on the object, returns an optional default value. The default value can be a function resolver that takes the object as an argument. If no default value is provided, returns ',
                position: {
                  start: { line: 19, column: 1, offset: 405 },
                  end: { line: 19, column: 224, offset: 628 }
                }
              },
              {
                type: 'inlineCode',
                value: 'undefined',
                position: {
                  start: { line: 19, column: 224, offset: 628 },
                  end: { line: 19, column: 235, offset: 639 }
                }
              },
              {
                type: 'text',
                value: '. The function resolver may be asynchronous (returns a promise).',
                position: {
                  start: { line: 19, column: 235, offset: 639 },
                  end: { line: 19, column: 299, offset: 703 }
                }
              }
            ],
            position: {
              start: { line: 19, column: 1, offset: 405 },
              end: { line: 19, column: 299, offset: 703 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "const getHelloWithDefaultValue = get('hello', 'default')\n" +
              '\n' +
              "console.log(getHelloWithDefaultValue({ foo: 'bar' })) // default\n" +
              '\n' +
              "const getHelloWithDefaultResolver = get('hello', object => object.foo)\n" +
              '\n' +
              "console.log(getHelloWithDefaultResolver({ foo: 'bar' })) // bar",
            position: {
              start: { line: 21, column: 1, offset: 705 },
              end: { line: 29, column: 4, offset: 995 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'get',
                position: {
                  start: { line: 31, column: 1, offset: 997 },
                  end: { line: 31, column: 6, offset: 1002 }
                }
              },
              {
                type: 'text',
                value: ' supports three types of path patterns for nested property access.',
                position: {
                  start: { line: 31, column: 6, offset: 1002 },
                  end: { line: 31, column: 72, offset: 1068 }
                }
              }
            ],
            position: {
              start: { line: 31, column: 1, offset: 997 },
              end: { line: 31, column: 72, offset: 1068 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'dot delimited - ',
                        position: {
                          start: { line: 33, column: 4, offset: 1073 },
                          end: { line: 33, column: 20, offset: 1089 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "'a.b.c'",
                        position: {
                          start: { line: 33, column: 20, offset: 1089 },
                          end: { line: 33, column: 29, offset: 1098 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 33, column: 4, offset: 1073 },
                      end: { line: 33, column: 29, offset: 1098 }
                    }
                  }
                ],
                position: {
                  start: { line: 33, column: 2, offset: 1071 },
                  end: { line: 33, column: 29, offset: 1098 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'bracket notation - ',
                        position: {
                          start: { line: 34, column: 4, offset: 1102 },
                          end: { line: 34, column: 23, offset: 1121 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "'a[0].value'",
                        position: {
                          start: { line: 34, column: 23, offset: 1121 },
                          end: { line: 34, column: 37, offset: 1135 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 34, column: 4, offset: 1102 },
                      end: { line: 34, column: 37, offset: 1135 }
                    }
                  }
                ],
                position: {
                  start: { line: 34, column: 2, offset: 1100 },
                  end: { line: 34, column: 37, offset: 1135 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'an array of keys or indices - ',
                        position: {
                          start: { line: 35, column: 4, offset: 1139 },
                          end: { line: 35, column: 34, offset: 1169 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "['a', 0, 'value']",
                        position: {
                          start: { line: 35, column: 34, offset: 1169 },
                          end: { line: 35, column: 53, offset: 1188 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 35, column: 4, offset: 1139 },
                      end: { line: 35, column: 53, offset: 1188 }
                    }
                  }
                ],
                position: {
                  start: { line: 35, column: 2, offset: 1137 },
                  end: { line: 35, column: 53, offset: 1188 }
                }
              }
            ],
            position: {
              start: { line: 33, column: 2, offset: 1071 },
              end: { line: 35, column: 53, offset: 1188 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "const getABC0 = get('a.b.c[0]')\n" +
              '\n' +
              "console.log(getABC0({ a: { b: { c: ['hello'] } } })) // hello\n" +
              '\n' +
              "const get00000DotNotation = get('0.0.0.0.0')\n" +
              "const get00000BracketNotation = get('[0][0][0][0][0]')\n" +
              'const get00000ArrayNotation = get([0, 0, 0, 0, 0])\n' +
              '\n' +
              "console.log(get00000DotNotation([[[[['foo']]]]])) // foo\n" +
              "console.log(get00000BracketNotation([[[[['foo']]]]])) // foo\n" +
              "console.log(get00000ArrayNotation([[[[['foo']]]]])) // foo",
            position: {
              start: { line: 37, column: 1, offset: 1190 },
              end: { line: 49, column: 4, offset: 1645 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 51, column: 1, offset: 1647 },
                  end: { line: 51, column: 148, offset: 1794 }
                }
              }
            ],
            position: {
              start: { line: 51, column: 1, offset: 1647 },
              end: { line: 51, column: 148, offset: 1794 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "get(Promise.resolve({ a: 1 }), 'a').then(console.log) // 1",
            position: {
              start: { line: 53, column: 1, offset: 1796 },
              end: { line: 55, column: 4, offset: 1885 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 57, column: 1, offset: 1887 },
                  end: { line: 57, column: 10, offset: 1896 }
                }
              }
            ],
            position: {
              start: { line: 57, column: 1, offset: 1887 },
              end: { line: 57, column: 10, offset: 1896 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 58, column: 5, offset: 1901 },
                              end: { line: 58, column: 9, offset: 1905 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 58, column: 4, offset: 1900 },
                          end: { line: 58, column: 22, offset: 1918 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 58, column: 4, offset: 1900 },
                      end: { line: 58, column: 22, offset: 1918 }
                    }
                  }
                ],
                position: {
                  start: { line: 58, column: 2, offset: 1898 },
                  end: { line: 58, column: 22, offset: 1918 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/all',
                        children: [
                          {
                            type: 'text',
                            value: 'all',
                            position: {
                              start: { line: 59, column: 5, offset: 1923 },
                              end: { line: 59, column: 8, offset: 1926 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 59, column: 4, offset: 1922 },
                          end: { line: 59, column: 20, offset: 1938 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 59, column: 4, offset: 1922 },
                      end: { line: 59, column: 20, offset: 1938 }
                    }
                  }
                ],
                position: {
                  start: { line: 59, column: 2, offset: 1920 },
                  end: { line: 59, column: 20, offset: 1938 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/assign',
                        children: [
                          {
                            type: 'text',
                            value: 'assign',
                            position: {
                              start: { line: 60, column: 5, offset: 1943 },
                              end: { line: 60, column: 11, offset: 1949 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 60, column: 4, offset: 1942 },
                          end: { line: 60, column: 26, offset: 1964 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 60, column: 4, offset: 1942 },
                      end: { line: 60, column: 26, offset: 1964 }
                    }
                  }
                ],
                position: {
                  start: { line: 60, column: 2, offset: 1940 },
                  end: { line: 60, column: 26, offset: 1964 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/set',
                        children: [
                          {
                            type: 'text',
                            value: 'set',
                            position: {
                              start: { line: 61, column: 5, offset: 1969 },
                              end: { line: 61, column: 8, offset: 1972 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 61, column: 4, offset: 1968 },
                          end: { line: 61, column: 20, offset: 1984 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 61, column: 4, offset: 1968 },
                      end: { line: 61, column: 20, offset: 1984 }
                    }
                  }
                ],
                position: {
                  start: { line: 61, column: 2, offset: 1966 },
                  end: { line: 61, column: 20, offset: 1984 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pick',
                        children: [
                          {
                            type: 'text',
                            value: 'pick',
                            position: {
                              start: { line: 62, column: 5, offset: 1989 },
                              end: { line: 62, column: 9, offset: 1993 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 62, column: 4, offset: 1988 },
                          end: { line: 62, column: 22, offset: 2006 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 62, column: 4, offset: 1988 },
                      end: { line: 62, column: 22, offset: 2006 }
                    }
                  }
                ],
                position: {
                  start: { line: 62, column: 2, offset: 1986 },
                  end: { line: 62, column: 22, offset: 2006 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/omit',
                        children: [
                          {
                            type: 'text',
                            value: 'omit',
                            position: {
                              start: { line: 63, column: 5, offset: 2011 },
                              end: { line: 63, column: 9, offset: 2015 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 63, column: 4, offset: 2010 },
                          end: { line: 63, column: 22, offset: 2028 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 63, column: 4, offset: 2010 },
                      end: { line: 63, column: 22, offset: 2028 }
                    }
                  }
                ],
                position: {
                  start: { line: 63, column: 2, offset: 2008 },
                  end: { line: 63, column: 22, offset: 2028 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 64, column: 5, offset: 2033 },
                              end: { line: 64, column: 12, offset: 2040 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 64, column: 4, offset: 2032 },
                          end: { line: 64, column: 28, offset: 2056 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 64, column: 4, offset: 2032 },
                      end: { line: 64, column: 28, offset: 2056 }
                    }
                  }
                ],
                position: {
                  start: { line: 64, column: 2, offset: 2030 },
                  end: { line: 64, column: 28, offset: 2056 }
                }
              }
            ],
            position: {
              start: { line: 58, column: 2, offset: 1898 },
              end: { line: 64, column: 28, offset: 2056 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 64, column: 28, offset: 2056 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/get.js'
  },
  {
    name: 'gt',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncResolver = (...args)=>Promise|any\n' +
      '\n' +
      'leftValue Promise|any\n' +
      'rightValue Promise|any\n' +
      'leftResolver SyncOrAsyncResolver\n' +
      'rightResolver SyncOrAsyncResolver\n' +
      '\n' +
      'gt(leftValue, rightValue) -> Promise|boolean\n' +
      'gt(...argsOrPromises, leftResolver, rightValue) -> Promise|boolean\n' +
      'gt(...argsOrPromises, leftValue, rightResolver) -> Promise|boolean\n' +
      'gt(...argsOrPromises, leftResolver, rightResolver) -> Promise|boolean\n' +
      'gt(leftResolver, rightValue)(...args) -> Promise|boolean\n' +
      'gt(leftValue, rightResolver)(...args) -> Promise|boolean\n' +
      'gt(leftResolver, rightResolver)(...args) -> Promise|boolean\n' +
      '```',
    description: 'Functional equivalent of the [Greater than (>)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than) operator. Tests if a value is greater than (`>`) another value.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const age = 40\n' +
      '\n' +
      'const isAgeGreaterThan21 = gt(age, 21)\n' +
      '\n' +
      'console.log(isAgeGreaterThan21) // true\n' +
      '```\n' +
      '\n' +
      'If either of the two values are resolver functions, `gt` returns a function that resolves the value(s) to compare.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "const isOfLegalAge = gt(get('age'), 21)\n" +
      '\n' +
      'const juvenile = { age: 16 }\n' +
      '\n' +
      'console.log(isOfLegalAge(juvenile)) // false\n' +
      '```\n' +
      '\n' +
      'If either of the resolver functions is asynchronous, `gt` returns an asynchronous function.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncIsOfLegalAge = gt(async person => person.age, 21)\n' +
      '\n' +
      'const juvenile = { age: 16 }\n' +
      '\n' +
      'asyncIsOfLegalAge(juvenile).then(console.log) // false\n' +
      '```\n' +
      '\n' +
      '`gt` supports a lazy API for composability.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'pipe({ value: 1 }, [\n' +
      "  gt(5, get('value')),\n" +
      '  console.log, // true\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "gt(Promise.resolve({ a: 2, b: 1 }), get('a'), get('b')).then(console.log) // true\n" +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [and](/docs/and)\n' +
      ' * [eq](/docs/eq)\n' +
      ' * [lt](/docs/lt)\n' +
      ' * [gte](/docs/gte)\n' +
      ' * [lte](/docs/lte)\n' +
      ' * [thunkify](/docs/thunkify)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'gt',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 3, offset: 2 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 3, offset: 2 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 3, offset: 2 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncResolver = (...args)=>Promise|any\n' +
              '\n' +
              'leftValue Promise|any\n' +
              'rightValue Promise|any\n' +
              'leftResolver SyncOrAsyncResolver\n' +
              'rightResolver SyncOrAsyncResolver\n' +
              '\n' +
              'gt(leftValue, rightValue) -> Promise|boolean\n' +
              'gt(...argsOrPromises, leftResolver, rightValue) -> Promise|boolean\n' +
              'gt(...argsOrPromises, leftValue, rightResolver) -> Promise|boolean\n' +
              'gt(...argsOrPromises, leftResolver, rightResolver) -> Promise|boolean\n' +
              'gt(leftResolver, rightValue)(...args) -> Promise|boolean\n' +
              'gt(leftValue, rightResolver)(...args) -> Promise|boolean\n' +
              'gt(leftResolver, rightResolver)(...args) -> Promise|boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 19, column: 4, offset: 670 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 19, column: 4, offset: 670 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Functional equivalent of the ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than',
                children: [
                  {
                    type: 'text',
                    value: 'Greater than (>)',
                    position: {
                      start: { line: 1, column: 31, offset: 30 },
                      end: { line: 1, column: 47, offset: 46 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 30, offset: 29 },
                  end: { line: 1, column: 138, offset: 137 }
                }
              },
              {
                type: 'text',
                value: ' operator. Tests if a value is greater than (',
                position: {
                  start: { line: 1, column: 138, offset: 137 },
                  end: { line: 1, column: 183, offset: 182 }
                }
              },
              {
                type: 'inlineCode',
                value: '>',
                position: {
                  start: { line: 1, column: 183, offset: 182 },
                  end: { line: 1, column: 186, offset: 185 }
                }
              },
              {
                type: 'text',
                value: ') another value.',
                position: {
                  start: { line: 1, column: 186, offset: 185 },
                  end: { line: 1, column: 202, offset: 201 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 202, offset: 201 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const age = 40\n' +
              '\n' +
              'const isAgeGreaterThan21 = gt(age, 21)\n' +
              '\n' +
              'console.log(isAgeGreaterThan21) // true',
            position: {
              start: { line: 3, column: 1, offset: 203 },
              end: { line: 9, column: 4, offset: 329 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If either of the two values are resolver functions, ',
                position: {
                  start: { line: 11, column: 1, offset: 331 },
                  end: { line: 11, column: 53, offset: 383 }
                }
              },
              {
                type: 'inlineCode',
                value: 'gt',
                position: {
                  start: { line: 11, column: 53, offset: 383 },
                  end: { line: 11, column: 57, offset: 387 }
                }
              },
              {
                type: 'text',
                value: ' returns a function that resolves the value(s) to compare.',
                position: {
                  start: { line: 11, column: 57, offset: 387 },
                  end: { line: 11, column: 115, offset: 445 }
                }
              }
            ],
            position: {
              start: { line: 11, column: 1, offset: 331 },
              end: { line: 11, column: 115, offset: 445 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "const isOfLegalAge = gt(get('age'), 21)\n" +
              '\n' +
              'const juvenile = { age: 16 }\n' +
              '\n' +
              'console.log(isOfLegalAge(juvenile)) // false',
            position: {
              start: { line: 13, column: 1, offset: 447 },
              end: { line: 19, column: 4, offset: 593 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If either of the resolver functions is asynchronous, ',
                position: {
                  start: { line: 21, column: 1, offset: 595 },
                  end: { line: 21, column: 54, offset: 648 }
                }
              },
              {
                type: 'inlineCode',
                value: 'gt',
                position: {
                  start: { line: 21, column: 54, offset: 648 },
                  end: { line: 21, column: 58, offset: 652 }
                }
              },
              {
                type: 'text',
                value: ' returns an asynchronous function.',
                position: {
                  start: { line: 21, column: 58, offset: 652 },
                  end: { line: 21, column: 92, offset: 686 }
                }
              }
            ],
            position: {
              start: { line: 21, column: 1, offset: 595 },
              end: { line: 21, column: 92, offset: 686 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncIsOfLegalAge = gt(async person => person.age, 21)\n' +
              '\n' +
              'const juvenile = { age: 16 }\n' +
              '\n' +
              'asyncIsOfLegalAge(juvenile).then(console.log) // false',
            position: {
              start: { line: 23, column: 1, offset: 688 },
              end: { line: 29, column: 4, offset: 865 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'gt',
                position: {
                  start: { line: 31, column: 1, offset: 867 },
                  end: { line: 31, column: 5, offset: 871 }
                }
              },
              {
                type: 'text',
                value: ' supports a lazy API for composability.',
                position: {
                  start: { line: 31, column: 5, offset: 871 },
                  end: { line: 31, column: 44, offset: 910 }
                }
              }
            ],
            position: {
              start: { line: 31, column: 1, offset: 867 },
              end: { line: 31, column: 44, offset: 910 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'pipe({ value: 1 }, [\n' +
              "  gt(5, get('value')),\n" +
              '  console.log, // true\n' +
              '])',
            position: {
              start: { line: 33, column: 1, offset: 912 },
              end: { line: 38, column: 4, offset: 1012 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 40, column: 1, offset: 1014 },
                  end: { line: 40, column: 148, offset: 1161 }
                }
              }
            ],
            position: {
              start: { line: 40, column: 1, offset: 1014 },
              end: { line: 40, column: 148, offset: 1161 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "gt(Promise.resolve({ a: 2, b: 1 }), get('a'), get('b')).then(console.log) // true",
            position: {
              start: { line: 42, column: 1, offset: 1163 },
              end: { line: 44, column: 4, offset: 1275 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 46, column: 1, offset: 1277 },
                  end: { line: 46, column: 10, offset: 1286 }
                }
              }
            ],
            position: {
              start: { line: 46, column: 1, offset: 1277 },
              end: { line: 46, column: 10, offset: 1286 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/and',
                        children: [
                          {
                            type: 'text',
                            value: 'and',
                            position: {
                              start: { line: 47, column: 5, offset: 1291 },
                              end: { line: 47, column: 8, offset: 1294 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 47, column: 4, offset: 1290 },
                          end: { line: 47, column: 20, offset: 1306 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 47, column: 4, offset: 1290 },
                      end: { line: 47, column: 20, offset: 1306 }
                    }
                  }
                ],
                position: {
                  start: { line: 47, column: 2, offset: 1288 },
                  end: { line: 47, column: 20, offset: 1306 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/eq',
                        children: [
                          {
                            type: 'text',
                            value: 'eq',
                            position: {
                              start: { line: 48, column: 5, offset: 1311 },
                              end: { line: 48, column: 7, offset: 1313 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 48, column: 4, offset: 1310 },
                          end: { line: 48, column: 18, offset: 1324 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 48, column: 4, offset: 1310 },
                      end: { line: 48, column: 18, offset: 1324 }
                    }
                  }
                ],
                position: {
                  start: { line: 48, column: 2, offset: 1308 },
                  end: { line: 48, column: 18, offset: 1324 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/lt',
                        children: [
                          {
                            type: 'text',
                            value: 'lt',
                            position: {
                              start: { line: 49, column: 5, offset: 1329 },
                              end: { line: 49, column: 7, offset: 1331 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 49, column: 4, offset: 1328 },
                          end: { line: 49, column: 18, offset: 1342 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 49, column: 4, offset: 1328 },
                      end: { line: 49, column: 18, offset: 1342 }
                    }
                  }
                ],
                position: {
                  start: { line: 49, column: 2, offset: 1326 },
                  end: { line: 49, column: 18, offset: 1342 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/gte',
                        children: [
                          {
                            type: 'text',
                            value: 'gte',
                            position: {
                              start: { line: 50, column: 5, offset: 1347 },
                              end: { line: 50, column: 8, offset: 1350 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 50, column: 4, offset: 1346 },
                          end: { line: 50, column: 20, offset: 1362 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 50, column: 4, offset: 1346 },
                      end: { line: 50, column: 20, offset: 1362 }
                    }
                  }
                ],
                position: {
                  start: { line: 50, column: 2, offset: 1344 },
                  end: { line: 50, column: 20, offset: 1362 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/lte',
                        children: [
                          {
                            type: 'text',
                            value: 'lte',
                            position: {
                              start: { line: 51, column: 5, offset: 1367 },
                              end: { line: 51, column: 8, offset: 1370 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 51, column: 4, offset: 1366 },
                          end: { line: 51, column: 20, offset: 1382 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 51, column: 4, offset: 1366 },
                      end: { line: 51, column: 20, offset: 1382 }
                    }
                  }
                ],
                position: {
                  start: { line: 51, column: 2, offset: 1364 },
                  end: { line: 51, column: 20, offset: 1382 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 52, column: 5, offset: 1387 },
                              end: { line: 52, column: 13, offset: 1395 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 52, column: 4, offset: 1386 },
                          end: { line: 52, column: 30, offset: 1412 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 52, column: 4, offset: 1386 },
                      end: { line: 52, column: 30, offset: 1412 }
                    }
                  }
                ],
                position: {
                  start: { line: 52, column: 2, offset: 1384 },
                  end: { line: 52, column: 30, offset: 1412 }
                }
              }
            ],
            position: {
              start: { line: 47, column: 2, offset: 1288 },
              end: { line: 52, column: 30, offset: 1412 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 52, column: 30, offset: 1412 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/gt.js'
  },
  {
    name: 'gte',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncResolver = (...args)=>Promise|any\n' +
      '\n' +
      'leftValue Promise|any\n' +
      'rightValue Promise|any\n' +
      'leftResolver SyncOrAsyncResolver\n' +
      'rightResolver SyncOrAsyncResolver\n' +
      '\n' +
      'gte(leftValue, rightValue) -> Promise|boolean\n' +
      'gte(...argsOrPromises, leftResolver, rightValue) -> Promise|boolean\n' +
      'gte(...argsOrPromises, leftValue, rightResolver) -> Promise|boolean\n' +
      'gte(...argsOrPromises, leftResolver, rightResolver) -> Promise|boolean\n' +
      'gte(leftResolver, rightValue)(...args) -> Promise|boolean\n' +
      'gte(leftValue, rightResolver)(...args) -> Promise|boolean\n' +
      'gte(leftResolver, rightResolver)(...args) -> Promise|boolean\n' +
      '```',
    description: 'Functional equivalent of the [Greater than or equal (>=)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal) operator. Tests if a value is greater than or equal (`>=`) to another value.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const age = 20\n' +
      '\n' +
      'const isAdultAge = gte(age, 18)\n' +
      '\n' +
      'console.log(isAdultAge) // true\n' +
      '```\n' +
      '\n' +
      'If either of the two values are resolver functions, `gte` returns a function that resolves the value(s) to compare.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const identity = value => value\n' +
      '\n' +
      'const isAtLeast100 = gte(identity, 100)\n' +
      '\n' +
      'console.log(isAtLeast100(99)) // false\n' +
      'console.log(isAtLeast100(100)) // true\n' +
      'console.log(isAtLeast100(101)) // true\n' +
      '```\n' +
      '\n' +
      'If either of the two resolver functions is asynchronous, `gte` returns an asynchronous function.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncIdentity = async value => value\n' +
      '\n' +
      'const asyncIsAtLeast100 = gte(asyncIdentity, 100)\n' +
      '\n' +
      'asyncIsAtLeast100(99).then(console.log) // false\n' +
      'asyncIsAtLeast100(100).then(console.log) // true\n' +
      'asyncIsAtLeast100(101).then(console.log) // true\n' +
      '```\n' +
      '\n' +
      '`gte` supports a lazy API for composability.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'pipe({ value: 1 }, [\n' +
      "  gte(1, get('value')),\n" +
      '  console.log, // true\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "gte(Promise.resolve({ a: 1, b: 1 }), get('a'), get('b')).then(console.log) // true\n" +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [and](/docs/and)\n' +
      ' * [eq](/docs/eq)\n' +
      ' * [lt](/docs/lt)\n' +
      ' * [gt](/docs/gt)\n' +
      ' * [lte](/docs/lte)\n' +
      ' * [thunkify](/docs/thunkify)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'gte',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 4, offset: 3 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 4, offset: 3 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncResolver = (...args)=>Promise|any\n' +
              '\n' +
              'leftValue Promise|any\n' +
              'rightValue Promise|any\n' +
              'leftResolver SyncOrAsyncResolver\n' +
              'rightResolver SyncOrAsyncResolver\n' +
              '\n' +
              'gte(leftValue, rightValue) -> Promise|boolean\n' +
              'gte(...argsOrPromises, leftResolver, rightValue) -> Promise|boolean\n' +
              'gte(...argsOrPromises, leftValue, rightResolver) -> Promise|boolean\n' +
              'gte(...argsOrPromises, leftResolver, rightResolver) -> Promise|boolean\n' +
              'gte(leftResolver, rightValue)(...args) -> Promise|boolean\n' +
              'gte(leftValue, rightResolver)(...args) -> Promise|boolean\n' +
              'gte(leftResolver, rightResolver)(...args) -> Promise|boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 19, column: 4, offset: 677 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 19, column: 4, offset: 677 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Functional equivalent of the ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal',
                children: [
                  {
                    type: 'text',
                    value: 'Greater than or equal (>=)',
                    position: {
                      start: { line: 1, column: 31, offset: 30 },
                      end: { line: 1, column: 57, offset: 56 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 30, offset: 29 },
                  end: { line: 1, column: 157, offset: 156 }
                }
              },
              {
                type: 'text',
                value: ' operator. Tests if a value is greater than or equal (',
                position: {
                  start: { line: 1, column: 157, offset: 156 },
                  end: { line: 1, column: 211, offset: 210 }
                }
              },
              {
                type: 'inlineCode',
                value: '>=',
                position: {
                  start: { line: 1, column: 211, offset: 210 },
                  end: { line: 1, column: 215, offset: 214 }
                }
              },
              {
                type: 'text',
                value: ') to another value.',
                position: {
                  start: { line: 1, column: 215, offset: 214 },
                  end: { line: 1, column: 234, offset: 233 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 234, offset: 233 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const age = 20\n' +
              '\n' +
              'const isAdultAge = gte(age, 18)\n' +
              '\n' +
              'console.log(isAdultAge) // true',
            position: {
              start: { line: 3, column: 1, offset: 235 },
              end: { line: 9, column: 4, offset: 346 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If either of the two values are resolver functions, ',
                position: {
                  start: { line: 11, column: 1, offset: 348 },
                  end: { line: 11, column: 53, offset: 400 }
                }
              },
              {
                type: 'inlineCode',
                value: 'gte',
                position: {
                  start: { line: 11, column: 53, offset: 400 },
                  end: { line: 11, column: 58, offset: 405 }
                }
              },
              {
                type: 'text',
                value: ' returns a function that resolves the value(s) to compare.',
                position: {
                  start: { line: 11, column: 58, offset: 405 },
                  end: { line: 11, column: 116, offset: 463 }
                }
              }
            ],
            position: {
              start: { line: 11, column: 1, offset: 348 },
              end: { line: 11, column: 116, offset: 463 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const identity = value => value\n' +
              '\n' +
              'const isAtLeast100 = gte(identity, 100)\n' +
              '\n' +
              'console.log(isAtLeast100(99)) // false\n' +
              'console.log(isAtLeast100(100)) // true\n' +
              'console.log(isAtLeast100(101)) // true',
            position: {
              start: { line: 13, column: 1, offset: 465 },
              end: { line: 21, column: 4, offset: 686 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If either of the two resolver functions is asynchronous, ',
                position: {
                  start: { line: 23, column: 1, offset: 688 },
                  end: { line: 23, column: 58, offset: 745 }
                }
              },
              {
                type: 'inlineCode',
                value: 'gte',
                position: {
                  start: { line: 23, column: 58, offset: 745 },
                  end: { line: 23, column: 63, offset: 750 }
                }
              },
              {
                type: 'text',
                value: ' returns an asynchronous function.',
                position: {
                  start: { line: 23, column: 63, offset: 750 },
                  end: { line: 23, column: 97, offset: 784 }
                }
              }
            ],
            position: {
              start: { line: 23, column: 1, offset: 688 },
              end: { line: 23, column: 97, offset: 784 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncIdentity = async value => value\n' +
              '\n' +
              'const asyncIsAtLeast100 = gte(asyncIdentity, 100)\n' +
              '\n' +
              'asyncIsAtLeast100(99).then(console.log) // false\n' +
              'asyncIsAtLeast100(100).then(console.log) // true\n' +
              'asyncIsAtLeast100(101).then(console.log) // true',
            position: {
              start: { line: 25, column: 1, offset: 786 },
              end: { line: 33, column: 4, offset: 1058 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'gte',
                position: {
                  start: { line: 35, column: 1, offset: 1060 },
                  end: { line: 35, column: 6, offset: 1065 }
                }
              },
              {
                type: 'text',
                value: ' supports a lazy API for composability.',
                position: {
                  start: { line: 35, column: 6, offset: 1065 },
                  end: { line: 35, column: 45, offset: 1104 }
                }
              }
            ],
            position: {
              start: { line: 35, column: 1, offset: 1060 },
              end: { line: 35, column: 45, offset: 1104 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'pipe({ value: 1 }, [\n' +
              "  gte(1, get('value')),\n" +
              '  console.log, // true\n' +
              '])',
            position: {
              start: { line: 37, column: 1, offset: 1106 },
              end: { line: 42, column: 4, offset: 1207 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 44, column: 1, offset: 1209 },
                  end: { line: 44, column: 148, offset: 1356 }
                }
              }
            ],
            position: {
              start: { line: 44, column: 1, offset: 1209 },
              end: { line: 44, column: 148, offset: 1356 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "gte(Promise.resolve({ a: 1, b: 1 }), get('a'), get('b')).then(console.log) // true",
            position: {
              start: { line: 46, column: 1, offset: 1358 },
              end: { line: 48, column: 4, offset: 1471 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 50, column: 1, offset: 1473 },
                  end: { line: 50, column: 10, offset: 1482 }
                }
              }
            ],
            position: {
              start: { line: 50, column: 1, offset: 1473 },
              end: { line: 50, column: 10, offset: 1482 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/and',
                        children: [
                          {
                            type: 'text',
                            value: 'and',
                            position: {
                              start: { line: 51, column: 5, offset: 1487 },
                              end: { line: 51, column: 8, offset: 1490 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 51, column: 4, offset: 1486 },
                          end: { line: 51, column: 20, offset: 1502 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 51, column: 4, offset: 1486 },
                      end: { line: 51, column: 20, offset: 1502 }
                    }
                  }
                ],
                position: {
                  start: { line: 51, column: 2, offset: 1484 },
                  end: { line: 51, column: 20, offset: 1502 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/eq',
                        children: [
                          {
                            type: 'text',
                            value: 'eq',
                            position: {
                              start: { line: 52, column: 5, offset: 1507 },
                              end: { line: 52, column: 7, offset: 1509 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 52, column: 4, offset: 1506 },
                          end: { line: 52, column: 18, offset: 1520 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 52, column: 4, offset: 1506 },
                      end: { line: 52, column: 18, offset: 1520 }
                    }
                  }
                ],
                position: {
                  start: { line: 52, column: 2, offset: 1504 },
                  end: { line: 52, column: 18, offset: 1520 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/lt',
                        children: [
                          {
                            type: 'text',
                            value: 'lt',
                            position: {
                              start: { line: 53, column: 5, offset: 1525 },
                              end: { line: 53, column: 7, offset: 1527 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 53, column: 4, offset: 1524 },
                          end: { line: 53, column: 18, offset: 1538 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 53, column: 4, offset: 1524 },
                      end: { line: 53, column: 18, offset: 1538 }
                    }
                  }
                ],
                position: {
                  start: { line: 53, column: 2, offset: 1522 },
                  end: { line: 53, column: 18, offset: 1538 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/gt',
                        children: [
                          {
                            type: 'text',
                            value: 'gt',
                            position: {
                              start: { line: 54, column: 5, offset: 1543 },
                              end: { line: 54, column: 7, offset: 1545 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 54, column: 4, offset: 1542 },
                          end: { line: 54, column: 18, offset: 1556 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 54, column: 4, offset: 1542 },
                      end: { line: 54, column: 18, offset: 1556 }
                    }
                  }
                ],
                position: {
                  start: { line: 54, column: 2, offset: 1540 },
                  end: { line: 54, column: 18, offset: 1556 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/lte',
                        children: [
                          {
                            type: 'text',
                            value: 'lte',
                            position: {
                              start: { line: 55, column: 5, offset: 1561 },
                              end: { line: 55, column: 8, offset: 1564 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 55, column: 4, offset: 1560 },
                          end: { line: 55, column: 20, offset: 1576 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 55, column: 4, offset: 1560 },
                      end: { line: 55, column: 20, offset: 1576 }
                    }
                  }
                ],
                position: {
                  start: { line: 55, column: 2, offset: 1558 },
                  end: { line: 55, column: 20, offset: 1576 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 56, column: 5, offset: 1581 },
                              end: { line: 56, column: 13, offset: 1589 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 56, column: 4, offset: 1580 },
                          end: { line: 56, column: 30, offset: 1606 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 56, column: 4, offset: 1580 },
                      end: { line: 56, column: 30, offset: 1606 }
                    }
                  }
                ],
                position: {
                  start: { line: 56, column: 2, offset: 1578 },
                  end: { line: 56, column: 30, offset: 1606 }
                }
              }
            ],
            position: {
              start: { line: 51, column: 2, offset: 1484 },
              end: { line: 56, column: 30, offset: 1606 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 56, column: 30, offset: 1606 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/gte.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/index.js'
  },
  {
    name: 'lt',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncResolver = (...args)=>Promise|any\n' +
      '\n' +
      'leftValue Promise|any\n' +
      'rightValue Promise|any\n' +
      'leftResolver SyncOrAsyncResolver\n' +
      'rightResolver SyncOrAsyncResolver\n' +
      '\n' +
      'lt(leftValue, rightValue) -> Promise|boolean\n' +
      'lt(...argsOrPromises, leftResolver, rightValue) -> Promise|boolean\n' +
      'lt(...argsOrPromises, leftValue, rightResolver) -> Promise|boolean\n' +
      'lt(...argsOrPromises, leftResolver, rightResolver) -> Promise|boolean\n' +
      'lt(leftResolver, rightValue)(...args) -> Promise|boolean\n' +
      'lt(leftValue, rightResolver)(...args) -> Promise|boolean\n' +
      'lt(leftResolver, rightResolver)(...args) -> Promise|boolean\n' +
      '```',
    description: 'Functional equivalent of the [Less than (<)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than) operator. Tests if a value is less than (`<`) another value.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'console.log(lt(1, 3)) // true\n' +
      'console.log(lt(3, 3)) // false\n' +
      'console.log(lt(4, 3)) // false\n' +
      '```\n' +
      '\n' +
      'If either of the two values are resolver functions, `lt` returns a function that resolves the value(s) to compare.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const identity = value => value\n' +
      '\n' +
      'const isLessThan3 = lt(identity, 3)\n' +
      '\n' +
      'console.log(isLessThan3(1)) // true\n' +
      'console.log(isLessThan3(3)) // false\n' +
      'console.log(isLessThan3(5)) // false\n' +
      '```\n' +
      '\n' +
      'If either of the resolver functions is asynchronous, `lt` returns an asynchronous function.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncIdentity = async value => value\n' +
      '\n' +
      'const asyncIsLessThan3 = lt(asyncIdentity, 3)\n' +
      '\n' +
      'asyncIsLessThan3(1).then(console.log) // true\n' +
      'asyncIsLessThan3(3).then(console.log) // false\n' +
      'asyncIsLessThan3(5).then(console.log) // false\n' +
      '```\n' +
      '\n' +
      '`lt` supports a lazy API for composability.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'pipe({ value: 1 }, [\n' +
      "  lt(0, get('value')),\n" +
      '  console.log, // true\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "lt(Promise.resolve({ a: 1, b: 2 }), get('a'), get('b')).then(console.log) // true\n" +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'lt',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 3, offset: 2 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 3, offset: 2 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 3, offset: 2 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncResolver = (...args)=>Promise|any\n' +
              '\n' +
              'leftValue Promise|any\n' +
              'rightValue Promise|any\n' +
              'leftResolver SyncOrAsyncResolver\n' +
              'rightResolver SyncOrAsyncResolver\n' +
              '\n' +
              'lt(leftValue, rightValue) -> Promise|boolean\n' +
              'lt(...argsOrPromises, leftResolver, rightValue) -> Promise|boolean\n' +
              'lt(...argsOrPromises, leftValue, rightResolver) -> Promise|boolean\n' +
              'lt(...argsOrPromises, leftResolver, rightResolver) -> Promise|boolean\n' +
              'lt(leftResolver, rightValue)(...args) -> Promise|boolean\n' +
              'lt(leftValue, rightResolver)(...args) -> Promise|boolean\n' +
              'lt(leftResolver, rightResolver)(...args) -> Promise|boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 19, column: 4, offset: 670 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 19, column: 4, offset: 670 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Functional equivalent of the ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than',
                children: [
                  {
                    type: 'text',
                    value: 'Less than (<)',
                    position: {
                      start: { line: 1, column: 31, offset: 30 },
                      end: { line: 1, column: 44, offset: 43 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 30, offset: 29 },
                  end: { line: 1, column: 132, offset: 131 }
                }
              },
              {
                type: 'text',
                value: ' operator. Tests if a value is less than (',
                position: {
                  start: { line: 1, column: 132, offset: 131 },
                  end: { line: 1, column: 174, offset: 173 }
                }
              },
              {
                type: 'inlineCode',
                value: '<',
                position: {
                  start: { line: 1, column: 174, offset: 173 },
                  end: { line: 1, column: 177, offset: 176 }
                }
              },
              {
                type: 'text',
                value: ') another value.',
                position: {
                  start: { line: 1, column: 177, offset: 176 },
                  end: { line: 1, column: 193, offset: 192 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 193, offset: 192 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'console.log(lt(1, 3)) // true\n' +
              'console.log(lt(3, 3)) // false\n' +
              'console.log(lt(4, 3)) // false',
            position: {
              start: { line: 3, column: 1, offset: 194 },
              end: { line: 7, column: 4, offset: 316 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If either of the two values are resolver functions, ',
                position: {
                  start: { line: 9, column: 1, offset: 318 },
                  end: { line: 9, column: 53, offset: 370 }
                }
              },
              {
                type: 'inlineCode',
                value: 'lt',
                position: {
                  start: { line: 9, column: 53, offset: 370 },
                  end: { line: 9, column: 57, offset: 374 }
                }
              },
              {
                type: 'text',
                value: ' returns a function that resolves the value(s) to compare.',
                position: {
                  start: { line: 9, column: 57, offset: 374 },
                  end: { line: 9, column: 115, offset: 432 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 318 },
              end: { line: 9, column: 115, offset: 432 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const identity = value => value\n' +
              '\n' +
              'const isLessThan3 = lt(identity, 3)\n' +
              '\n' +
              'console.log(isLessThan3(1)) // true\n' +
              'console.log(isLessThan3(3)) // false\n' +
              'console.log(isLessThan3(5)) // false',
            position: {
              start: { line: 11, column: 1, offset: 434 },
              end: { line: 19, column: 4, offset: 644 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If either of the resolver functions is asynchronous, ',
                position: {
                  start: { line: 21, column: 1, offset: 646 },
                  end: { line: 21, column: 54, offset: 699 }
                }
              },
              {
                type: 'inlineCode',
                value: 'lt',
                position: {
                  start: { line: 21, column: 54, offset: 699 },
                  end: { line: 21, column: 58, offset: 703 }
                }
              },
              {
                type: 'text',
                value: ' returns an asynchronous function.',
                position: {
                  start: { line: 21, column: 58, offset: 703 },
                  end: { line: 21, column: 92, offset: 737 }
                }
              }
            ],
            position: {
              start: { line: 21, column: 1, offset: 646 },
              end: { line: 21, column: 92, offset: 737 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncIdentity = async value => value\n' +
              '\n' +
              'const asyncIsLessThan3 = lt(asyncIdentity, 3)\n' +
              '\n' +
              'asyncIsLessThan3(1).then(console.log) // true\n' +
              'asyncIsLessThan3(3).then(console.log) // false\n' +
              'asyncIsLessThan3(5).then(console.log) // false',
            position: {
              start: { line: 23, column: 1, offset: 739 },
              end: { line: 31, column: 4, offset: 1000 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'lt',
                position: {
                  start: { line: 33, column: 1, offset: 1002 },
                  end: { line: 33, column: 5, offset: 1006 }
                }
              },
              {
                type: 'text',
                value: ' supports a lazy API for composability.',
                position: {
                  start: { line: 33, column: 5, offset: 1006 },
                  end: { line: 33, column: 44, offset: 1045 }
                }
              }
            ],
            position: {
              start: { line: 33, column: 1, offset: 1002 },
              end: { line: 33, column: 44, offset: 1045 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'pipe({ value: 1 }, [\n' +
              "  lt(0, get('value')),\n" +
              '  console.log, // true\n' +
              '])',
            position: {
              start: { line: 35, column: 1, offset: 1047 },
              end: { line: 40, column: 4, offset: 1147 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 42, column: 1, offset: 1149 },
                  end: { line: 42, column: 148, offset: 1296 }
                }
              }
            ],
            position: {
              start: { line: 42, column: 1, offset: 1149 },
              end: { line: 42, column: 148, offset: 1296 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "lt(Promise.resolve({ a: 1, b: 2 }), get('a'), get('b')).then(console.log) // true",
            position: {
              start: { line: 44, column: 1, offset: 1298 },
              end: { line: 46, column: 4, offset: 1410 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 46, column: 4, offset: 1410 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/lt.js'
  },
  {
    name: 'lte',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncResolver = (...args)=>Promise|any\n' +
      '\n' +
      'leftValue Promise|any\n' +
      'rightValue Promise|any\n' +
      'leftResolver SyncOrAsyncResolver\n' +
      'rightResolver SyncOrAsyncResolver\n' +
      '\n' +
      'lte(leftValue, rightValue) -> Promise|boolean\n' +
      'lte(...argsOrPromises, leftResolver, rightValue) -> Promise|boolean\n' +
      'lte(...argsOrPromises, leftValue, rightResolver) -> Promise|boolean\n' +
      'lte(...argsOrPromises, leftResolver, rightResolver) -> Promise|boolean\n' +
      'lte(leftResolver, rightValue)(...args) -> Promise|boolean\n' +
      'lte(leftValue, rightResolver)(...args) -> Promise|boolean\n' +
      'lte(leftResolver, rightResolver)(...args) -> Promise|boolean\n' +
      '```',
    description: 'Functional equivalent of the [Less than or equal (>=)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal) operator. Tests if a value is less than or equal (`<=`) to another value.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'console.log(lte(1, 3)) // true\n' +
      'console.log(lte(3, 3)) // true\n' +
      'console.log(lte(4, 3)) // false\n' +
      '```\n' +
      '\n' +
      'If either of the two values are resolver functions, `lte` returns a function that resolves the value(s) to compare.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const identity = value => value\n' +
      '\n' +
      'const isLessThanOrEqualTo3 = lte(identity, 3)\n' +
      '\n' +
      'console.log(isLessThanOrEqualTo3(1)) // true\n' +
      'console.log(isLessThanOrEqualTo3(3)) // true\n' +
      'console.log(isLessThanOrEqualTo3(5)) // false\n' +
      '```\n' +
      '\n' +
      'If either of the two resolver functions is asynchronous, `lte` returns an asynchronous function.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncIdentity = async value => value\n' +
      '\n' +
      'const asyncIsLessThanOrEqualTo3 = lte(asyncIdentity, 3)\n' +
      '\n' +
      'asyncIsLessThanOrEqualTo3(1).then(console.log) // true\n' +
      'asyncIsLessThanOrEqualTo3(3).then(console.log) // true\n' +
      'asyncIsLessThanOrEqualTo3(5).then(console.log) // false\n' +
      '```\n' +
      '\n' +
      '`lte` supports a lazy API for composability.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'pipe({ value: 1 }, [\n' +
      "  lte(1, get('value')),\n" +
      '  console.log, // true\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "lte(Promise.resolve({ a: 1, b: 1 }), get('a'), get('b')).then(console.log) // true\n" +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [and](/docs/and)\n' +
      ' * [eq](/docs/eq)\n' +
      ' * [lt](/docs/lt)\n' +
      ' * [gt](/docs/gt)\n' +
      ' * [gte](/docs/gte)\n' +
      ' * [thunkify](/docs/thunkify)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'lte',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 4, offset: 3 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 4, offset: 3 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncResolver = (...args)=>Promise|any\n' +
              '\n' +
              'leftValue Promise|any\n' +
              'rightValue Promise|any\n' +
              'leftResolver SyncOrAsyncResolver\n' +
              'rightResolver SyncOrAsyncResolver\n' +
              '\n' +
              'lte(leftValue, rightValue) -> Promise|boolean\n' +
              'lte(...argsOrPromises, leftResolver, rightValue) -> Promise|boolean\n' +
              'lte(...argsOrPromises, leftValue, rightResolver) -> Promise|boolean\n' +
              'lte(...argsOrPromises, leftResolver, rightResolver) -> Promise|boolean\n' +
              'lte(leftResolver, rightValue)(...args) -> Promise|boolean\n' +
              'lte(leftValue, rightResolver)(...args) -> Promise|boolean\n' +
              'lte(leftResolver, rightResolver)(...args) -> Promise|boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 19, column: 4, offset: 677 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 19, column: 4, offset: 677 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Functional equivalent of the ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal',
                children: [
                  {
                    type: 'text',
                    value: 'Less than or equal (>=)',
                    position: {
                      start: { line: 1, column: 31, offset: 30 },
                      end: { line: 1, column: 54, offset: 53 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 30, offset: 29 },
                  end: { line: 1, column: 151, offset: 150 }
                }
              },
              {
                type: 'text',
                value: ' operator. Tests if a value is less than or equal (',
                position: {
                  start: { line: 1, column: 151, offset: 150 },
                  end: { line: 1, column: 202, offset: 201 }
                }
              },
              {
                type: 'inlineCode',
                value: '<=',
                position: {
                  start: { line: 1, column: 202, offset: 201 },
                  end: { line: 1, column: 206, offset: 205 }
                }
              },
              {
                type: 'text',
                value: ') to another value.',
                position: {
                  start: { line: 1, column: 206, offset: 205 },
                  end: { line: 1, column: 225, offset: 224 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 225, offset: 224 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'console.log(lte(1, 3)) // true\n' +
              'console.log(lte(3, 3)) // true\n' +
              'console.log(lte(4, 3)) // false',
            position: {
              start: { line: 3, column: 1, offset: 226 },
              end: { line: 7, column: 4, offset: 350 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If either of the two values are resolver functions, ',
                position: {
                  start: { line: 9, column: 1, offset: 352 },
                  end: { line: 9, column: 53, offset: 404 }
                }
              },
              {
                type: 'inlineCode',
                value: 'lte',
                position: {
                  start: { line: 9, column: 53, offset: 404 },
                  end: { line: 9, column: 58, offset: 409 }
                }
              },
              {
                type: 'text',
                value: ' returns a function that resolves the value(s) to compare.',
                position: {
                  start: { line: 9, column: 58, offset: 409 },
                  end: { line: 9, column: 116, offset: 467 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 352 },
              end: { line: 9, column: 116, offset: 467 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const identity = value => value\n' +
              '\n' +
              'const isLessThanOrEqualTo3 = lte(identity, 3)\n' +
              '\n' +
              'console.log(isLessThanOrEqualTo3(1)) // true\n' +
              'console.log(isLessThanOrEqualTo3(3)) // true\n' +
              'console.log(isLessThanOrEqualTo3(5)) // false',
            position: {
              start: { line: 11, column: 1, offset: 469 },
              end: { line: 19, column: 4, offset: 715 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If either of the two resolver functions is asynchronous, ',
                position: {
                  start: { line: 21, column: 1, offset: 717 },
                  end: { line: 21, column: 58, offset: 774 }
                }
              },
              {
                type: 'inlineCode',
                value: 'lte',
                position: {
                  start: { line: 21, column: 58, offset: 774 },
                  end: { line: 21, column: 63, offset: 779 }
                }
              },
              {
                type: 'text',
                value: ' returns an asynchronous function.',
                position: {
                  start: { line: 21, column: 63, offset: 779 },
                  end: { line: 21, column: 97, offset: 813 }
                }
              }
            ],
            position: {
              start: { line: 21, column: 1, offset: 717 },
              end: { line: 21, column: 97, offset: 813 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncIdentity = async value => value\n' +
              '\n' +
              'const asyncIsLessThanOrEqualTo3 = lte(asyncIdentity, 3)\n' +
              '\n' +
              'asyncIsLessThanOrEqualTo3(1).then(console.log) // true\n' +
              'asyncIsLessThanOrEqualTo3(3).then(console.log) // true\n' +
              'asyncIsLessThanOrEqualTo3(5).then(console.log) // false',
            position: {
              start: { line: 23, column: 1, offset: 815 },
              end: { line: 31, column: 4, offset: 1112 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'lte',
                position: {
                  start: { line: 33, column: 1, offset: 1114 },
                  end: { line: 33, column: 6, offset: 1119 }
                }
              },
              {
                type: 'text',
                value: ' supports a lazy API for composability.',
                position: {
                  start: { line: 33, column: 6, offset: 1119 },
                  end: { line: 33, column: 45, offset: 1158 }
                }
              }
            ],
            position: {
              start: { line: 33, column: 1, offset: 1114 },
              end: { line: 33, column: 45, offset: 1158 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'pipe({ value: 1 }, [\n' +
              "  lte(1, get('value')),\n" +
              '  console.log, // true\n' +
              '])',
            position: {
              start: { line: 35, column: 1, offset: 1160 },
              end: { line: 40, column: 4, offset: 1261 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 42, column: 1, offset: 1263 },
                  end: { line: 42, column: 148, offset: 1410 }
                }
              }
            ],
            position: {
              start: { line: 42, column: 1, offset: 1263 },
              end: { line: 42, column: 148, offset: 1410 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "lte(Promise.resolve({ a: 1, b: 1 }), get('a'), get('b')).then(console.log) // true",
            position: {
              start: { line: 44, column: 1, offset: 1412 },
              end: { line: 46, column: 4, offset: 1525 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 48, column: 1, offset: 1527 },
                  end: { line: 48, column: 10, offset: 1536 }
                }
              }
            ],
            position: {
              start: { line: 48, column: 1, offset: 1527 },
              end: { line: 48, column: 10, offset: 1536 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/and',
                        children: [
                          {
                            type: 'text',
                            value: 'and',
                            position: {
                              start: { line: 49, column: 5, offset: 1541 },
                              end: { line: 49, column: 8, offset: 1544 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 49, column: 4, offset: 1540 },
                          end: { line: 49, column: 20, offset: 1556 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 49, column: 4, offset: 1540 },
                      end: { line: 49, column: 20, offset: 1556 }
                    }
                  }
                ],
                position: {
                  start: { line: 49, column: 2, offset: 1538 },
                  end: { line: 49, column: 20, offset: 1556 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/eq',
                        children: [
                          {
                            type: 'text',
                            value: 'eq',
                            position: {
                              start: { line: 50, column: 5, offset: 1561 },
                              end: { line: 50, column: 7, offset: 1563 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 50, column: 4, offset: 1560 },
                          end: { line: 50, column: 18, offset: 1574 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 50, column: 4, offset: 1560 },
                      end: { line: 50, column: 18, offset: 1574 }
                    }
                  }
                ],
                position: {
                  start: { line: 50, column: 2, offset: 1558 },
                  end: { line: 50, column: 18, offset: 1574 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/lt',
                        children: [
                          {
                            type: 'text',
                            value: 'lt',
                            position: {
                              start: { line: 51, column: 5, offset: 1579 },
                              end: { line: 51, column: 7, offset: 1581 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 51, column: 4, offset: 1578 },
                          end: { line: 51, column: 18, offset: 1592 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 51, column: 4, offset: 1578 },
                      end: { line: 51, column: 18, offset: 1592 }
                    }
                  }
                ],
                position: {
                  start: { line: 51, column: 2, offset: 1576 },
                  end: { line: 51, column: 18, offset: 1592 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/gt',
                        children: [
                          {
                            type: 'text',
                            value: 'gt',
                            position: {
                              start: { line: 52, column: 5, offset: 1597 },
                              end: { line: 52, column: 7, offset: 1599 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 52, column: 4, offset: 1596 },
                          end: { line: 52, column: 18, offset: 1610 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 52, column: 4, offset: 1596 },
                      end: { line: 52, column: 18, offset: 1610 }
                    }
                  }
                ],
                position: {
                  start: { line: 52, column: 2, offset: 1594 },
                  end: { line: 52, column: 18, offset: 1610 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/gte',
                        children: [
                          {
                            type: 'text',
                            value: 'gte',
                            position: {
                              start: { line: 53, column: 5, offset: 1615 },
                              end: { line: 53, column: 8, offset: 1618 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 53, column: 4, offset: 1614 },
                          end: { line: 53, column: 20, offset: 1630 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 53, column: 4, offset: 1614 },
                      end: { line: 53, column: 20, offset: 1630 }
                    }
                  }
                ],
                position: {
                  start: { line: 53, column: 2, offset: 1612 },
                  end: { line: 53, column: 20, offset: 1630 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/thunkify',
                        children: [
                          {
                            type: 'text',
                            value: 'thunkify',
                            position: {
                              start: { line: 54, column: 5, offset: 1635 },
                              end: { line: 54, column: 13, offset: 1643 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 54, column: 4, offset: 1634 },
                          end: { line: 54, column: 30, offset: 1660 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 54, column: 4, offset: 1634 },
                      end: { line: 54, column: 30, offset: 1660 }
                    }
                  }
                ],
                position: {
                  start: { line: 54, column: 2, offset: 1632 },
                  end: { line: 54, column: 30, offset: 1660 }
                }
              }
            ],
            position: {
              start: { line: 49, column: 2, offset: 1538 },
              end: { line: 54, column: 30, offset: 1660 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 54, column: 30, offset: 1660 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/lte.js'
  },
  {
    name: '_map',
    synopsis: '```coffeescript [specscript]\n' +
      '_map(\n' +
      '  array Array,\n' +
      '  arrayMapper (value any, index number, array Array)=>Promise|any\n' +
      ') -> mappedArray Promise|Array\n' +
      '\n' +
      '_map(\n' +
      '  object Object,\n' +
      '  objectMapper (value any, key string, object Object)=>Promise|any\n' +
      ') -> mappedObject Promise|Array\n' +
      '\n' +
      '_map(\n' +
      '  set Set,\n' +
      '  setMapper (value any, value, set Set)=>Promise|any\n' +
      ') -> mappedSet Promise|Set\n' +
      '\n' +
      '_map(\n' +
      '  originalMap Map,\n' +
      '  mapMapper (value any, key any, originalMap Map)=>Promise|any\n' +
      ') -> mappedMap Promise|Map\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_map',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_map(\n' +
              '  array Array,\n' +
              '  arrayMapper (value any, index number, array Array)=>Promise|any\n' +
              ') -> mappedArray Promise|Array\n' +
              '\n' +
              '_map(\n' +
              '  object Object,\n' +
              '  objectMapper (value any, key string, object Object)=>Promise|any\n' +
              ') -> mappedObject Promise|Array\n' +
              '\n' +
              '_map(\n' +
              '  set Set,\n' +
              '  setMapper (value any, value, set Set)=>Promise|any\n' +
              ') -> mappedSet Promise|Set\n' +
              '\n' +
              '_map(\n' +
              '  originalMap Map,\n' +
              '  mapMapper (value any, key any, originalMap Map)=>Promise|any\n' +
              ') -> mappedMap Promise|Map',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 21, column: 4, offset: 487 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 21, column: 4, offset: 487 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/map.js'
  },
  {
    name: 'map',
    synopsis: '```coffeescript [specscript]\n' +
      'type Functor = Array|Set|Map|Generator|AsyncGenerator|{ map: function }|Object\n' +
      '\n' +
      'type SyncOrAsyncMapper = (\n' +
      '  element any,\n' +
      '  indexOrKey number|string|any,\n' +
      '  functor Functor\n' +
      ')=>(resultElement Promise|any)\n' +
      '\n' +
      'map(functor Promise|Functor, mapper SyncOrAsyncMapper) -> result Promise|Functor\n' +
      'map(mapper SyncOrAsyncMapper)(functor Functor) -> result Promise|Functor\n' +
      '```',
    description: 'Applies a mapper function to each element of a functor, returning a functor of the same type with the mapped elements. The order of the elements is maintained.\n' +
      '\n' +
      'The following data types are considered to be functors:\n' +
      ' * `array`\n' +
      ' * `set`\n' +
      ' * `map`\n' +
      ' * `generator`\n' +
      ' * `async generator`\n' +
      ' * `object with .map method`\n' +
      ' * `object`\n' +
      '\n' +
      'The mapper function defines a mapping between a given element in the functor to a resulting element in the returned functor.\n' +
      '\n' +
      '```javascript\n' +
      'const mapper = function (element) {\n' +
      '  // resultElement is the result of a mapping from element\n' +
      '  return resultElement\n' +
      '}\n' +
      '```\n' +
      '\n' +
      'The mapper function signature changes depending on the provided functor.\n' +
      '\n' +
      'If the functor is an array:\n' +
      '```coffeescript [specscript]\n' +
      'mapper(element any, index number, ftor Array) -> resultElement Promise|any\n' +
      '```\n' +
      '\n' +
      'If the functor is a set:\n' +
      '```coffeescript [specscript]\n' +
      'mapper(element any, element any, ftor Set) -> resultElement Promise|any\n' +
      '```\n' +
      '\n' +
      'If the functor is a map:\n' +
      '```coffeescript [specscript]\n' +
      'mapper(element any, key any, ftor Map) -> resultElement Promise|any\n' +
      '```\n' +
      '\n' +
      'If the functor is a generator:\n' +
      '```coffeescript [specscript]\n' +
      'mapper(element any) -> resultElement Promise|any\n' +
      '```\n' +
      '\n' +
      'If the functor is an async generator:\n' +
      '```coffeescript [specscript]\n' +
      'mapper(element any) -> resultElement Promise|any\n' +
      '```\n' +
      '\n' +
      'If the functor is an object with a `.map` method, the mapper function signature is defined externally.\n' +
      '\n' +
      'If the functor is a plain object:\n' +
      '```coffeescript [specscript]\n' +
      'mapper(element any, key string, ftor Object) -> resultElement Promise|any\n' +
      '```\n' +
      '\n' +
      '`map` works for arrays.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const square = number => number ** 2\n' +
      '\n' +
      'const array = [1, 2, 3, 4, 5]\n' +
      '\n' +
      'const result = map(array, square)\n' +
      'console.log(result) // [1, 4, 9, 16, 25]\n' +
      '```\n' +
      '\n' +
      'The mapper function may be asynchronous, in which case it is applied concurrently.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncSquare = async number => number ** 2\n' +
      '\n' +
      'const array = [1, 2, 3, 4, 5]\n' +
      '\n' +
      'const promise = map(array, asyncSquare)\n' +
      'promise.then(console.log) // [1, 4, 9, 16, 25]\n' +
      '```\n' +
      '\n' +
      '`map` applies the mapper function to just the values of an object.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const square = number => number ** 2\n' +
      '\n' +
      'const obj = { a: 1, b: 2, c: 3, d: 4, e: 5 }\n' +
      '\n' +
      'const result = map(obj, square)\n' +
      'console.log(result) // { a: 1, b: 4, c: 9, d: 16, e: 25 }\n' +
      '```\n' +
      '\n' +
      '`map` applies the mapper function to the values of the entries of a map.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const square = number => number ** 2\n' +
      '\n' +
      "const m = new Map([['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5]])\n" +
      '\n' +
      'const result = map(m, square)\n' +
      "console.log(result) // Map { 'a' => 1, 'b' => 4, 'c' => 9, 'd' => 16, 'e' => 25 }\n" +
      '```\n' +
      '\n' +
      '`map` applies the mapper function lazily to each value of a generator, creating a new generator with mapped elements.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const capitalize = string => string.toUpperCase()\n' +
      '\n' +
      'const abcGeneratorFunc = function* () {\n' +
      "  yield 'a'; yield 'b'; yield 'c'\n" +
      '}\n' +
      '\n' +
      'const abcGenerator = abcGeneratorFunc()\n' +
      'const ABCGenerator = map(abcGeneratorFunc(), capitalize)\n' +
      '\n' +
      "console.log([...abcGenerator]) // ['a', 'b', 'c']\n" +
      '\n' +
      "console.log([...ABCGenerator]) // ['A', 'B', 'C']\n" +
      '```\n' +
      '\n' +
      '`map` applies the mapper function lazily to each value of an async generator, creating a new async generator with mapped elements.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const capitalize = string => string.toUpperCase()\n' +
      '\n' +
      'const abcAsyncGeneratorFunc = async function* () {\n' +
      "  yield 'a'; yield 'b'; yield 'c'\n" +
      '}\n' +
      '\n' +
      'const abcAsyncGenerator = abcAsyncGeneratorFunc()\n' +
      'const ABCGenerator = map(abcAsyncGeneratorFunc(), capitalize)\n' +
      '\n' +
      ';(async function () {\n' +
      '  for await (const letter of abcAsyncGenerator) {\n' +
      '    console.log(letter)\n' +
      '    // a\n' +
      '    // b\n' +
      '    // c\n' +
      '  }\n' +
      '\n' +
      '  for await (const letter of ABCGenerator) {\n' +
      '    console.log(letter)\n' +
      '    // A\n' +
      '    // B\n' +
      '    // C\n' +
      '  }\n' +
      '})()\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncSquare = async n => n ** 2\n' +
      '\n' +
      'map(Promise.resolve([1, 2, 3, 4, 5]), asyncSquare).then(console.log)\n' +
      '// [1, 4, 9, 16, 25]\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [forEach](/docs/forEach)\n' +
      ' * [map.entries](/docs/map.entries)\n' +
      ' * [map.series](/docs/map.series)\n' +
      ' * [map.pool](/docs/map.pool)\n' +
      ' * [filter](/docs/filter)\n' +
      ' * [reduce](/docs/reduce)\n' +
      ' * [transform](/docs/transform)\n' +
      ' * [flatMap](/docs/flatMap)\n' +
      ' * [some](/docs/some)',
    execution: 'concurrent',
    TODO: 'streamMap',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'map',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 4, offset: 3 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 4, offset: 3 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Functor = Array|Set|Map|Generator|AsyncGenerator|{ map: function }|Object\n' +
              '\n' +
              'type SyncOrAsyncMapper = (\n' +
              '  element any,\n' +
              '  indexOrKey number|string|any,\n' +
              '  functor Functor\n' +
              ')=>(resultElement Promise|any)\n' +
              '\n' +
              'map(functor Promise|Functor, mapper SyncOrAsyncMapper) -> result Promise|Functor\n' +
              'map(mapper SyncOrAsyncMapper)(functor Functor) -> result Promise|Functor',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 12, column: 4, offset: 390 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 390 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Applies a mapper function to each element of a functor, returning a functor of the same type with the mapped elements. The order of the elements is maintained.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 160, offset: 159 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 160, offset: 159 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The following data types are considered to be functors:',
                position: {
                  start: { line: 3, column: 1, offset: 161 },
                  end: { line: 3, column: 56, offset: 216 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 161 },
              end: { line: 3, column: 56, offset: 216 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'array',
                        position: {
                          start: { line: 4, column: 4, offset: 220 },
                          end: { line: 4, column: 11, offset: 227 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 4, column: 4, offset: 220 },
                      end: { line: 4, column: 11, offset: 227 }
                    }
                  }
                ],
                position: {
                  start: { line: 4, column: 2, offset: 218 },
                  end: { line: 4, column: 11, offset: 227 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'set',
                        position: {
                          start: { line: 5, column: 4, offset: 231 },
                          end: { line: 5, column: 9, offset: 236 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 5, column: 4, offset: 231 },
                      end: { line: 5, column: 9, offset: 236 }
                    }
                  }
                ],
                position: {
                  start: { line: 5, column: 2, offset: 229 },
                  end: { line: 5, column: 9, offset: 236 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'map',
                        position: {
                          start: { line: 6, column: 4, offset: 240 },
                          end: { line: 6, column: 9, offset: 245 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 6, column: 4, offset: 240 },
                      end: { line: 6, column: 9, offset: 245 }
                    }
                  }
                ],
                position: {
                  start: { line: 6, column: 2, offset: 238 },
                  end: { line: 6, column: 9, offset: 245 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'generator',
                        position: {
                          start: { line: 7, column: 4, offset: 249 },
                          end: { line: 7, column: 15, offset: 260 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 7, column: 4, offset: 249 },
                      end: { line: 7, column: 15, offset: 260 }
                    }
                  }
                ],
                position: {
                  start: { line: 7, column: 2, offset: 247 },
                  end: { line: 7, column: 15, offset: 260 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'async generator',
                        position: {
                          start: { line: 8, column: 4, offset: 264 },
                          end: { line: 8, column: 21, offset: 281 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 8, column: 4, offset: 264 },
                      end: { line: 8, column: 21, offset: 281 }
                    }
                  }
                ],
                position: {
                  start: { line: 8, column: 2, offset: 262 },
                  end: { line: 8, column: 21, offset: 281 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object with .map method',
                        position: {
                          start: { line: 9, column: 4, offset: 285 },
                          end: { line: 9, column: 29, offset: 310 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 9, column: 4, offset: 285 },
                      end: { line: 9, column: 29, offset: 310 }
                    }
                  }
                ],
                position: {
                  start: { line: 9, column: 2, offset: 283 },
                  end: { line: 9, column: 29, offset: 310 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object',
                        position: {
                          start: { line: 10, column: 4, offset: 314 },
                          end: { line: 10, column: 12, offset: 322 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 10, column: 4, offset: 314 },
                      end: { line: 10, column: 12, offset: 322 }
                    }
                  }
                ],
                position: {
                  start: { line: 10, column: 2, offset: 312 },
                  end: { line: 10, column: 12, offset: 322 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 2, offset: 218 },
              end: { line: 10, column: 12, offset: 322 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The mapper function defines a mapping between a given element in the functor to a resulting element in the returned functor.',
                position: {
                  start: { line: 12, column: 1, offset: 324 },
                  end: { line: 12, column: 125, offset: 448 }
                }
              }
            ],
            position: {
              start: { line: 12, column: 1, offset: 324 },
              end: { line: 12, column: 125, offset: 448 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: 'const mapper = function (element) {\n' +
              '  // resultElement is the result of a mapping from element\n' +
              '  return resultElement\n' +
              '}',
            position: {
              start: { line: 14, column: 1, offset: 450 },
              end: { line: 19, column: 4, offset: 587 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The mapper function signature changes depending on the provided functor.',
                position: {
                  start: { line: 21, column: 1, offset: 589 },
                  end: { line: 21, column: 73, offset: 661 }
                }
              }
            ],
            position: {
              start: { line: 21, column: 1, offset: 589 },
              end: { line: 21, column: 73, offset: 661 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the functor is an array:',
                position: {
                  start: { line: 23, column: 1, offset: 663 },
                  end: { line: 23, column: 28, offset: 690 }
                }
              }
            ],
            position: {
              start: { line: 23, column: 1, offset: 663 },
              end: { line: 23, column: 28, offset: 690 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapper(element any, index number, ftor Array) -> resultElement Promise|any',
            position: {
              start: { line: 24, column: 1, offset: 691 },
              end: { line: 26, column: 4, offset: 798 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the functor is a set:',
                position: {
                  start: { line: 28, column: 1, offset: 800 },
                  end: { line: 28, column: 25, offset: 824 }
                }
              }
            ],
            position: {
              start: { line: 28, column: 1, offset: 800 },
              end: { line: 28, column: 25, offset: 824 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapper(element any, element any, ftor Set) -> resultElement Promise|any',
            position: {
              start: { line: 29, column: 1, offset: 825 },
              end: { line: 31, column: 4, offset: 929 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the functor is a map:',
                position: {
                  start: { line: 33, column: 1, offset: 931 },
                  end: { line: 33, column: 25, offset: 955 }
                }
              }
            ],
            position: {
              start: { line: 33, column: 1, offset: 931 },
              end: { line: 33, column: 25, offset: 955 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapper(element any, key any, ftor Map) -> resultElement Promise|any',
            position: {
              start: { line: 34, column: 1, offset: 956 },
              end: { line: 36, column: 4, offset: 1056 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the functor is a generator:',
                position: {
                  start: { line: 38, column: 1, offset: 1058 },
                  end: { line: 38, column: 31, offset: 1088 }
                }
              }
            ],
            position: {
              start: { line: 38, column: 1, offset: 1058 },
              end: { line: 38, column: 31, offset: 1088 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapper(element any) -> resultElement Promise|any',
            position: {
              start: { line: 39, column: 1, offset: 1089 },
              end: { line: 41, column: 4, offset: 1170 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the functor is an async generator:',
                position: {
                  start: { line: 43, column: 1, offset: 1172 },
                  end: { line: 43, column: 38, offset: 1209 }
                }
              }
            ],
            position: {
              start: { line: 43, column: 1, offset: 1172 },
              end: { line: 43, column: 38, offset: 1209 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapper(element any) -> resultElement Promise|any',
            position: {
              start: { line: 44, column: 1, offset: 1210 },
              end: { line: 46, column: 4, offset: 1291 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the functor is an object with a ',
                position: {
                  start: { line: 48, column: 1, offset: 1293 },
                  end: { line: 48, column: 36, offset: 1328 }
                }
              },
              {
                type: 'inlineCode',
                value: '.map',
                position: {
                  start: { line: 48, column: 36, offset: 1328 },
                  end: { line: 48, column: 42, offset: 1334 }
                }
              },
              {
                type: 'text',
                value: ' method, the mapper function signature is defined externally.',
                position: {
                  start: { line: 48, column: 42, offset: 1334 },
                  end: { line: 48, column: 103, offset: 1395 }
                }
              }
            ],
            position: {
              start: { line: 48, column: 1, offset: 1293 },
              end: { line: 48, column: 103, offset: 1395 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the functor is a plain object:',
                position: {
                  start: { line: 50, column: 1, offset: 1397 },
                  end: { line: 50, column: 34, offset: 1430 }
                }
              }
            ],
            position: {
              start: { line: 50, column: 1, offset: 1397 },
              end: { line: 50, column: 34, offset: 1430 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapper(element any, key string, ftor Object) -> resultElement Promise|any',
            position: {
              start: { line: 51, column: 1, offset: 1431 },
              end: { line: 53, column: 4, offset: 1537 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'map',
                position: {
                  start: { line: 55, column: 1, offset: 1539 },
                  end: { line: 55, column: 6, offset: 1544 }
                }
              },
              {
                type: 'text',
                value: ' works for arrays.',
                position: {
                  start: { line: 55, column: 6, offset: 1544 },
                  end: { line: 55, column: 24, offset: 1562 }
                }
              }
            ],
            position: {
              start: { line: 55, column: 1, offset: 1539 },
              end: { line: 55, column: 24, offset: 1562 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const square = number => number ** 2\n' +
              '\n' +
              'const array = [1, 2, 3, 4, 5]\n' +
              '\n' +
              'const result = map(array, square)\n' +
              'console.log(result) // [1, 4, 9, 16, 25]',
            position: {
              start: { line: 57, column: 1, offset: 1564 },
              end: { line: 64, column: 4, offset: 1738 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The mapper function may be asynchronous, in which case it is applied concurrently.',
                position: {
                  start: { line: 66, column: 1, offset: 1740 },
                  end: { line: 66, column: 83, offset: 1822 }
                }
              }
            ],
            position: {
              start: { line: 66, column: 1, offset: 1740 },
              end: { line: 66, column: 83, offset: 1822 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncSquare = async number => number ** 2\n' +
              '\n' +
              'const array = [1, 2, 3, 4, 5]\n' +
              '\n' +
              'const promise = map(array, asyncSquare)\n' +
              'promise.then(console.log) // [1, 4, 9, 16, 25]',
            position: {
              start: { line: 68, column: 1, offset: 1824 },
              end: { line: 75, column: 4, offset: 2021 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'map',
                position: {
                  start: { line: 77, column: 1, offset: 2023 },
                  end: { line: 77, column: 6, offset: 2028 }
                }
              },
              {
                type: 'text',
                value: ' applies the mapper function to just the values of an object.',
                position: {
                  start: { line: 77, column: 6, offset: 2028 },
                  end: { line: 77, column: 67, offset: 2089 }
                }
              }
            ],
            position: {
              start: { line: 77, column: 1, offset: 2023 },
              end: { line: 77, column: 67, offset: 2089 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const square = number => number ** 2\n' +
              '\n' +
              'const obj = { a: 1, b: 2, c: 3, d: 4, e: 5 }\n' +
              '\n' +
              'const result = map(obj, square)\n' +
              'console.log(result) // { a: 1, b: 4, c: 9, d: 16, e: 25 }',
            position: {
              start: { line: 79, column: 1, offset: 2091 },
              end: { line: 86, column: 4, offset: 2295 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'map',
                position: {
                  start: { line: 88, column: 1, offset: 2297 },
                  end: { line: 88, column: 6, offset: 2302 }
                }
              },
              {
                type: 'text',
                value: ' applies the mapper function to the values of the entries of a map.',
                position: {
                  start: { line: 88, column: 6, offset: 2302 },
                  end: { line: 88, column: 73, offset: 2369 }
                }
              }
            ],
            position: {
              start: { line: 88, column: 1, offset: 2297 },
              end: { line: 88, column: 73, offset: 2369 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const square = number => number ** 2\n' +
              '\n' +
              "const m = new Map([['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5]])\n" +
              '\n' +
              'const result = map(m, square)\n' +
              "console.log(result) // Map { 'a' => 1, 'b' => 4, 'c' => 9, 'd' => 16, 'e' => 25 }",
            position: {
              start: { line: 90, column: 1, offset: 2371 },
              end: { line: 97, column: 4, offset: 2622 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'map',
                position: {
                  start: { line: 99, column: 1, offset: 2624 },
                  end: { line: 99, column: 6, offset: 2629 }
                }
              },
              {
                type: 'text',
                value: ' applies the mapper function lazily to each value of a generator, creating a new generator with mapped elements.',
                position: {
                  start: { line: 99, column: 6, offset: 2629 },
                  end: { line: 99, column: 118, offset: 2741 }
                }
              }
            ],
            position: {
              start: { line: 99, column: 1, offset: 2624 },
              end: { line: 99, column: 118, offset: 2741 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const capitalize = string => string.toUpperCase()\n' +
              '\n' +
              'const abcGeneratorFunc = function* () {\n' +
              "  yield 'a'; yield 'b'; yield 'c'\n" +
              '}\n' +
              '\n' +
              'const abcGenerator = abcGeneratorFunc()\n' +
              'const ABCGenerator = map(abcGeneratorFunc(), capitalize)\n' +
              '\n' +
              "console.log([...abcGenerator]) // ['a', 'b', 'c']\n" +
              '\n' +
              "console.log([...ABCGenerator]) // ['A', 'B', 'C']",
            position: {
              start: { line: 101, column: 1, offset: 2743 },
              end: { line: 114, column: 4, offset: 3100 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'map',
                position: {
                  start: { line: 116, column: 1, offset: 3102 },
                  end: { line: 116, column: 6, offset: 3107 }
                }
              },
              {
                type: 'text',
                value: ' applies the mapper function lazily to each value of an async generator, creating a new async generator with mapped elements.',
                position: {
                  start: { line: 116, column: 6, offset: 3107 },
                  end: { line: 116, column: 131, offset: 3232 }
                }
              }
            ],
            position: {
              start: { line: 116, column: 1, offset: 3102 },
              end: { line: 116, column: 131, offset: 3232 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const capitalize = string => string.toUpperCase()\n' +
              '\n' +
              'const abcAsyncGeneratorFunc = async function* () {\n' +
              "  yield 'a'; yield 'b'; yield 'c'\n" +
              '}\n' +
              '\n' +
              'const abcAsyncGenerator = abcAsyncGeneratorFunc()\n' +
              'const ABCGenerator = map(abcAsyncGeneratorFunc(), capitalize)\n' +
              '\n' +
              ';(async function () {\n' +
              '  for await (const letter of abcAsyncGenerator) {\n' +
              '    console.log(letter)\n' +
              '    // a\n' +
              '    // b\n' +
              '    // c\n' +
              '  }\n' +
              '\n' +
              '  for await (const letter of ABCGenerator) {\n' +
              '    console.log(letter)\n' +
              '    // A\n' +
              '    // B\n' +
              '    // C\n' +
              '  }\n' +
              '})()',
            position: {
              start: { line: 118, column: 1, offset: 3234 },
              end: { line: 143, column: 4, offset: 3749 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 145, column: 1, offset: 3751 },
                  end: { line: 145, column: 148, offset: 3898 }
                }
              }
            ],
            position: {
              start: { line: 145, column: 1, offset: 3751 },
              end: { line: 145, column: 148, offset: 3898 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncSquare = async n => n ** 2\n' +
              '\n' +
              'map(Promise.resolve([1, 2, 3, 4, 5]), asyncSquare).then(console.log)\n' +
              '// [1, 4, 9, 16, 25]',
            position: {
              start: { line: 147, column: 1, offset: 3900 },
              end: { line: 152, column: 4, offset: 4059 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 154, column: 1, offset: 4061 },
                  end: { line: 154, column: 10, offset: 4070 }
                }
              }
            ],
            position: {
              start: { line: 154, column: 1, offset: 4061 },
              end: { line: 154, column: 10, offset: 4070 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 155, column: 5, offset: 4075 },
                              end: { line: 155, column: 12, offset: 4082 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 155, column: 4, offset: 4074 },
                          end: { line: 155, column: 28, offset: 4098 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 155, column: 4, offset: 4074 },
                      end: { line: 155, column: 28, offset: 4098 }
                    }
                  }
                ],
                position: {
                  start: { line: 155, column: 2, offset: 4072 },
                  end: { line: 155, column: 28, offset: 4098 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map.entries',
                        children: [
                          {
                            type: 'text',
                            value: 'map.entries',
                            position: {
                              start: { line: 156, column: 5, offset: 4103 },
                              end: { line: 156, column: 16, offset: 4114 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 156, column: 4, offset: 4102 },
                          end: { line: 156, column: 36, offset: 4134 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 156, column: 4, offset: 4102 },
                      end: { line: 156, column: 36, offset: 4134 }
                    }
                  }
                ],
                position: {
                  start: { line: 156, column: 2, offset: 4100 },
                  end: { line: 156, column: 36, offset: 4134 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map.series',
                        children: [
                          {
                            type: 'text',
                            value: 'map.series',
                            position: {
                              start: { line: 157, column: 5, offset: 4139 },
                              end: { line: 157, column: 15, offset: 4149 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 157, column: 4, offset: 4138 },
                          end: { line: 157, column: 34, offset: 4168 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 157, column: 4, offset: 4138 },
                      end: { line: 157, column: 34, offset: 4168 }
                    }
                  }
                ],
                position: {
                  start: { line: 157, column: 2, offset: 4136 },
                  end: { line: 157, column: 34, offset: 4168 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map.pool',
                        children: [
                          {
                            type: 'text',
                            value: 'map.pool',
                            position: {
                              start: { line: 158, column: 5, offset: 4173 },
                              end: { line: 158, column: 13, offset: 4181 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 158, column: 4, offset: 4172 },
                          end: { line: 158, column: 30, offset: 4198 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 158, column: 4, offset: 4172 },
                      end: { line: 158, column: 30, offset: 4198 }
                    }
                  }
                ],
                position: {
                  start: { line: 158, column: 2, offset: 4170 },
                  end: { line: 158, column: 30, offset: 4198 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/filter',
                        children: [
                          {
                            type: 'text',
                            value: 'filter',
                            position: {
                              start: { line: 159, column: 5, offset: 4203 },
                              end: { line: 159, column: 11, offset: 4209 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 159, column: 4, offset: 4202 },
                          end: { line: 159, column: 26, offset: 4224 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 159, column: 4, offset: 4202 },
                      end: { line: 159, column: 26, offset: 4224 }
                    }
                  }
                ],
                position: {
                  start: { line: 159, column: 2, offset: 4200 },
                  end: { line: 159, column: 26, offset: 4224 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/reduce',
                        children: [
                          {
                            type: 'text',
                            value: 'reduce',
                            position: {
                              start: { line: 160, column: 5, offset: 4229 },
                              end: { line: 160, column: 11, offset: 4235 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 160, column: 4, offset: 4228 },
                          end: { line: 160, column: 26, offset: 4250 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 160, column: 4, offset: 4228 },
                      end: { line: 160, column: 26, offset: 4250 }
                    }
                  }
                ],
                position: {
                  start: { line: 160, column: 2, offset: 4226 },
                  end: { line: 160, column: 26, offset: 4250 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/transform',
                        children: [
                          {
                            type: 'text',
                            value: 'transform',
                            position: {
                              start: { line: 161, column: 5, offset: 4255 },
                              end: { line: 161, column: 14, offset: 4264 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 161, column: 4, offset: 4254 },
                          end: { line: 161, column: 32, offset: 4282 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 161, column: 4, offset: 4254 },
                      end: { line: 161, column: 32, offset: 4282 }
                    }
                  }
                ],
                position: {
                  start: { line: 161, column: 2, offset: 4252 },
                  end: { line: 161, column: 32, offset: 4282 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/flatMap',
                        children: [
                          {
                            type: 'text',
                            value: 'flatMap',
                            position: {
                              start: { line: 162, column: 5, offset: 4287 },
                              end: { line: 162, column: 12, offset: 4294 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 162, column: 4, offset: 4286 },
                          end: { line: 162, column: 28, offset: 4310 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 162, column: 4, offset: 4286 },
                      end: { line: 162, column: 28, offset: 4310 }
                    }
                  }
                ],
                position: {
                  start: { line: 162, column: 2, offset: 4284 },
                  end: { line: 162, column: 28, offset: 4310 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/some',
                        children: [
                          {
                            type: 'text',
                            value: 'some',
                            position: {
                              start: { line: 163, column: 5, offset: 4315 },
                              end: { line: 163, column: 9, offset: 4319 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 163, column: 4, offset: 4314 },
                          end: { line: 163, column: 22, offset: 4332 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 163, column: 4, offset: 4314 },
                      end: { line: 163, column: 22, offset: 4332 }
                    }
                  }
                ],
                position: {
                  start: { line: 163, column: 2, offset: 4312 },
                  end: { line: 163, column: 22, offset: 4332 }
                }
              }
            ],
            position: {
              start: { line: 155, column: 2, offset: 4072 },
              end: { line: 163, column: 22, offset: 4332 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 163, column: 22, offset: 4332 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'concurrent',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'streamMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/map.js'
  },
  {
    name: 'map.entries',
    synopsis: '```coffeescript [specscript]\n' +
      'type FunctorWithEntries = Map|Object\n' +
      '\n' +
      'type EntryMapper = (\n' +
      '  entry [key string|any, value any],\n' +
      ')=>(resultEntry Promise|[resultKey string|any, resultElement any])\n' +
      '\n' +
      'map.entries(\n' +
      '  value Promise|FunctorWithEntries,\n' +
      '  mapper EntryMapper\n' +
      ') -> Promise|FunctorWithEntries\n' +
      '\n' +
      'map.entries(mapper EntryMapper)(value FunctorWithEntries)\n' +
      '  -> Promise|FunctorWithEntries\n' +
      '```',
    description: '`map` over the entries of a functor as opposed to the values.\n' +
      '\n' +
      'The following data types are considered to be functors with entries:\n' +
      '  * `map`\n' +
      '  * `object`\n' +
      '\n' +
      'The signature of the mapper function changes depending on the provided functor:\n' +
      '\n' +
      'If the functor is a map:\n' +
      '\n' +
      '```coffeescript [specscript]\n' +
      'mapper(entry [key any, value any]) -> resultEntry Promise|[\n' +
      '  resultKey any,\n' +
      '  resultValue any,\n' +
      ']\n' +
      '```\n' +
      '\n' +
      'If the functor is an object:\n' +
      '\n' +
      '```coffeescript [specscript]\n' +
      'mapper(entry [key string, value any]) -> resultEntry Promise|[\n' +
      '  resultKey string,\n' +
      '  resultValue any,\n' +
      ']\n' +
      '```\n' +
      '\n' +
      '`map.entries` works for objects and maps.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const upperCaseKeysAndSquareValues =\n' +
      '  map.entries(([key, value]) => [key.toUpperCase(), value ** 2])\n' +
      '\n' +
      'console.log(upperCaseKeysAndSquareValues({ a: 1, b: 2, c: 3 }))\n' +
      '// { A: 1, B: 4, C: 9 }\n' +
      '\n' +
      "console.log(upperCaseKeysAndSquareValues(new Map([['a', 1], ['b', 2], ['c', 3]])))\n" +
      "// Map(3) { 'A' => 1, 'B' => 4, 'C' => 9 }\n" +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncSquareEntries = async ([k, v]) => [k, v ** 2]\n' +
      '\n' +
      'map.entries(\n' +
      '  Promise.resolve({ a: 1, b: 2, c: 3 }),\n' +
      '  asyncSquareEntries,\n' +
      ').then(console.log)\n' +
      '// { a: 1, b: 4, c: 9 }\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [forEach](/docs/forEach)\n' +
      ' * [map](/docs/map)\n' +
      ' * [map.series](/docs/map.series)\n' +
      ' * [map.pool](/docs/map.pool)\n' +
      ' * [filter](/docs/filter)\n' +
      ' * [reduce](/docs/reduce)\n' +
      ' * [transform](/docs/transform)\n' +
      ' * [flatMap](/docs/flatMap)\n' +
      ' * [some](/docs/some)',
    since: 'v1.7.0',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'map.entries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type FunctorWithEntries = Map|Object\n' +
              '\n' +
              'type EntryMapper = (\n' +
              '  entry [key string|any, value any],\n' +
              ')=>(resultEntry Promise|[resultKey string|any, resultElement any])\n' +
              '\n' +
              'map.entries(\n' +
              '  value Promise|FunctorWithEntries,\n' +
              '  mapper EntryMapper\n' +
              ') -> Promise|FunctorWithEntries\n' +
              '\n' +
              'map.entries(mapper EntryMapper)(value FunctorWithEntries)\n' +
              '  -> Promise|FunctorWithEntries',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 15, column: 4, offset: 389 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 15, column: 4, offset: 389 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'map',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              },
              {
                type: 'text',
                value: ' over the entries of a functor as opposed to the values.',
                position: {
                  start: { line: 1, column: 6, offset: 5 },
                  end: { line: 1, column: 62, offset: 61 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 62, offset: 61 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The following data types are considered to be functors with entries:',
                position: {
                  start: { line: 3, column: 1, offset: 63 },
                  end: { line: 3, column: 69, offset: 131 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 63 },
              end: { line: 3, column: 69, offset: 131 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'map',
                        position: {
                          start: { line: 4, column: 5, offset: 136 },
                          end: { line: 4, column: 10, offset: 141 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 4, column: 5, offset: 136 },
                      end: { line: 4, column: 10, offset: 141 }
                    }
                  }
                ],
                position: {
                  start: { line: 4, column: 3, offset: 134 },
                  end: { line: 4, column: 10, offset: 141 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object',
                        position: {
                          start: { line: 5, column: 5, offset: 146 },
                          end: { line: 5, column: 13, offset: 154 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 5, column: 5, offset: 146 },
                      end: { line: 5, column: 13, offset: 154 }
                    }
                  }
                ],
                position: {
                  start: { line: 5, column: 3, offset: 144 },
                  end: { line: 5, column: 13, offset: 154 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 3, offset: 134 },
              end: { line: 5, column: 13, offset: 154 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The signature of the mapper function changes depending on the provided functor:',
                position: {
                  start: { line: 7, column: 1, offset: 156 },
                  end: { line: 7, column: 80, offset: 235 }
                }
              }
            ],
            position: {
              start: { line: 7, column: 1, offset: 156 },
              end: { line: 7, column: 80, offset: 235 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the functor is a map:',
                position: {
                  start: { line: 9, column: 1, offset: 237 },
                  end: { line: 9, column: 25, offset: 261 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 237 },
              end: { line: 9, column: 25, offset: 261 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapper(entry [key any, value any]) -> resultEntry Promise|[\n' +
              '  resultKey any,\n' +
              '  resultValue any,\n' +
              ']',
            position: {
              start: { line: 11, column: 1, offset: 263 },
              end: { line: 16, column: 4, offset: 393 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the functor is an object:',
                position: {
                  start: { line: 18, column: 1, offset: 395 },
                  end: { line: 18, column: 29, offset: 423 }
                }
              }
            ],
            position: {
              start: { line: 18, column: 1, offset: 395 },
              end: { line: 18, column: 29, offset: 423 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'mapper(entry [key string, value any]) -> resultEntry Promise|[\n' +
              '  resultKey string,\n' +
              '  resultValue any,\n' +
              ']',
            position: {
              start: { line: 20, column: 1, offset: 425 },
              end: { line: 25, column: 4, offset: 561 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'map.entries',
                position: {
                  start: { line: 27, column: 1, offset: 563 },
                  end: { line: 27, column: 14, offset: 576 }
                }
              },
              {
                type: 'text',
                value: ' works for objects and maps.',
                position: {
                  start: { line: 27, column: 14, offset: 576 },
                  end: { line: 27, column: 42, offset: 604 }
                }
              }
            ],
            position: {
              start: { line: 27, column: 1, offset: 563 },
              end: { line: 27, column: 42, offset: 604 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const upperCaseKeysAndSquareValues =\n' +
              '  map.entries(([key, value]) => [key.toUpperCase(), value ** 2])\n' +
              '\n' +
              'console.log(upperCaseKeysAndSquareValues({ a: 1, b: 2, c: 3 }))\n' +
              '// { A: 1, B: 4, C: 9 }\n' +
              '\n' +
              "console.log(upperCaseKeysAndSquareValues(new Map([['a', 1], ['b', 2], ['c', 3]])))\n" +
              "// Map(3) { 'A' => 1, 'B' => 4, 'C' => 9 }",
            position: {
              start: { line: 29, column: 1, offset: 606 },
              end: { line: 38, column: 4, offset: 954 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 40, column: 1, offset: 956 },
                  end: { line: 40, column: 148, offset: 1103 }
                }
              }
            ],
            position: {
              start: { line: 40, column: 1, offset: 956 },
              end: { line: 40, column: 148, offset: 1103 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncSquareEntries = async ([k, v]) => [k, v ** 2]\n' +
              '\n' +
              'map.entries(\n' +
              '  Promise.resolve({ a: 1, b: 2, c: 3 }),\n' +
              '  asyncSquareEntries,\n' +
              ').then(console.log)\n' +
              '// { a: 1, b: 4, c: 9 }',
            position: {
              start: { line: 42, column: 1, offset: 1105 },
              end: { line: 50, column: 4, offset: 1313 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 52, column: 1, offset: 1315 },
                  end: { line: 52, column: 10, offset: 1324 }
                }
              }
            ],
            position: {
              start: { line: 52, column: 1, offset: 1315 },
              end: { line: 52, column: 10, offset: 1324 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 53, column: 5, offset: 1329 },
                              end: { line: 53, column: 12, offset: 1336 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 53, column: 4, offset: 1328 },
                          end: { line: 53, column: 28, offset: 1352 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 53, column: 4, offset: 1328 },
                      end: { line: 53, column: 28, offset: 1352 }
                    }
                  }
                ],
                position: {
                  start: { line: 53, column: 2, offset: 1326 },
                  end: { line: 53, column: 28, offset: 1352 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map',
                        children: [
                          {
                            type: 'text',
                            value: 'map',
                            position: {
                              start: { line: 54, column: 5, offset: 1357 },
                              end: { line: 54, column: 8, offset: 1360 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 54, column: 4, offset: 1356 },
                          end: { line: 54, column: 20, offset: 1372 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 54, column: 4, offset: 1356 },
                      end: { line: 54, column: 20, offset: 1372 }
                    }
                  }
                ],
                position: {
                  start: { line: 54, column: 2, offset: 1354 },
                  end: { line: 54, column: 20, offset: 1372 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map.series',
                        children: [
                          {
                            type: 'text',
                            value: 'map.series',
                            position: {
                              start: { line: 55, column: 5, offset: 1377 },
                              end: { line: 55, column: 15, offset: 1387 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 55, column: 4, offset: 1376 },
                          end: { line: 55, column: 34, offset: 1406 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 55, column: 4, offset: 1376 },
                      end: { line: 55, column: 34, offset: 1406 }
                    }
                  }
                ],
                position: {
                  start: { line: 55, column: 2, offset: 1374 },
                  end: { line: 55, column: 34, offset: 1406 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map.pool',
                        children: [
                          {
                            type: 'text',
                            value: 'map.pool',
                            position: {
                              start: { line: 56, column: 5, offset: 1411 },
                              end: { line: 56, column: 13, offset: 1419 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 56, column: 4, offset: 1410 },
                          end: { line: 56, column: 30, offset: 1436 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 56, column: 4, offset: 1410 },
                      end: { line: 56, column: 30, offset: 1436 }
                    }
                  }
                ],
                position: {
                  start: { line: 56, column: 2, offset: 1408 },
                  end: { line: 56, column: 30, offset: 1436 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/filter',
                        children: [
                          {
                            type: 'text',
                            value: 'filter',
                            position: {
                              start: { line: 57, column: 5, offset: 1441 },
                              end: { line: 57, column: 11, offset: 1447 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 57, column: 4, offset: 1440 },
                          end: { line: 57, column: 26, offset: 1462 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 57, column: 4, offset: 1440 },
                      end: { line: 57, column: 26, offset: 1462 }
                    }
                  }
                ],
                position: {
                  start: { line: 57, column: 2, offset: 1438 },
                  end: { line: 57, column: 26, offset: 1462 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/reduce',
                        children: [
                          {
                            type: 'text',
                            value: 'reduce',
                            position: {
                              start: { line: 58, column: 5, offset: 1467 },
                              end: { line: 58, column: 11, offset: 1473 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 58, column: 4, offset: 1466 },
                          end: { line: 58, column: 26, offset: 1488 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 58, column: 4, offset: 1466 },
                      end: { line: 58, column: 26, offset: 1488 }
                    }
                  }
                ],
                position: {
                  start: { line: 58, column: 2, offset: 1464 },
                  end: { line: 58, column: 26, offset: 1488 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/transform',
                        children: [
                          {
                            type: 'text',
                            value: 'transform',
                            position: {
                              start: { line: 59, column: 5, offset: 1493 },
                              end: { line: 59, column: 14, offset: 1502 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 59, column: 4, offset: 1492 },
                          end: { line: 59, column: 32, offset: 1520 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 59, column: 4, offset: 1492 },
                      end: { line: 59, column: 32, offset: 1520 }
                    }
                  }
                ],
                position: {
                  start: { line: 59, column: 2, offset: 1490 },
                  end: { line: 59, column: 32, offset: 1520 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/flatMap',
                        children: [
                          {
                            type: 'text',
                            value: 'flatMap',
                            position: {
                              start: { line: 60, column: 5, offset: 1525 },
                              end: { line: 60, column: 12, offset: 1532 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 60, column: 4, offset: 1524 },
                          end: { line: 60, column: 28, offset: 1548 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 60, column: 4, offset: 1524 },
                      end: { line: 60, column: 28, offset: 1548 }
                    }
                  }
                ],
                position: {
                  start: { line: 60, column: 2, offset: 1522 },
                  end: { line: 60, column: 28, offset: 1548 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/some',
                        children: [
                          {
                            type: 'text',
                            value: 'some',
                            position: {
                              start: { line: 61, column: 5, offset: 1553 },
                              end: { line: 61, column: 9, offset: 1557 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 61, column: 4, offset: 1552 },
                          end: { line: 61, column: 22, offset: 1570 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 61, column: 4, offset: 1552 },
                      end: { line: 61, column: 22, offset: 1570 }
                    }
                  }
                ],
                position: {
                  start: { line: 61, column: 2, offset: 1550 },
                  end: { line: 61, column: 22, offset: 1570 }
                }
              }
            ],
            position: {
              start: { line: 53, column: 2, offset: 1326 },
              end: { line: 61, column: 22, offset: 1570 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 61, column: 22, offset: 1570 }
        }
      },
      since: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'v1.7.0',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/map.js'
  },
  {
    name: '_mapSeries',
    synopsis: '```coffeescript [specscript]\n' +
      'type Functor = Array|Object|Set|Map\n' +
      '\n' +
      'type SyncOrAsyncMapper = (\n' +
      '  value any,\n' +
      '  indexOrKey number|string|any,\n' +
      '  f Functor\n' +
      ')=>(mappedElement Promise|any)\n' +
      '\n' +
      '_mapSeries(f Functor, f SyncOrAsyncMapper) -> result Promise|Functor\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_mapSeries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Functor = Array|Object|Set|Map\n' +
              '\n' +
              'type SyncOrAsyncMapper = (\n' +
              '  value any,\n' +
              '  indexOrKey number|string|any,\n' +
              '  f Functor\n' +
              ')=>(mappedElement Promise|any)\n' +
              '\n' +
              '_mapSeries(f Functor, f SyncOrAsyncMapper) -> result Promise|Functor',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 11, column: 4, offset: 254 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 4, offset: 254 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/map.js'
  },
  {
    name: 'map.series',
    synopsis: '```coffeescript [specscript]\n' +
      'type MapSeriesFunctor = Array|Object|Set|Map\n' +
      '\n' +
      'type SyncOrAsyncMapper = (\n' +
      '  value any,\n' +
      '  indexOrKey number|string|any,\n' +
      '  ftor MapSeriesFunctor,\n' +
      ')=>(mappedElement Promise|any)\n' +
      '\n' +
      'map.series(\n' +
      '  ftor Promise|MapSeriesFunctor,\n' +
      '  mapper SyncOrAsyncMapper\n' +
      ') -> result MapSeriesFunctor\n' +
      '\n' +
      'map.series(mapper SyncOrAsyncMapper)(ftor MapSeriesFunctor)\n' +
      '  -> result MapSeriesFunctor\n' +
      '```',
    description: '[map](/docs/map) with serial execution.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const delayedLog = number => new Promise(function (resolve) {\n' +
      '  setTimeout(function () {\n' +
      '    console.log(number)\n' +
      '    resolve()\n' +
      '  }, 1000)\n' +
      '})\n' +
      '\n' +
      "console.log('start')\n" +
      'map.series([1, 2, 3, 4, 5], delayedLog)\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncSquare = async n => n ** 2\n' +
      '\n' +
      'map.series(Promise.resolve([1, 2, 3, 4, 5]), asyncSquare).then(console.log)\n' +
      '// [1, 4, 9, 16, 25]\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [forEach](/docs/forEach)\n' +
      ' * [map](/docs/map)\n' +
      ' * [map.entries](/docs/map.entries)\n' +
      ' * [map.pool](/docs/map.pool)\n' +
      ' * [filter](/docs/filter)\n' +
      ' * [reduce](/docs/reduce)\n' +
      ' * [transform](/docs/transform)\n' +
      ' * [flatMap](/docs/flatMap)\n' +
      ' * [some](/docs/some)',
    execution: 'series',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'map.series',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type MapSeriesFunctor = Array|Object|Set|Map\n' +
              '\n' +
              'type SyncOrAsyncMapper = (\n' +
              '  value any,\n' +
              '  indexOrKey number|string|any,\n' +
              '  ftor MapSeriesFunctor,\n' +
              ')=>(mappedElement Promise|any)\n' +
              '\n' +
              'map.series(\n' +
              '  ftor Promise|MapSeriesFunctor,\n' +
              '  mapper SyncOrAsyncMapper\n' +
              ') -> result MapSeriesFunctor\n' +
              '\n' +
              'map.series(mapper SyncOrAsyncMapper)(ftor MapSeriesFunctor)\n' +
              '  -> result MapSeriesFunctor',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 17, column: 4, offset: 398 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 17, column: 4, offset: 398 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'link',
                title: null,
                url: '/docs/map',
                children: [
                  {
                    type: 'text',
                    value: 'map',
                    position: {
                      start: { line: 1, column: 2, offset: 1 },
                      end: { line: 1, column: 5, offset: 4 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              },
              {
                type: 'text',
                value: ' with serial execution.',
                position: {
                  start: { line: 1, column: 17, offset: 16 },
                  end: { line: 1, column: 40, offset: 39 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 40, offset: 39 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const delayedLog = number => new Promise(function (resolve) {\n' +
              '  setTimeout(function () {\n' +
              '    console.log(number)\n' +
              '    resolve()\n' +
              '  }, 1000)\n' +
              '})\n' +
              '\n' +
              "console.log('start')\n" +
              'map.series([1, 2, 3, 4, 5], delayedLog)',
            position: {
              start: { line: 3, column: 1, offset: 41 },
              end: { line: 13, column: 4, offset: 274 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 15, column: 1, offset: 276 },
                  end: { line: 15, column: 148, offset: 423 }
                }
              }
            ],
            position: {
              start: { line: 15, column: 1, offset: 276 },
              end: { line: 15, column: 148, offset: 423 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncSquare = async n => n ** 2\n' +
              '\n' +
              'map.series(Promise.resolve([1, 2, 3, 4, 5]), asyncSquare).then(console.log)\n' +
              '// [1, 4, 9, 16, 25]',
            position: {
              start: { line: 17, column: 1, offset: 425 },
              end: { line: 22, column: 4, offset: 591 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 24, column: 1, offset: 593 },
                  end: { line: 24, column: 10, offset: 602 }
                }
              }
            ],
            position: {
              start: { line: 24, column: 1, offset: 593 },
              end: { line: 24, column: 10, offset: 602 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 25, column: 5, offset: 607 },
                              end: { line: 25, column: 12, offset: 614 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 25, column: 4, offset: 606 },
                          end: { line: 25, column: 28, offset: 630 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 25, column: 4, offset: 606 },
                      end: { line: 25, column: 28, offset: 630 }
                    }
                  }
                ],
                position: {
                  start: { line: 25, column: 2, offset: 604 },
                  end: { line: 25, column: 28, offset: 630 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map',
                        children: [
                          {
                            type: 'text',
                            value: 'map',
                            position: {
                              start: { line: 26, column: 5, offset: 635 },
                              end: { line: 26, column: 8, offset: 638 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 26, column: 4, offset: 634 },
                          end: { line: 26, column: 20, offset: 650 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 26, column: 4, offset: 634 },
                      end: { line: 26, column: 20, offset: 650 }
                    }
                  }
                ],
                position: {
                  start: { line: 26, column: 2, offset: 632 },
                  end: { line: 26, column: 20, offset: 650 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map.entries',
                        children: [
                          {
                            type: 'text',
                            value: 'map.entries',
                            position: {
                              start: { line: 27, column: 5, offset: 655 },
                              end: { line: 27, column: 16, offset: 666 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 27, column: 4, offset: 654 },
                          end: { line: 27, column: 36, offset: 686 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 27, column: 4, offset: 654 },
                      end: { line: 27, column: 36, offset: 686 }
                    }
                  }
                ],
                position: {
                  start: { line: 27, column: 2, offset: 652 },
                  end: { line: 27, column: 36, offset: 686 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map.pool',
                        children: [
                          {
                            type: 'text',
                            value: 'map.pool',
                            position: {
                              start: { line: 28, column: 5, offset: 691 },
                              end: { line: 28, column: 13, offset: 699 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 28, column: 4, offset: 690 },
                          end: { line: 28, column: 30, offset: 716 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 28, column: 4, offset: 690 },
                      end: { line: 28, column: 30, offset: 716 }
                    }
                  }
                ],
                position: {
                  start: { line: 28, column: 2, offset: 688 },
                  end: { line: 28, column: 30, offset: 716 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/filter',
                        children: [
                          {
                            type: 'text',
                            value: 'filter',
                            position: {
                              start: { line: 29, column: 5, offset: 721 },
                              end: { line: 29, column: 11, offset: 727 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 29, column: 4, offset: 720 },
                          end: { line: 29, column: 26, offset: 742 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 29, column: 4, offset: 720 },
                      end: { line: 29, column: 26, offset: 742 }
                    }
                  }
                ],
                position: {
                  start: { line: 29, column: 2, offset: 718 },
                  end: { line: 29, column: 26, offset: 742 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/reduce',
                        children: [
                          {
                            type: 'text',
                            value: 'reduce',
                            position: {
                              start: { line: 30, column: 5, offset: 747 },
                              end: { line: 30, column: 11, offset: 753 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 30, column: 4, offset: 746 },
                          end: { line: 30, column: 26, offset: 768 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 30, column: 4, offset: 746 },
                      end: { line: 30, column: 26, offset: 768 }
                    }
                  }
                ],
                position: {
                  start: { line: 30, column: 2, offset: 744 },
                  end: { line: 30, column: 26, offset: 768 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/transform',
                        children: [
                          {
                            type: 'text',
                            value: 'transform',
                            position: {
                              start: { line: 31, column: 5, offset: 773 },
                              end: { line: 31, column: 14, offset: 782 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 31, column: 4, offset: 772 },
                          end: { line: 31, column: 32, offset: 800 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 31, column: 4, offset: 772 },
                      end: { line: 31, column: 32, offset: 800 }
                    }
                  }
                ],
                position: {
                  start: { line: 31, column: 2, offset: 770 },
                  end: { line: 31, column: 32, offset: 800 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/flatMap',
                        children: [
                          {
                            type: 'text',
                            value: 'flatMap',
                            position: {
                              start: { line: 32, column: 5, offset: 805 },
                              end: { line: 32, column: 12, offset: 812 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 32, column: 4, offset: 804 },
                          end: { line: 32, column: 28, offset: 828 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 32, column: 4, offset: 804 },
                      end: { line: 32, column: 28, offset: 828 }
                    }
                  }
                ],
                position: {
                  start: { line: 32, column: 2, offset: 802 },
                  end: { line: 32, column: 28, offset: 828 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/some',
                        children: [
                          {
                            type: 'text',
                            value: 'some',
                            position: {
                              start: { line: 33, column: 5, offset: 833 },
                              end: { line: 33, column: 9, offset: 837 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 33, column: 4, offset: 832 },
                          end: { line: 33, column: 22, offset: 850 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 33, column: 4, offset: 832 },
                      end: { line: 33, column: 22, offset: 850 }
                    }
                  }
                ],
                position: {
                  start: { line: 33, column: 2, offset: 830 },
                  end: { line: 33, column: 22, offset: 850 }
                }
              }
            ],
            position: {
              start: { line: 25, column: 2, offset: 604 },
              end: { line: 33, column: 22, offset: 850 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 33, column: 22, offset: 850 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'series',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/map.js'
  },
  {
    name: '_mapPool',
    synopsis: '```coffeescript [specscript]\n' +
      'type Functor = Array|Object|Set|Map\n' +
      '\n' +
      '_mapPool(f Functor, concurrency number, mapper function) -> result Promise|Functor\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_mapPool',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Functor = Array|Object|Set|Map\n' +
              '\n' +
              '_mapPool(f Functor, concurrency number, mapper function) -> result Promise|Functor',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 152 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 152 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/map.js'
  },
  {
    name: 'map.pool',
    synopsis: '```coffeescript [specscript]\n' +
      'type MapPoolFunctor = Array|Object|Set|Map\n' +
      '\n' +
      'type SyncOrAsyncMapper = (\n' +
      '  element any,\n' +
      '  indexOrKey number|string|any,\n' +
      '  ftor Functor\n' +
      ')=>(resultElement Promise|any)\n' +
      '\n' +
      'map.pool(\n' +
      '  ftor MapPoolFunctor,\n' +
      '  concurrency number,\n' +
      '  mapper SyncOrAsyncMapper\n' +
      ') -> result Promise|Array\n' +
      '\n' +
      'map.pool(\n' +
      '  concurrency number,\n' +
      '  mapper SyncOrAsyncMapper\n' +
      ')(ftor MapPoolFunctor) -> result Promise|Array\n' +
      '```',
    description: '[map](/docs/map) with limited [concurrency](https://web.mit.edu/6.005/www/fa14/classes/17-concurrency/).\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const ids = [1, 2, 3, 4, 5]\n' +
      '\n' +
      'const sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n' +
      '\n' +
      'const delayedIdentity = async value => {\n' +
      '  await sleep(1000)\n' +
      '  return value\n' +
      '}\n' +
      '\n' +
      'map.pool(2, pipe([\n' +
      '  delayedIdentity,\n' +
      '  console.log,\n' +
      ']))(ids)\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncSquare = async n => n ** 2\n' +
      '\n' +
      'map.pool(Promise.resolve([1, 2, 3, 4, 5]), 5, asyncSquare).then(console.log)\n' +
      '// [1, 4, 9, 16, 25]\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [forEach](/docs/forEach)\n' +
      ' * [map](/docs/map)\n' +
      ' * [map.entries](/docs/map.entries)\n' +
      ' * [map.series](/docs/map.series)\n' +
      ' * [filter](/docs/filter)\n' +
      ' * [reduce](/docs/reduce)\n' +
      ' * [transform](/docs/transform)\n' +
      ' * [flatMap](/docs/flatMap)\n' +
      ' * [some](/docs/some)',
    TODO: 'objectMapPool',
    execution: 'concurrent',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'map.pool',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type MapPoolFunctor = Array|Object|Set|Map\n' +
              '\n' +
              'type SyncOrAsyncMapper = (\n' +
              '  element any,\n' +
              '  indexOrKey number|string|any,\n' +
              '  ftor Functor\n' +
              ')=>(resultElement Promise|any)\n' +
              '\n' +
              'map.pool(\n' +
              '  ftor MapPoolFunctor,\n' +
              '  concurrency number,\n' +
              '  mapper SyncOrAsyncMapper\n' +
              ') -> result Promise|Array\n' +
              '\n' +
              'map.pool(\n' +
              '  concurrency number,\n' +
              '  mapper SyncOrAsyncMapper\n' +
              ')(ftor MapPoolFunctor) -> result Promise|Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 20, column: 4, offset: 412 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 20, column: 4, offset: 412 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'link',
                title: null,
                url: '/docs/map',
                children: [
                  {
                    type: 'text',
                    value: 'map',
                    position: {
                      start: { line: 1, column: 2, offset: 1 },
                      end: { line: 1, column: 5, offset: 4 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              },
              {
                type: 'text',
                value: ' with limited ',
                position: {
                  start: { line: 1, column: 17, offset: 16 },
                  end: { line: 1, column: 31, offset: 30 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'https://web.mit.edu/6.005/www/fa14/classes/17-concurrency/',
                children: [
                  {
                    type: 'text',
                    value: 'concurrency',
                    position: {
                      start: { line: 1, column: 32, offset: 31 },
                      end: { line: 1, column: 43, offset: 42 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 31, offset: 30 },
                  end: { line: 1, column: 104, offset: 103 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 1, column: 104, offset: 103 },
                  end: { line: 1, column: 105, offset: 104 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 105, offset: 104 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const ids = [1, 2, 3, 4, 5]\n' +
              '\n' +
              'const sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n' +
              '\n' +
              'const delayedIdentity = async value => {\n' +
              '  await sleep(1000)\n' +
              '  return value\n' +
              '}\n' +
              '\n' +
              'map.pool(2, pipe([\n' +
              '  delayedIdentity,\n' +
              '  console.log,\n' +
              ']))(ids)',
            position: {
              start: { line: 3, column: 1, offset: 106 },
              end: { line: 17, column: 4, offset: 375 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 19, column: 1, offset: 377 },
                  end: { line: 19, column: 148, offset: 524 }
                }
              }
            ],
            position: {
              start: { line: 19, column: 1, offset: 377 },
              end: { line: 19, column: 148, offset: 524 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncSquare = async n => n ** 2\n' +
              '\n' +
              'map.pool(Promise.resolve([1, 2, 3, 4, 5]), 5, asyncSquare).then(console.log)\n' +
              '// [1, 4, 9, 16, 25]',
            position: {
              start: { line: 21, column: 1, offset: 526 },
              end: { line: 26, column: 4, offset: 693 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 28, column: 1, offset: 695 },
                  end: { line: 28, column: 10, offset: 704 }
                }
              }
            ],
            position: {
              start: { line: 28, column: 1, offset: 695 },
              end: { line: 28, column: 10, offset: 704 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 29, column: 5, offset: 709 },
                              end: { line: 29, column: 12, offset: 716 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 29, column: 4, offset: 708 },
                          end: { line: 29, column: 28, offset: 732 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 29, column: 4, offset: 708 },
                      end: { line: 29, column: 28, offset: 732 }
                    }
                  }
                ],
                position: {
                  start: { line: 29, column: 2, offset: 706 },
                  end: { line: 29, column: 28, offset: 732 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map',
                        children: [
                          {
                            type: 'text',
                            value: 'map',
                            position: {
                              start: { line: 30, column: 5, offset: 737 },
                              end: { line: 30, column: 8, offset: 740 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 30, column: 4, offset: 736 },
                          end: { line: 30, column: 20, offset: 752 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 30, column: 4, offset: 736 },
                      end: { line: 30, column: 20, offset: 752 }
                    }
                  }
                ],
                position: {
                  start: { line: 30, column: 2, offset: 734 },
                  end: { line: 30, column: 20, offset: 752 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map.entries',
                        children: [
                          {
                            type: 'text',
                            value: 'map.entries',
                            position: {
                              start: { line: 31, column: 5, offset: 757 },
                              end: { line: 31, column: 16, offset: 768 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 31, column: 4, offset: 756 },
                          end: { line: 31, column: 36, offset: 788 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 31, column: 4, offset: 756 },
                      end: { line: 31, column: 36, offset: 788 }
                    }
                  }
                ],
                position: {
                  start: { line: 31, column: 2, offset: 754 },
                  end: { line: 31, column: 36, offset: 788 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map.series',
                        children: [
                          {
                            type: 'text',
                            value: 'map.series',
                            position: {
                              start: { line: 32, column: 5, offset: 793 },
                              end: { line: 32, column: 15, offset: 803 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 32, column: 4, offset: 792 },
                          end: { line: 32, column: 34, offset: 822 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 32, column: 4, offset: 792 },
                      end: { line: 32, column: 34, offset: 822 }
                    }
                  }
                ],
                position: {
                  start: { line: 32, column: 2, offset: 790 },
                  end: { line: 32, column: 34, offset: 822 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/filter',
                        children: [
                          {
                            type: 'text',
                            value: 'filter',
                            position: {
                              start: { line: 33, column: 5, offset: 827 },
                              end: { line: 33, column: 11, offset: 833 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 33, column: 4, offset: 826 },
                          end: { line: 33, column: 26, offset: 848 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 33, column: 4, offset: 826 },
                      end: { line: 33, column: 26, offset: 848 }
                    }
                  }
                ],
                position: {
                  start: { line: 33, column: 2, offset: 824 },
                  end: { line: 33, column: 26, offset: 848 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/reduce',
                        children: [
                          {
                            type: 'text',
                            value: 'reduce',
                            position: {
                              start: { line: 34, column: 5, offset: 853 },
                              end: { line: 34, column: 11, offset: 859 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 34, column: 4, offset: 852 },
                          end: { line: 34, column: 26, offset: 874 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 34, column: 4, offset: 852 },
                      end: { line: 34, column: 26, offset: 874 }
                    }
                  }
                ],
                position: {
                  start: { line: 34, column: 2, offset: 850 },
                  end: { line: 34, column: 26, offset: 874 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/transform',
                        children: [
                          {
                            type: 'text',
                            value: 'transform',
                            position: {
                              start: { line: 35, column: 5, offset: 879 },
                              end: { line: 35, column: 14, offset: 888 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 35, column: 4, offset: 878 },
                          end: { line: 35, column: 32, offset: 906 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 35, column: 4, offset: 878 },
                      end: { line: 35, column: 32, offset: 906 }
                    }
                  }
                ],
                position: {
                  start: { line: 35, column: 2, offset: 876 },
                  end: { line: 35, column: 32, offset: 906 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/flatMap',
                        children: [
                          {
                            type: 'text',
                            value: 'flatMap',
                            position: {
                              start: { line: 36, column: 5, offset: 911 },
                              end: { line: 36, column: 12, offset: 918 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 36, column: 4, offset: 910 },
                          end: { line: 36, column: 28, offset: 934 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 36, column: 4, offset: 910 },
                      end: { line: 36, column: 28, offset: 934 }
                    }
                  }
                ],
                position: {
                  start: { line: 36, column: 2, offset: 908 },
                  end: { line: 36, column: 28, offset: 934 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/some',
                        children: [
                          {
                            type: 'text',
                            value: 'some',
                            position: {
                              start: { line: 37, column: 5, offset: 939 },
                              end: { line: 37, column: 9, offset: 943 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 37, column: 4, offset: 938 },
                          end: { line: 37, column: 22, offset: 956 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 37, column: 4, offset: 938 },
                      end: { line: 37, column: 22, offset: 956 }
                    }
                  }
                ],
                position: {
                  start: { line: 37, column: 2, offset: 936 },
                  end: { line: 37, column: 22, offset: 956 }
                }
              }
            ],
            position: {
              start: { line: 29, column: 2, offset: 706 },
              end: { line: 37, column: 22, offset: 956 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 37, column: 22, offset: 956 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectMapPool',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'concurrent',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/map.js'
  },
  {
    name: 'map.rate',
    synopsis: '```coffeescript [specscript]\n' +
      'type Functor = Array|Object|Set|Map\n' +
      '\n' +
      'map.rate(\n' +
      '  rate number,\n' +
      '  f (value any)=>Promise|any,\n' +
      ')(f Functor) -> result Promise|Array\n' +
      '\n' +
      'map.rate(\n' +
      '  f Functor,\n' +
      '  rate number,\n' +
      '  f (value any)=>Promise|any,\n' +
      ') -> result Promise|Array\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'map.rate',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Functor = Array|Object|Set|Map\n' +
              '\n' +
              'map.rate(\n' +
              '  rate number,\n' +
              '  f (value any)=>Promise|any,\n' +
              ')(f Functor) -> result Promise|Array\n' +
              '\n' +
              'map.rate(\n' +
              '  f Functor,\n' +
              '  rate number,\n' +
              '  f (value any)=>Promise|any,\n' +
              ') -> result Promise|Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 14, column: 4, offset: 256 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 14, column: 4, offset: 256 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/map.js'
  },
  {
    name: 'BrokenPromise',
    catchphrase: 'a Promise that never comes back',
    synopsis: 'new BrokenPromise() -> BrokenPromise {}',
    description: 'A **BrokenPromise** is a Promise that never resolves or rejects, taking an infinite amount of time to get back to the caller.\n' +
      '\n' +
      '```javascript\n' +
      'new BrokenPromise() // a new BrokenPromise instance\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'BrokenPromise',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'a Promise that never comes back',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 32, offset: 31 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 32, offset: 31 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 32, offset: 31 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new BrokenPromise() -> BrokenPromise {}',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 40, offset: 39 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 40, offset: 39 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 40, offset: 39 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'A ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 3, offset: 2 }
                }
              },
              {
                type: 'strong',
                children: [
                  {
                    type: 'text',
                    value: 'BrokenPromise',
                    position: {
                      start: { line: 1, column: 5, offset: 4 },
                      end: { line: 1, column: 18, offset: 17 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 3, offset: 2 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              },
              {
                type: 'text',
                value: ' is a Promise that never resolves or rejects, taking an infinite amount of time to get back to the caller.',
                position: {
                  start: { line: 1, column: 20, offset: 19 },
                  end: { line: 1, column: 126, offset: 125 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 126, offset: 125 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: 'new BrokenPromise() // a new BrokenPromise instance',
            position: {
              start: { line: 3, column: 1, offset: 127 },
              end: { line: 5, column: 4, offset: 196 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 196 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/BrokenPromise.js'
  },
  {
    name: 'BrokenPromise.prototype.then',
    catchphrase: 'register an unreachable resolver',
    synopsis: 'new BrokenPromise().then(unreachableResolver function)',
    description: '**BrokenPromise.prototype.then** registers a Promise `.then` resolver function with the internal infinite promise. In that sense, the resolver function _technically_ never gets called. However, it is possible to manually fire the provided `unreachableResolver` with `BrokenPromise.prototype.resolve`.\n' +
      '\n' +
      '```javascript\n' +
      "new BrokenPromise().then(() => console.log('unreachable'))\n" +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'BrokenPromise.prototype.then',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'register an unreachable resolver',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 33, offset: 32 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 33, offset: 32 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 33, offset: 32 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new BrokenPromise().then(unreachableResolver function)',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 55, offset: 54 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 55, offset: 54 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 55, offset: 54 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'strong',
                children: [
                  {
                    type: 'text',
                    value: 'BrokenPromise.prototype.then',
                    position: {
                      start: { line: 1, column: 3, offset: 2 },
                      end: { line: 1, column: 31, offset: 30 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 33, offset: 32 }
                }
              },
              {
                type: 'text',
                value: ' registers a Promise ',
                position: {
                  start: { line: 1, column: 33, offset: 32 },
                  end: { line: 1, column: 54, offset: 53 }
                }
              },
              {
                type: 'inlineCode',
                value: '.then',
                position: {
                  start: { line: 1, column: 54, offset: 53 },
                  end: { line: 1, column: 61, offset: 60 }
                }
              },
              {
                type: 'text',
                value: ' resolver function with the internal infinite promise. In that sense, the resolver function ',
                position: {
                  start: { line: 1, column: 61, offset: 60 },
                  end: { line: 1, column: 153, offset: 152 }
                }
              },
              {
                type: 'emphasis',
                children: [
                  {
                    type: 'text',
                    value: 'technically',
                    position: {
                      start: { line: 1, column: 154, offset: 153 },
                      end: { line: 1, column: 165, offset: 164 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 153, offset: 152 },
                  end: { line: 1, column: 166, offset: 165 }
                }
              },
              {
                type: 'text',
                value: ' never gets called. However, it is possible to manually fire the provided ',
                position: {
                  start: { line: 1, column: 166, offset: 165 },
                  end: { line: 1, column: 240, offset: 239 }
                }
              },
              {
                type: 'inlineCode',
                value: 'unreachableResolver',
                position: {
                  start: { line: 1, column: 240, offset: 239 },
                  end: { line: 1, column: 261, offset: 260 }
                }
              },
              {
                type: 'text',
                value: ' with ',
                position: {
                  start: { line: 1, column: 261, offset: 260 },
                  end: { line: 1, column: 267, offset: 266 }
                }
              },
              {
                type: 'inlineCode',
                value: 'BrokenPromise.prototype.resolve',
                position: {
                  start: { line: 1, column: 267, offset: 266 },
                  end: { line: 1, column: 300, offset: 299 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 1, column: 300, offset: 299 },
                  end: { line: 1, column: 301, offset: 300 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 301, offset: 300 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: "new BrokenPromise().then(() => console.log('unreachable'))",
            position: {
              start: { line: 3, column: 1, offset: 302 },
              end: { line: 5, column: 4, offset: 378 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 378 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/BrokenPromise.js'
  },
  {
    name: 'BrokenPromise.prototype.resolve',
    catchphrase: 'manually resolve a broken promise',
    synopsis: 'const brokenPromise = new BrokenPromise().then(\n' +
      "  () => console.log('only reachable by .resolve'))\n" +
      '\n' +
      'brokenPromise.resolve()\n' +
      '// only reachable by .resolve',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'BrokenPromise.prototype.resolve',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 32, offset: 31 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 32, offset: 31 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 32, offset: 31 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'manually resolve a broken promise',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 34, offset: 33 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 34, offset: 33 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 34, offset: 33 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'const brokenPromise = new BrokenPromise().then(\n' +
                  "() => console.log('only reachable by .resolve'))",
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 51, offset: 98 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 51, offset: 98 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'brokenPromise.resolve()\n// only reachable by .resolve',
                position: {
                  start: { line: 4, column: 1, offset: 100 },
                  end: { line: 5, column: 30, offset: 153 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 1, offset: 100 },
              end: { line: 5, column: 30, offset: 153 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 30, offset: 153 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/BrokenPromise.js'
  },
  {
    name: 'CancelToken',
    synopsis: 'new CancelToken() -> CancelToken {}',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'CancelToken',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new CancelToken() -> CancelToken {}',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 36, offset: 35 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 36, offset: 35 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 36, offset: 35 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Cancellable.js'
  },
  {
    name: 'CancelToken.prototype.cancel',
    synopsis: 'new CancelToken().cancel(value Error|any) -> CancelToken {}',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'CancelToken.prototype.cancel',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new CancelToken().cancel(value Error|any) -> CancelToken {}',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 60, offset: 59 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 60, offset: 59 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 60, offset: 59 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Cancellable.js'
  },
  {
    name: 'CancellablePromise',
    synopsis: 'CancellablePromise(value Promise|any)\n' +
      '  -> result Promise { cancel: Error|any=>this }',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'CancellablePromise',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'CancellablePromise(value Promise|any)\n' +
                  '-> result Promise { cancel: Error|any=>this }',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 48, offset: 85 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 48, offset: 85 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 2, column: 48, offset: 85 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Cancellable.js'
  },
  {
    name: 'Cancellable',
    catchphrase: 'make a function return cancellable Promises',
    synopsis: 'Promise { cancel: any=>() } -> CancellablePromise\n' +
      '\n' +
      'Cancellable(\n' +
      '  func ...any=>Promise|any,\n' +
      ') -> cancellablePromiseFactory ...any=>CancellablePromise|any',
    description: '**Cancellable** wraps an async function to apply an effect such that all Promises returned by the wrapped async function are cancellable via the `.cancel` method.\n' +
      '\n' +
      '```javascript\n' +
      'const createInfinitePromise = () => Promise.race([])\n' +
      '\n' +
      'const createCancellablePromise = Cancellable(createInfinitePromise)\n' +
      '\n' +
      'const cancellablePromise = createCancellablePromise()\n' +
      '\n' +
      "cancellablePromise.cancel(new Error('cancelled')).catch(\n" +
      '  err => console.error(err)) // Error: cancelled\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Cancellable',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'make a function return cancellable Promises',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 44, offset: 43 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 44, offset: 43 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 44, offset: 43 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Promise { cancel: any=>() } -> CancellablePromise',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 50, offset: 49 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 50, offset: 49 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Cancellable(\n' +
                  'func ...any=>Promise|any,\n' +
                  ') -> cancellablePromiseFactory ...any=>CancellablePromise|any',
                position: {
                  start: { line: 3, column: 1, offset: 51 },
                  end: { line: 5, column: 62, offset: 153 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 51 },
              end: { line: 5, column: 62, offset: 153 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 62, offset: 153 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'strong',
                children: [
                  {
                    type: 'text',
                    value: 'Cancellable',
                    position: {
                      start: { line: 1, column: 3, offset: 2 },
                      end: { line: 1, column: 14, offset: 13 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              },
              {
                type: 'text',
                value: ' wraps an async function to apply an effect such that all Promises returned by the wrapped async function are cancellable via the ',
                position: {
                  start: { line: 1, column: 16, offset: 15 },
                  end: { line: 1, column: 146, offset: 145 }
                }
              },
              {
                type: 'inlineCode',
                value: '.cancel',
                position: {
                  start: { line: 1, column: 146, offset: 145 },
                  end: { line: 1, column: 155, offset: 154 }
                }
              },
              {
                type: 'text',
                value: ' method.',
                position: {
                  start: { line: 1, column: 155, offset: 154 },
                  end: { line: 1, column: 163, offset: 162 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 163, offset: 162 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: 'const createInfinitePromise = () => Promise.race([])\n' +
              '\n' +
              'const createCancellablePromise = Cancellable(createInfinitePromise)\n' +
              '\n' +
              'const cancellablePromise = createCancellablePromise()\n' +
              '\n' +
              "cancellablePromise.cancel(new Error('cancelled')).catch(\n" +
              '  err => console.error(err)) // Error: cancelled',
            position: {
              start: { line: 3, column: 1, offset: 164 },
              end: { line: 12, column: 4, offset: 465 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 465 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Cancellable.js'
  },
  {
    name: 'Cancellable',
    memoryUsage: 'new BrokenPromise(): 5e+5: { "max": "86.89 MiB", "avg": "46.11 MiB" }\n' +
      'Cancellable(() => new BrokenPromise())().cancel(Error): 5e+5: { "max": "20.18 MiB", "avg": "11.64 MiB" }\n' +
      'Cancellable(() => new BrokenPromise())().cancel(Error).catch: 5e+5: { "max": "19.93 MiB", "avg": "11.90 MiB" }\n' +
      'Cancellable(reduce(add, 0)).cancel(Error): 5e+5: { "max": "12.11 MiB", "avg": "6.55 MiB" }',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Cancellable',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      memoryUsage: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new BrokenPromise(): 5e+5: { "max": "86.89 MiB", "avg": "46.11 MiB" }\n' +
                  'Cancellable(() => new BrokenPromise())().cancel(Error): 5e+5: { "max": "20.18 MiB", "avg": "11.64 MiB" }\n' +
                  'Cancellable(() => new BrokenPromise())().cancel(Error).catch: 5e+5: { "max": "19.93 MiB", "avg": "11.90 MiB" }\n' +
                  'Cancellable(reduce(add, 0)).cancel(Error): 5e+5: { "max": "12.11 MiB", "avg": "6.55 MiB" }',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 4, column: 91, offset: 376 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 91, offset: 376 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 91, offset: 376 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Cancellable.memoryUsage.js'
  },
  {
    name: 'Instance',
    synopsis: 'new Instance(value any) -> Instance',
    catchphrase: 'Type checking',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(value any) -> Instance',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 36, offset: 35 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 36, offset: 35 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 36, offset: 35 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Type checking',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.chain',
    synopsis: '<A any, B any>new Instance(x A).chain(f A=>Instance<B>) -> Instance<B>',
    description: 'For associativity',
    example: 'const inst = new Instance(3)\n' +
      'console.log(\n' +
      '  inst.chain(number => new Instance(number ** 2))\n' +
      ') // Instance { 9 }',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.chain',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '<A any, B any>new Instance(x A).chain(f A=>Instance',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 52, offset: 51 }
                }
              },
              {
                type: 'html',
                value: '<B>',
                position: {
                  start: { line: 1, column: 52, offset: 51 },
                  end: { line: 1, column: 55, offset: 54 }
                }
              },
              {
                type: 'text',
                value: ') -> Instance',
                position: {
                  start: { line: 1, column: 55, offset: 54 },
                  end: { line: 1, column: 68, offset: 67 }
                }
              },
              {
                type: 'html',
                value: '<B>',
                position: {
                  start: { line: 1, column: 68, offset: 67 },
                  end: { line: 1, column: 71, offset: 70 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 71, offset: 70 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 71, offset: 70 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'For associativity',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      example: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'const inst = new Instance(3)\n' +
                  'console.log(\n' +
                  'inst.chain(number => new Instance(number ** 2))\n' +
                  ') // Instance { 9 }',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 4, column: 20, offset: 111 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 20, offset: 111 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 20, offset: 111 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.map',
    synopsis: '<A any, B any>new Instance(value A).map(func A=>B) -> Instance<B>\n' +
      'map(func) {\n' +
      'return new Instance(func(this.value))\n' +
      '}',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.map',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 23, offset: 22 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 23, offset: 22 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 23, offset: 22 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '<A any, B any>new Instance(value A).map(func A=>B) -> Instance',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 63, offset: 62 }
                }
              },
              {
                type: 'html',
                value: '<B>',
                position: {
                  start: { line: 1, column: 63, offset: 62 },
                  end: { line: 1, column: 66, offset: 65 }
                }
              },
              {
                type: 'text',
                value: '\nmap(func) {\nreturn new Instance(func(this.value))\n}',
                position: {
                  start: { line: 1, column: 66, offset: 65 },
                  end: { line: 4, column: 2, offset: 117 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 2, offset: 117 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 2, offset: 117 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.is',
    synopsis: 'new Instance(x any).is(ctor function) -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.is',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 22, offset: 21 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 22, offset: 21 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 22, offset: 21 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(x any).is(ctor function) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 49, offset: 48 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 49, offset: 48 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 49, offset: 48 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.isString',
    synopsis: 'new Instance(x any).isString() -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.isString',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 28, offset: 27 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 28, offset: 27 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(x any).isString() -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 42, offset: 41 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 42, offset: 41 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 42, offset: 41 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.isNumber',
    synopsis: 'new Instance(x any).isNumber() -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.isNumber',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 28, offset: 27 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 28, offset: 27 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(x any).isNumber() -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 42, offset: 41 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 42, offset: 41 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 42, offset: 41 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.isArray',
    synopsis: 'new Instance(x any).isArray() -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.isArray',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 27, offset: 26 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 27, offset: 26 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 27, offset: 26 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(x any).isArray() -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 41, offset: 40 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 41, offset: 40 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 41, offset: 40 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.isObject',
    synopsis: 'new Instance(x any).isObject() -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.isObject',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 28, offset: 27 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 28, offset: 27 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(x any).isObject() -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 42, offset: 41 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 42, offset: 41 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 42, offset: 41 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.isSet',
    synopsis: 'new Instance(x any).isSet() -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.isSet',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(x any).isSet() -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 39, offset: 38 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 39, offset: 38 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 39, offset: 38 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.isMap',
    synopsis: 'new Instance(x any).isMap() -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.isMap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(x any).isMap() -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 39, offset: 38 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 39, offset: 38 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 39, offset: 38 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.isIterable',
    synopsis: 'new Instance(value any).isIterable() -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.isIterable',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 30, offset: 29 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 30, offset: 29 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(value any).isIterable() -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 48, offset: 47 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 48, offset: 47 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 48, offset: 47 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.isAsyncIterable',
    synopsis: 'new Instance(value any).isAsyncIterable() -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.isAsyncIterable',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 35, offset: 34 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 35, offset: 34 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 35, offset: 34 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(value any).isAsyncIterable() -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 53, offset: 52 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 53, offset: 52 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 53, offset: 52 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.isFunction',
    synopsis: 'new Instance(x any).isFunction() -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.isFunction',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 30, offset: 29 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 30, offset: 29 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(x any).isFunction() -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 44, offset: 43 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 44, offset: 43 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 44, offset: 43 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.isReadable',
    synopsis: 'new Instance(x any).isReadable() -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.isReadable',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 30, offset: 29 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 30, offset: 29 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(x any).isReadable() -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 44, offset: 43 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 44, offset: 43 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 44, offset: 43 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.isWritable',
    synopsis: 'new Instance(x any).isWritable() -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.isWritable',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 30, offset: 29 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 30, offset: 29 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(x any).isWritable() -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 44, offset: 43 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 44, offset: 43 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 44, offset: 43 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.isPromise',
    synopsis: 'new Instance(x any).isPromise() -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.isPromise',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(x any).isPromise() -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 43, offset: 42 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 43, offset: 42 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 43, offset: 42 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Instance.prototype.isTypedArray',
    synopsis: 'new Instance(x any).isTypedArray() -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Instance.prototype.isTypedArray',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 32, offset: 31 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 32, offset: 31 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 32, offset: 31 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Instance(x any).isTypedArray() -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 46, offset: 45 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 46, offset: 45 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 46, offset: 45 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Instance.js'
  },
  {
    name: 'Mux.flatten',
    benchmark: 'Mux.flatten(nested): 1e+5: 25.588ms\n_.flatten(nested): 1e+5: 28.935ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.flatten',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.flatten(nested): 1e+5: 25.588ms\n' +
                  '_.flatten(nested): 1e+5: 28.935ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 34, offset: 69 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 34, offset: 69 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 2, column: 34, offset: 69 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.benchmark.js'
  },
  {
    synopsis: 'isGeneratorFunction(value !null) -> boolean',
    mdast: {
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isGeneratorFunction(value !null) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 44, offset: 43 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 44, offset: 43 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 44, offset: 43 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    synopsis: 'isSequence(value any) -> boolean',
    mdast: {
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isSequence(value any) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 33, offset: 32 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 33, offset: 32 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 33, offset: 32 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    synopsis: 'isAsyncSequence(value any) -> boolean',
    mdast: {
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isAsyncSequence(value any) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 38, offset: 37 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 38, offset: 37 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 38, offset: 37 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'Mux',
    synopsis: 'Iterable|GeneratorFunction -> SyncSequence\n' +
      'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
      'SyncSequence|AsyncSequence -> Sequence\n' +
      '\n' +
      '<T any>new Mux(Sequence<Sequence<T>|T>|T) -> Mux',
    catchphrase: 'Multiplexing for Sequences of Sequences',
    WARNING: "Iterators have defined a self-referencing Symbol.iterator, which means they'll check out as Iterables but will deplete prematurely. Supplying a direct Iterator as the top level sequence in any capacity to Mux will cause undesirable behavior.",
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 4, offset: 3 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 4, offset: 3 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction -> SyncSequence\n' +
                  'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
                  'SyncSequence|AsyncSequence -> Sequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 39, offset: 135 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 39, offset: 135 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 5, column: 1, offset: 137 },
                  end: { line: 5, column: 8, offset: 144 }
                }
              },
              {
                type: 'text',
                value: 'new Mux(Sequence<Sequence',
                position: {
                  start: { line: 5, column: 8, offset: 144 },
                  end: { line: 5, column: 33, offset: 169 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 5, column: 33, offset: 169 },
                  end: { line: 5, column: 36, offset: 172 }
                }
              },
              {
                type: 'text',
                value: '|T>|T) -> Mux',
                position: {
                  start: { line: 5, column: 36, offset: 172 },
                  end: { line: 5, column: 49, offset: 185 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 137 },
              end: { line: 5, column: 49, offset: 185 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 49, offset: 185 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Multiplexing for Sequences of Sequences',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 40, offset: 39 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 40, offset: 39 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 40, offset: 39 }
        }
      },
      WARNING: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "Iterators have defined a self-referencing Symbol.iterator, which means they'll check out as Iterables but will deplete prematurely. Supplying a direct Iterator as the top level sequence in any capacity to Mux will cause undesirable behavior.",
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 242, offset: 241 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 242, offset: 241 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 242, offset: 241 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'Mux.isSequence',
    synopsis: 'Mux.isSequence(x any) -> boolean',
    catchphrase: 'Tell if Sequence',
    description: 'Mux.isSequence takes anything and returns a Boolean value. Mux.isSequence returns true if the value is an Iterable, GeneratorFunction, AsyncIterable, or AsyncGeneratorFunction.',
    example: 'console.log(\n  Mux.isSequence([[1], [2], [3]]),\n) // true',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.isSequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.isSequence(x any) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 33, offset: 32 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 33, offset: 32 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 33, offset: 32 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Tell if Sequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.isSequence takes anything and returns a Boolean value. Mux.isSequence returns true if the value is an Iterable, GeneratorFunction, AsyncIterable, or AsyncGeneratorFunction.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 177, offset: 176 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 177, offset: 176 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 177, offset: 176 }
        }
      },
      example: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'console.log(\nMux.isSequence([[1], [2], [3]]),\n) // true',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 10, offset: 57 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 10, offset: 57 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 10, offset: 57 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'iteratorOf',
    synopsis: '<T any>iteratorOf(x T) -> Iterator<T>',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'iteratorOf',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              },
              {
                type: 'text',
                value: 'iteratorOf(x T) -> Iterator',
                position: {
                  start: { line: 1, column: 8, offset: 7 },
                  end: { line: 1, column: 35, offset: 34 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 35, offset: 34 },
                  end: { line: 1, column: 38, offset: 37 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 38, offset: 37 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 38, offset: 37 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'getSyncIterator',
    synopsis: 'Iterable|GeneratorFunction -> SyncSequence\n' +
      '\n' +
      '<T any>getSyncIterator(x SyncSequence<T>|T) -> Iterator<T>',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'getSyncIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction -> SyncSequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 43, offset: 42 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 43, offset: 42 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 3, column: 1, offset: 44 },
                  end: { line: 3, column: 8, offset: 51 }
                }
              },
              {
                type: 'text',
                value: 'getSyncIterator(x SyncSequence',
                position: {
                  start: { line: 3, column: 8, offset: 51 },
                  end: { line: 3, column: 38, offset: 81 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 3, column: 38, offset: 81 },
                  end: { line: 3, column: 41, offset: 84 }
                }
              },
              {
                type: 'text',
                value: '|T) -> Iterator',
                position: {
                  start: { line: 3, column: 41, offset: 84 },
                  end: { line: 3, column: 56, offset: 99 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 3, column: 56, offset: 99 },
                  end: { line: 3, column: 59, offset: 102 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 44 },
              end: { line: 3, column: 59, offset: 102 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 59, offset: 102 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'getIterator',
    synopsis: 'Iterable|GeneratorFunction\n' +
      '  |AsyncIterable|AsyncGeneratorFunction -> Sequence\n' +
      '\n' +
      '<T any>getIterator(x Sequence<T>|T) -> Iterator<T>|AsyncIterator<T>',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'getIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction\n' +
                  '|AsyncIterable|AsyncGeneratorFunction -> Sequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 52, offset: 78 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 52, offset: 78 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 4, column: 1, offset: 80 },
                  end: { line: 4, column: 8, offset: 87 }
                }
              },
              {
                type: 'text',
                value: 'getIterator(x Sequence',
                position: {
                  start: { line: 4, column: 8, offset: 87 },
                  end: { line: 4, column: 30, offset: 109 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 4, column: 30, offset: 109 },
                  end: { line: 4, column: 33, offset: 112 }
                }
              },
              {
                type: 'text',
                value: '|T) -> Iterator',
                position: {
                  start: { line: 4, column: 33, offset: 112 },
                  end: { line: 4, column: 48, offset: 127 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 4, column: 48, offset: 127 },
                  end: { line: 4, column: 51, offset: 130 }
                }
              },
              {
                type: 'text',
                value: '|AsyncIterator',
                position: {
                  start: { line: 4, column: 51, offset: 130 },
                  end: { line: 4, column: 65, offset: 144 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 4, column: 65, offset: 144 },
                  end: { line: 4, column: 68, offset: 147 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 1, offset: 80 },
              end: { line: 4, column: 68, offset: 147 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 68, offset: 147 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'sequenceIsAsync',
    synopsis: 'Iterable|GeneratorFunction\n' +
      '  |AsyncIterable|AsyncGeneratorFunction -> Sequence\n' +
      '\n' +
      'sequenceIsAsync(x Sequence) -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'sequenceIsAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction\n' +
                  '|AsyncIterable|AsyncGeneratorFunction -> Sequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 52, offset: 78 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 52, offset: 78 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'sequenceIsAsync(x Sequence) -> boolean',
                position: {
                  start: { line: 4, column: 1, offset: 80 },
                  end: { line: 4, column: 39, offset: 118 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 1, offset: 80 },
              end: { line: 4, column: 39, offset: 118 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 39, offset: 118 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'muxIsSync',
    synopsis: 'Iterable|GeneratorFunction\n' +
      '  |AsyncIterable|AsyncGeneratorFunction -> Sequence\n' +
      '\n' +
      '<T any>muxIsSync(x Sequence<Sequence<T>|T>) -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'muxIsSync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction\n' +
                  '|AsyncIterable|AsyncGeneratorFunction -> Sequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 52, offset: 78 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 52, offset: 78 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 4, column: 1, offset: 80 },
                  end: { line: 4, column: 8, offset: 87 }
                }
              },
              {
                type: 'text',
                value: 'muxIsSync(x Sequence<Sequence',
                position: {
                  start: { line: 4, column: 8, offset: 87 },
                  end: { line: 4, column: 37, offset: 116 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 4, column: 37, offset: 116 },
                  end: { line: 4, column: 40, offset: 119 }
                }
              },
              {
                type: 'text',
                value: '|T>) -> boolean',
                position: {
                  start: { line: 4, column: 40, offset: 119 },
                  end: { line: 4, column: 55, offset: 134 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 1, offset: 80 },
              end: { line: 4, column: 55, offset: 134 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 55, offset: 134 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'muxZipSync',
    synopsis: 'Iterable|GeneratorFunction -> SyncSequence\n' +
      '\n' +
      '<T any>muxZipSync(\n' +
      '  x SyncSequence<SyncSequence<T>|T>|T,\n' +
      ') -> Iterator<Array<T|undefined>>',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'muxZipSync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction -> SyncSequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 43, offset: 42 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 43, offset: 42 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 3, column: 1, offset: 44 },
                  end: { line: 3, column: 8, offset: 51 }
                }
              },
              {
                type: 'text',
                value: 'muxZipSync(\nx SyncSequence<SyncSequence',
                position: {
                  start: { line: 3, column: 8, offset: 51 },
                  end: { line: 4, column: 30, offset: 92 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 4, column: 30, offset: 92 },
                  end: { line: 4, column: 33, offset: 95 }
                }
              },
              {
                type: 'text',
                value: '|T>|T,\n) -> Iterator<Array<T|undefined>>',
                position: {
                  start: { line: 4, column: 33, offset: 95 },
                  end: { line: 5, column: 34, offset: 135 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 44 },
              end: { line: 5, column: 34, offset: 135 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 34, offset: 135 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'muxZipAsync',
    synopsis: 'Iterable|GeneratorFunction\n' +
      '  |AsyncIterable|AsyncGeneratorFunction -> Sequence\n' +
      '\n' +
      '<T any>muxZipAsync(\n' +
      '  x Sequence<Sequence<T>|T>|T,\n' +
      ') -> AsyncIterator<Array<T|undefined>>',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'muxZipAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction\n' +
                  '|AsyncIterable|AsyncGeneratorFunction -> Sequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 52, offset: 78 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 52, offset: 78 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 4, column: 1, offset: 80 },
                  end: { line: 4, column: 8, offset: 87 }
                }
              },
              {
                type: 'text',
                value: 'muxZipAsync(\nx Sequence<Sequence',
                position: {
                  start: { line: 4, column: 8, offset: 87 },
                  end: { line: 5, column: 22, offset: 121 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 5, column: 22, offset: 121 },
                  end: { line: 5, column: 25, offset: 124 }
                }
              },
              {
                type: 'text',
                value: '|T>|T,\n) -> AsyncIterator<Array<T|undefined>>',
                position: {
                  start: { line: 5, column: 25, offset: 124 },
                  end: { line: 6, column: 39, offset: 169 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 1, offset: 80 },
              end: { line: 6, column: 39, offset: 169 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 39, offset: 169 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'Mux.zip',
    synopsis: 'Iterable|GeneratorFunction -> SyncSequence\n' +
      'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
      'SyncSequence|AsyncSequence -> Sequence\n' +
      '\n' +
      '<T any>Mux.zip(\n' +
      '  x SyncSequence<SyncSequence<T>|T>|T,\n' +
      ') -> Iterator<Array<T|undefined>>\n' +
      '\n' +
      '<T any>Mux.zip(\n' +
      '  x Sequence<Sequence<T>|T>|T,\n' +
      ') -> AsyncIterator<Array<T|undefined>>',
    catchphrase: 'Create rows from disparate Sequences',
    description: 'Mux.zip takes a Sequence of elements or Sequences of elements and outputs either an Iterator or an AsyncIterator that yields an Array of elements of each supplied Sequence for a given iteration. If any Sequence supplied to Mux.zip is AsyncIterable or an AsyncGeneratorFunction, Mux.zip outputs an AsyncIterator. The Iterator or AsyncIterator will iterate as long as the longest iterator of the supplied Sequences; shorter iterators will yield undefined until the longest iterator is consumed.',
    example: "const iterator = Mux.zip([[1, 2, 3], ['a', 'b', 'c']])\n" +
      '\n' +
      'for (const element of iterator) {\n' +
      "  console.log(element) // [1, 'a']\n" +
      "                    // [2, 'b']\n" +
      "                    // [3, 'c']\n" +
      '}',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.zip',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction -> SyncSequence\n' +
                  'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
                  'SyncSequence|AsyncSequence -> Sequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 39, offset: 135 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 39, offset: 135 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 5, column: 1, offset: 137 },
                  end: { line: 5, column: 8, offset: 144 }
                }
              },
              {
                type: 'text',
                value: 'Mux.zip(\nx SyncSequence<SyncSequence',
                position: {
                  start: { line: 5, column: 8, offset: 144 },
                  end: { line: 6, column: 30, offset: 182 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 6, column: 30, offset: 182 },
                  end: { line: 6, column: 33, offset: 185 }
                }
              },
              {
                type: 'text',
                value: '|T>|T,\n) -> Iterator<Array<T|undefined>>',
                position: {
                  start: { line: 6, column: 33, offset: 185 },
                  end: { line: 7, column: 34, offset: 225 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 137 },
              end: { line: 7, column: 34, offset: 225 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 9, column: 1, offset: 227 },
                  end: { line: 9, column: 8, offset: 234 }
                }
              },
              {
                type: 'text',
                value: 'Mux.zip(\nx Sequence<Sequence',
                position: {
                  start: { line: 9, column: 8, offset: 234 },
                  end: { line: 10, column: 22, offset: 264 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 10, column: 22, offset: 264 },
                  end: { line: 10, column: 25, offset: 267 }
                }
              },
              {
                type: 'text',
                value: '|T>|T,\n) -> AsyncIterator<Array<T|undefined>>',
                position: {
                  start: { line: 10, column: 25, offset: 267 },
                  end: { line: 11, column: 39, offset: 312 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 227 },
              end: { line: 11, column: 39, offset: 312 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 39, offset: 312 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create rows from disparate Sequences',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 37, offset: 36 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 37, offset: 36 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 37, offset: 36 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.zip takes a Sequence of elements or Sequences of elements and outputs either an Iterator or an AsyncIterator that yields an Array of elements of each supplied Sequence for a given iteration. If any Sequence supplied to Mux.zip is AsyncIterable or an AsyncGeneratorFunction, Mux.zip outputs an AsyncIterator. The Iterator or AsyncIterator will iterate as long as the longest iterator of the supplied Sequences; shorter iterators will yield undefined until the longest iterator is consumed.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 493, offset: 492 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 493, offset: 492 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 493, offset: 492 }
        }
      },
      example: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "const iterator = Mux.zip([[1, 2, 3], ['a', 'b', 'c']])",
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 55, offset: 54 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 55, offset: 54 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'for (const element of iterator) {\n' +
                  "console.log(element) // [1, 'a']\n" +
                  "// [2, 'b']\n" +
                  "// [3, 'c']\n" +
                  '}',
                position: {
                  start: { line: 3, column: 1, offset: 56 },
                  end: { line: 7, column: 2, offset: 190 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 56 },
              end: { line: 7, column: 2, offset: 190 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 2, offset: 190 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'muxConcatSync',
    synopsis: 'Iterable|GeneratorFunction -> SyncSequence\n' +
      '\n' +
      '<T any>muxConcatSync(\n' +
      '  x SyncSequence<SyncSequence<T>|T>|T,\n' +
      ') -> Iterator<T>',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'muxConcatSync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction -> SyncSequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 43, offset: 42 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 43, offset: 42 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 3, column: 1, offset: 44 },
                  end: { line: 3, column: 8, offset: 51 }
                }
              },
              {
                type: 'text',
                value: 'muxConcatSync(\nx SyncSequence<SyncSequence',
                position: {
                  start: { line: 3, column: 8, offset: 51 },
                  end: { line: 4, column: 30, offset: 95 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 4, column: 30, offset: 95 },
                  end: { line: 4, column: 33, offset: 98 }
                }
              },
              {
                type: 'text',
                value: '|T>|T,\n) -> Iterator',
                position: {
                  start: { line: 4, column: 33, offset: 98 },
                  end: { line: 5, column: 14, offset: 118 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 5, column: 14, offset: 118 },
                  end: { line: 5, column: 17, offset: 121 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 44 },
              end: { line: 5, column: 17, offset: 121 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 17, offset: 121 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'muxConcatAsync',
    synopsis: 'Iterable|GeneratorFunction -> SyncSequence\n' +
      'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
      'SyncSequence|AsyncSequence -> Sequence\n' +
      '\n' +
      '<T any>muxConcatAsync(\n' +
      '  x Sequence<Sequence<T>|T>|T,\n' +
      ') -> AsyncIterator<T>',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'muxConcatAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction -> SyncSequence\n' +
                  'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
                  'SyncSequence|AsyncSequence -> Sequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 39, offset: 135 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 39, offset: 135 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 5, column: 1, offset: 137 },
                  end: { line: 5, column: 8, offset: 144 }
                }
              },
              {
                type: 'text',
                value: 'muxConcatAsync(\nx Sequence<Sequence',
                position: {
                  start: { line: 5, column: 8, offset: 144 },
                  end: { line: 6, column: 22, offset: 181 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 6, column: 22, offset: 181 },
                  end: { line: 6, column: 25, offset: 184 }
                }
              },
              {
                type: 'text',
                value: '|T>|T,\n) -> AsyncIterator',
                position: {
                  start: { line: 6, column: 25, offset: 184 },
                  end: { line: 7, column: 19, offset: 209 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 7, column: 19, offset: 209 },
                  end: { line: 7, column: 22, offset: 212 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 137 },
              end: { line: 7, column: 22, offset: 212 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 22, offset: 212 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'Mux.concat',
    synopsis: 'Iterable|GeneratorFunction -> SyncSequence\n' +
      'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
      'SyncSequence|AsyncSequence -> Sequence\n' +
      '\n' +
      '<T any>Mux.concat(\n' +
      '  x SyncSequence<SyncSequence<T>|T>|T,\n' +
      ') -> Iterator<T>\n' +
      '\n' +
      '<T any>Mux.concat(\n' +
      '  x Sequence<Sequence<T>|T>|T,\n' +
      ') -> AsyncIterator<T>',
    catchphrase: 'Concatenate Sequences into one',
    description: 'Mux.concat takes a Sequence of elements or Sequences of elements and outputs either an Iterator or an AsyncIterator that yields each element individually. The first of these elements is the first element of the first Sequence, the next is the second element of the first Sequence, and so on until all Sequences have been iterated in order. Non-Sequence Elements in the top-level Sequence are yielded as they are.',
    example: 'const iter = Mux.concat([\n' +
      '  [1, 2, 3],\n' +
      '  [4, 5, 6],\n' +
      '  [7, 8, 9],\n' +
      '])\n' +
      '\n' +
      'for (const number of iter) {\n' +
      '  console.log(number) // 1 2 3 4 5 6 7 8 9\n' +
      '}',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.concat',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction -> SyncSequence\n' +
                  'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
                  'SyncSequence|AsyncSequence -> Sequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 39, offset: 135 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 39, offset: 135 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 5, column: 1, offset: 137 },
                  end: { line: 5, column: 8, offset: 144 }
                }
              },
              {
                type: 'text',
                value: 'Mux.concat(\nx SyncSequence<SyncSequence',
                position: {
                  start: { line: 5, column: 8, offset: 144 },
                  end: { line: 6, column: 30, offset: 185 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 6, column: 30, offset: 185 },
                  end: { line: 6, column: 33, offset: 188 }
                }
              },
              {
                type: 'text',
                value: '|T>|T,\n) -> Iterator',
                position: {
                  start: { line: 6, column: 33, offset: 188 },
                  end: { line: 7, column: 14, offset: 208 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 7, column: 14, offset: 208 },
                  end: { line: 7, column: 17, offset: 211 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 137 },
              end: { line: 7, column: 17, offset: 211 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 9, column: 1, offset: 213 },
                  end: { line: 9, column: 8, offset: 220 }
                }
              },
              {
                type: 'text',
                value: 'Mux.concat(\nx Sequence<Sequence',
                position: {
                  start: { line: 9, column: 8, offset: 220 },
                  end: { line: 10, column: 22, offset: 253 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 10, column: 22, offset: 253 },
                  end: { line: 10, column: 25, offset: 256 }
                }
              },
              {
                type: 'text',
                value: '|T>|T,\n) -> AsyncIterator',
                position: {
                  start: { line: 10, column: 25, offset: 256 },
                  end: { line: 11, column: 19, offset: 281 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 11, column: 19, offset: 281 },
                  end: { line: 11, column: 22, offset: 284 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 213 },
              end: { line: 11, column: 22, offset: 284 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 22, offset: 284 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Concatenate Sequences into one',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 31, offset: 30 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 31, offset: 30 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 31, offset: 30 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.concat takes a Sequence of elements or Sequences of elements and outputs either an Iterator or an AsyncIterator that yields each element individually. The first of these elements is the first element of the first Sequence, the next is the second element of the first Sequence, and so on until all Sequences have been iterated in order. Non-Sequence Elements in the top-level Sequence are yielded as they are.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 413, offset: 412 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 413, offset: 412 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 413, offset: 412 }
        }
      },
      example: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'const iter = Mux.concat([\n' +
                  '[1, 2, 3],\n' +
                  '[4, 5, 6],\n' +
                  '[7, 8, 9],\n' +
                  '])',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 5, column: 3, offset: 67 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 3, offset: 67 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'for (const number of iter) {\n' +
                  'console.log(number) // 1 2 3 4 5 6 7 8 9\n' +
                  '}',
                position: {
                  start: { line: 7, column: 1, offset: 69 },
                  end: { line: 9, column: 2, offset: 142 }
                }
              }
            ],
            position: {
              start: { line: 7, column: 1, offset: 69 },
              end: { line: 9, column: 2, offset: 142 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 2, offset: 142 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'muxSwitchSync',
    synopsis: '<T any>muxSwitchSync(\n' +
      '  x SyncSequence<SyncSequence<T>|T>|T,\n' +
      ') -> Iterator<T>',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'muxSwitchSync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              },
              {
                type: 'text',
                value: 'muxSwitchSync(\nx SyncSequence<SyncSequence',
                position: {
                  start: { line: 1, column: 8, offset: 7 },
                  end: { line: 2, column: 30, offset: 51 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 2, column: 30, offset: 51 },
                  end: { line: 2, column: 33, offset: 54 }
                }
              },
              {
                type: 'text',
                value: '|T>|T,\n) -> Iterator',
                position: {
                  start: { line: 2, column: 33, offset: 54 },
                  end: { line: 3, column: 14, offset: 74 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 3, column: 14, offset: 74 },
                  end: { line: 3, column: 17, offset: 77 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 17, offset: 77 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 17, offset: 77 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'muxSwitchAsync',
    synopsis: 'Iterable|GeneratorFunction -> SyncSequence\n' +
      'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
      'SyncSequence|AsyncSequence -> Sequence\n' +
      '\n' +
      '<T any>muxSwitchAsync(\n' +
      '  x Sequence<Sequence<T>|T>|T,\n' +
      ') -> AsyncIterator<T>',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'muxSwitchAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction -> SyncSequence\n' +
                  'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
                  'SyncSequence|AsyncSequence -> Sequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 39, offset: 135 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 39, offset: 135 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 5, column: 1, offset: 137 },
                  end: { line: 5, column: 8, offset: 144 }
                }
              },
              {
                type: 'text',
                value: 'muxSwitchAsync(\nx Sequence<Sequence',
                position: {
                  start: { line: 5, column: 8, offset: 144 },
                  end: { line: 6, column: 22, offset: 181 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 6, column: 22, offset: 181 },
                  end: { line: 6, column: 25, offset: 184 }
                }
              },
              {
                type: 'text',
                value: '|T>|T,\n) -> AsyncIterator',
                position: {
                  start: { line: 6, column: 25, offset: 184 },
                  end: { line: 7, column: 19, offset: 209 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 7, column: 19, offset: 209 },
                  end: { line: 7, column: 22, offset: 212 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 137 },
              end: { line: 7, column: 22, offset: 212 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 22, offset: 212 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'Mux.switch',
    synopsis: 'Iterable|GeneratorFunction -> SyncSequence\n' +
      'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
      'SyncSequence|AsyncSequence -> Sequence\n' +
      '\n' +
      '<T any>Mux.switch(\n' +
      '  x SyncSequence<SyncSequence<T>|T>|T,\n' +
      ') -> Iterator<T>\n' +
      '\n' +
      '<T any>Mux.switch(\n' +
      '  x Sequence<Sequence<T>|T>|T,\n' +
      ') -> AsyncIterator<T>',
    catchphrase: 'Interleave Sequences into one',
    description: 'Mux.switch takes a Sequence of elements or Sequences of elements and outputs either an Iterator or an AsyncIterator that yields each element individually. The first of these elements is the first element of the first Sequence, the next is the first element of the second Sequence, and so on until all Sequences have yielded their first element. Then, the first Sequence yields its second element, the second Sequence yields its second element, and so on until all Sequences have finished iterating. Non-Sequence Elements in the top-level Sequence are yielded as they are. When a shorter Sequence finishes iterating, the remaining Sequences will switch yielding amongst themselves.',
    example: 'const iter = Mux.switch([\n' +
      '  [1, 1, 1],\n' +
      '  [2, 2, 2],\n' +
      '  [3, 3, 3],\n' +
      '])\n' +
      'for (const number of iter) {\n' +
      '  console.log(number) // 1 2 3 1 2 3 1 2 3\n' +
      '}',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.switch',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction -> SyncSequence\n' +
                  'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
                  'SyncSequence|AsyncSequence -> Sequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 39, offset: 135 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 39, offset: 135 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 5, column: 1, offset: 137 },
                  end: { line: 5, column: 8, offset: 144 }
                }
              },
              {
                type: 'text',
                value: 'Mux.switch(\nx SyncSequence<SyncSequence',
                position: {
                  start: { line: 5, column: 8, offset: 144 },
                  end: { line: 6, column: 30, offset: 185 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 6, column: 30, offset: 185 },
                  end: { line: 6, column: 33, offset: 188 }
                }
              },
              {
                type: 'text',
                value: '|T>|T,\n) -> Iterator',
                position: {
                  start: { line: 6, column: 33, offset: 188 },
                  end: { line: 7, column: 14, offset: 208 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 7, column: 14, offset: 208 },
                  end: { line: 7, column: 17, offset: 211 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 137 },
              end: { line: 7, column: 17, offset: 211 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 9, column: 1, offset: 213 },
                  end: { line: 9, column: 8, offset: 220 }
                }
              },
              {
                type: 'text',
                value: 'Mux.switch(\nx Sequence<Sequence',
                position: {
                  start: { line: 9, column: 8, offset: 220 },
                  end: { line: 10, column: 22, offset: 253 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 10, column: 22, offset: 253 },
                  end: { line: 10, column: 25, offset: 256 }
                }
              },
              {
                type: 'text',
                value: '|T>|T,\n) -> AsyncIterator',
                position: {
                  start: { line: 10, column: 25, offset: 256 },
                  end: { line: 11, column: 19, offset: 281 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 11, column: 19, offset: 281 },
                  end: { line: 11, column: 22, offset: 284 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 213 },
              end: { line: 11, column: 22, offset: 284 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 22, offset: 284 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Interleave Sequences into one',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 30, offset: 29 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 30, offset: 29 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.switch takes a Sequence of elements or Sequences of elements and outputs either an Iterator or an AsyncIterator that yields each element individually. The first of these elements is the first element of the first Sequence, the next is the first element of the second Sequence, and so on until all Sequences have yielded their first element. Then, the first Sequence yields its second element, the second Sequence yields its second element, and so on until all Sequences have finished iterating. Non-Sequence Elements in the top-level Sequence are yielded as they are. When a shorter Sequence finishes iterating, the remaining Sequences will switch yielding amongst themselves.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 681, offset: 680 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 681, offset: 680 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 681, offset: 680 }
        }
      },
      example: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'const iter = Mux.switch([\n' +
                  '[1, 1, 1],\n' +
                  '[2, 2, 2],\n' +
                  '[3, 3, 3],\n' +
                  '])\n' +
                  'for (const number of iter) {\n' +
                  'console.log(number) // 1 2 3 1 2 3 1 2 3\n' +
                  '}',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 8, column: 2, offset: 141 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 2, offset: 141 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 2, offset: 141 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'muxRaceAsync',
    synopsis: '<T any>muxRaceAsync(x Sequence<Sequence<T>|T>|T) -> AsyncIterator<T>',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'muxRaceAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              },
              {
                type: 'text',
                value: 'muxRaceAsync(x Sequence<Sequence',
                position: {
                  start: { line: 1, column: 8, offset: 7 },
                  end: { line: 1, column: 40, offset: 39 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 40, offset: 39 },
                  end: { line: 1, column: 43, offset: 42 }
                }
              },
              {
                type: 'text',
                value: '|T>|T) -> AsyncIterator',
                position: {
                  start: { line: 1, column: 43, offset: 42 },
                  end: { line: 1, column: 66, offset: 65 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 66, offset: 65 },
                  end: { line: 1, column: 69, offset: 68 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 69, offset: 68 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 69, offset: 68 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'Mux.race',
    synopsis: 'Iterable|GeneratorFunction -> SyncSequence\n' +
      'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
      'SyncSequence|AsyncSequence -> Sequence\n' +
      '\n' +
      '<T any>Mux.race(\n' +
      '  x SyncSequence<SyncSequence<T>|T>T,\n' +
      ') -> Iterator<T>\n' +
      '\n' +
      '<T any>Mux.race(\n' +
      '  x Sequence<Sequence<T>|T>T,\n' +
      ') -> AsyncIterator<T>',
    catchphrase: 'Asynchronously Race Sequences into one',
    description: 'Mux.race takes a Sequence of elements or Sequences of elements and outputs either an Iterator or an AsyncIterator that yields each element individually. The first of these elements are the synchronous elements of the top level Sequence, followed by the asynchronous elements of any asynchronous sub Sequences. If any sub Sequences are asynchronous, the order of these asynchronous elements in the final returned AsyncIterator is determined by the serial asynchronous resolution of the individual asynchronous sub Sequences. If all Sequences are synchronous, Mux.race behaves just as Mux.concat.',
    example: 'const f = async function*() { await delay(5); yield 10; yield 20 }\n' +
      'const g = async function*() { yield 1; yield 2; yield 3; await delay(10); yield 30 }\n' +
      '\n' +
      'const iter = Mux.race([f, g])\n' +
      '\n' +
      'for await (const number of iter) {\n' +
      '  console.log(number) // 1 2 3 10 20 30\n' +
      '}',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.race',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Iterable|GeneratorFunction -> SyncSequence\n' +
                  'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
                  'SyncSequence|AsyncSequence -> Sequence',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 39, offset: 135 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 39, offset: 135 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 5, column: 1, offset: 137 },
                  end: { line: 5, column: 8, offset: 144 }
                }
              },
              {
                type: 'text',
                value: 'Mux.race(\nx SyncSequence<SyncSequence',
                position: {
                  start: { line: 5, column: 8, offset: 144 },
                  end: { line: 6, column: 30, offset: 183 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 6, column: 30, offset: 183 },
                  end: { line: 6, column: 33, offset: 186 }
                }
              },
              {
                type: 'text',
                value: '|T>T,\n) -> Iterator',
                position: {
                  start: { line: 6, column: 33, offset: 186 },
                  end: { line: 7, column: 14, offset: 205 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 7, column: 14, offset: 205 },
                  end: { line: 7, column: 17, offset: 208 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 137 },
              end: { line: 7, column: 17, offset: 208 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 9, column: 1, offset: 210 },
                  end: { line: 9, column: 8, offset: 217 }
                }
              },
              {
                type: 'text',
                value: 'Mux.race(\nx Sequence<Sequence',
                position: {
                  start: { line: 9, column: 8, offset: 217 },
                  end: { line: 10, column: 22, offset: 248 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 10, column: 22, offset: 248 },
                  end: { line: 10, column: 25, offset: 251 }
                }
              },
              {
                type: 'text',
                value: '|T>T,\n) -> AsyncIterator',
                position: {
                  start: { line: 10, column: 25, offset: 251 },
                  end: { line: 11, column: 19, offset: 275 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 11, column: 19, offset: 275 },
                  end: { line: 11, column: 22, offset: 278 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 210 },
              end: { line: 11, column: 22, offset: 278 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 22, offset: 278 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Asynchronously Race Sequences into one',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 39, offset: 38 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 39, offset: 38 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 39, offset: 38 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.race takes a Sequence of elements or Sequences of elements and outputs either an Iterator or an AsyncIterator that yields each element individually. The first of these elements are the synchronous elements of the top level Sequence, followed by the asynchronous elements of any asynchronous sub Sequences. If any sub Sequences are asynchronous, the order of these asynchronous elements in the final returned AsyncIterator is determined by the serial asynchronous resolution of the individual asynchronous sub Sequences. If all Sequences are synchronous, Mux.race behaves just as Mux.concat.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 595, offset: 594 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 595, offset: 594 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 595, offset: 594 }
        }
      },
      example: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'const f = async function*() { await delay(5); yield 10; yield 20 }\n' +
                  'const g = async function*() { yield 1; yield 2; yield 3; await delay(10); yield 30 }',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 85, offset: 151 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 85, offset: 151 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'const iter = Mux.race([f, g])',
                position: {
                  start: { line: 4, column: 1, offset: 153 },
                  end: { line: 4, column: 30, offset: 182 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 1, offset: 153 },
              end: { line: 4, column: 30, offset: 182 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'for await (const number of iter) {\n' +
                  'console.log(number) // 1 2 3 10 20 30\n' +
                  '}',
                position: {
                  start: { line: 6, column: 1, offset: 184 },
                  end: { line: 8, column: 2, offset: 260 }
                }
              }
            ],
            position: {
              start: { line: 6, column: 1, offset: 184 },
              end: { line: 8, column: 2, offset: 260 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 2, offset: 260 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'arrayPushArray',
    synopsis: 'arrayPushArray(x Array, array Array) -> undefined',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayPushArray',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayPushArray(x Array, array Array) -> undefined',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 50, offset: 49 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 50, offset: 49 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 50, offset: 49 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'arrayPushIterable',
    synopsis: 'arrayPushIterable(x Array, array Array) -> undefined',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayPushIterable',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayPushIterable(x Array, array Array) -> undefined',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 53, offset: 52 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 53, offset: 52 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 53, offset: 52 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'arrayFlatten',
    synopsis: '<T any>arrayFlatten(Array<Array<T>|T>) -> Array<T>',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayFlatten',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              },
              {
                type: 'text',
                value: 'arrayFlatten(Array<Array',
                position: {
                  start: { line: 1, column: 8, offset: 7 },
                  end: { line: 1, column: 32, offset: 31 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 32, offset: 31 },
                  end: { line: 1, column: 35, offset: 34 }
                }
              },
              {
                type: 'text',
                value: '|T>) -> Array',
                position: {
                  start: { line: 1, column: 35, offset: 34 },
                  end: { line: 1, column: 48, offset: 47 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 48, offset: 47 },
                  end: { line: 1, column: 51, offset: 50 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 51, offset: 50 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 51, offset: 50 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: [ 'Mux.flatten', 'Mux.flatten' ],
    synopsis: [
      '<T any>Mux.flatten(x Array<Iterable<T>|T>) -> Array<T>\n' +
        '\n' +
        '<T any>Mux.flatten(x Set<Iterable<T>|T>) -> Set<T>\n' +
        '\n' +
        '<T !Array|!Set>Mux.flatten(x T) -> Mux.concat(x)',
      'Iterable|GeneratorFunction -> SyncSequence\n' +
        'AsyncIterable|AsyncGeneratorFunction -> AsyncSequence\n' +
        'SyncSequence|AsyncSequence -> Sequence\n' +
        '\n' +
        '<T any>Mux.race(\n' +
        '  x SyncSequence<SyncSequence<T>|T>,\n' +
        ') -> Iterator<T>\n' +
        '\n' +
        '<T any>Mux.race(\n' +
        '  x Sequence<Sequence<T>|T>,\n' +
        ') -> AsyncIterator<T>'
    ],
    catchphrase: 'Asynchronously Race Sequences into one',
    description: 'Mux.flatten behaves just as Mux.concat except for cases when passed an Array or Set. When passed an Array, Mux.flatten outputs another Array with all elements of the input Array concatenated. When passed a Set, Mux.flatten outputs another Set in the same regard.',
    example: 'console.log(\n  Mux.flatten([[1], 2, [3], 4, [5]]),\n) // [1, 2, 3, 4, 5]',
    mdast: {
      name: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      },
      synopsis: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Asynchronously Race Sequences into one',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 39, offset: 38 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 39, offset: 38 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 39, offset: 38 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Mux.flatten behaves just as Mux.concat except for cases when passed an Array or Set. When passed an Array, Mux.flatten outputs another Array with all elements of the input Array concatenated. When passed a Set, Mux.flatten outputs another Set in the same regard.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 263, offset: 262 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 263, offset: 262 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 263, offset: 262 }
        }
      },
      example: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'console.log(\n' +
                  'Mux.flatten([[1], 2, [3], 4, [5]]),\n' +
                  ') // [1, 2, 3, 4, 5]',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 21, offset: 71 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 21, offset: 71 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 21, offset: 71 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Mux.js'
  },
  {
    name: 'PossiblePromise.then',
    benchmark: 'square(3): 1e+7: 13.162ms\n' +
      'square_PossiblePromiseThen(3): 1e+7: 15.374ms\n' +
      '\n' +
      'square_promiseThen: 1e+5: 27.686ms\n' +
      'square_PossiblePromiseThen(p5): 1e+5: 28.596ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'PossiblePromise.then',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'square(3): 1e+7: 13.162ms\n' +
                  'square_PossiblePromiseThen(3): 1e+7: 15.374ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 46, offset: 71 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 46, offset: 71 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'square_promiseThen: 1e+5: 27.686ms\n' +
                  'square_PossiblePromiseThen(p5): 1e+5: 28.596ms',
                position: {
                  start: { line: 4, column: 1, offset: 73 },
                  end: { line: 5, column: 47, offset: 154 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 1, offset: 73 },
              end: { line: 5, column: 47, offset: 154 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 47, offset: 154 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/PossiblePromise.benchmark.js'
  },
  {
    name: 'PossiblePromise.all',
    benchmark: 'promiseAll([resolvedPromise]): 1e+5: 150.068ms\n' +
      'possiblePromiseAll([resolvedPromise]): 1e+5: 154.41ms\n' +
      '\n' +
      'sum([1, 2, 3]): 1e+6: 11.096ms\n' +
      'possiblePromiseAll([1, 2, 3]).then([sum]): 1e+6: 17.291ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'PossiblePromise.all',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'promiseAll([resolvedPromise]): 1e+5: 150.068ms\n' +
                  'possiblePromiseAll([resolvedPromise]): 1e+5: 154.41ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 54, offset: 100 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 54, offset: 100 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'sum([1, 2, 3]): 1e+6: 11.096ms\n' +
                  'possiblePromiseAll([1, 2, 3]).then([sum]): 1e+6: 17.291ms',
                position: {
                  start: { line: 4, column: 1, offset: 102 },
                  end: { line: 5, column: 58, offset: 190 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 1, offset: 102 },
              end: { line: 5, column: 58, offset: 190 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 58, offset: 190 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/PossiblePromise.benchmark.js'
  },
  {
    name: 'PossiblePromise.args',
    benchmark: 'add(1, 2): 1e+6: 4.012ms\n' +
      'PossiblePromise.argsSome(add)(1, 2): 1e+6: 11.062ms\n' +
      'PossiblePromise.argsSomeApply(add)(1, 2): 1e+6: 11.33ms\n' +
      'PossiblePromise.argumentsLoop(add)(1, 2): 1e+6: 17.076ms\n' +
      'PossiblePromise.argsLoop(add)(1, 2): 1e+6: 47.844ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'PossiblePromise.args',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'add(1, 2): 1e+6: 4.012ms\n' +
                  'PossiblePromise.argsSome(add)(1, 2): 1e+6: 11.062ms\n' +
                  'PossiblePromise.argsSomeApply(add)(1, 2): 1e+6: 11.33ms\n' +
                  'PossiblePromise.argumentsLoop(add)(1, 2): 1e+6: 17.076ms\n' +
                  'PossiblePromise.argsLoop(add)(1, 2): 1e+6: 47.844ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 5, column: 52, offset: 241 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 52, offset: 241 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 52, offset: 241 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/PossiblePromise.benchmark.js'
  },
  {
    name: 'PossiblePromise',
    synopsis: 'new PossiblePromise(value Promise|any) -> PossiblePromise',
    catchphrase: 'Possibly a Promise',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'PossiblePromise',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new PossiblePromise(value Promise|any) -> PossiblePromise',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 58, offset: 57 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 58, offset: 57 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 58, offset: 57 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Possibly a Promise',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/PossiblePromise.js'
  },
  {
    name: 'PossiblePromise.prototype.then',
    synopsis: 'new PossiblePromise(value Promise|any).then(func function) -> Promise|any',
    catchphrase: '.then if internal Promise, else call',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'PossiblePromise.prototype.then',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 31, offset: 30 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 31, offset: 30 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 31, offset: 30 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new PossiblePromise(value Promise|any).then(func function) -> Promise|any',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 74, offset: 73 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 74, offset: 73 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 74, offset: 73 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '.then if internal Promise, else call',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 37, offset: 36 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 37, offset: 36 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 37, offset: 36 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/PossiblePromise.js'
  },
  {
    name: 'PossiblePromise.then',
    synopsis: 'PossiblePromise.then(value Promise|any, func function) -> Promise|any',
    catchphrase: '.then if passed a Promise, else call',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'PossiblePromise.then',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'PossiblePromise.then(value Promise|any, func function) -> Promise|any',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 70, offset: 69 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 70, offset: 69 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 70, offset: 69 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '.then if passed a Promise, else call',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 37, offset: 36 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 37, offset: 36 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 37, offset: 36 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/PossiblePromise.js'
  },
  {
    name: 'PossiblePromise.catch',
    synopsis: 'PossiblePromise.catch(\n' +
      '  value Promise|any,\n' +
      '  func any=>Promise|any,\n' +
      ') -> Promise|any',
    catchphrase: '.catch if passed a Promise, else noop',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'PossiblePromise.catch',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 22, offset: 21 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 22, offset: 21 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 22, offset: 21 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'PossiblePromise.catch(\n' +
                  'value Promise|any,\n' +
                  'func any=>Promise|any,\n' +
                  ') -> Promise|any',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 4, column: 17, offset: 85 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 17, offset: 85 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 17, offset: 85 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '.catch if passed a Promise, else noop',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 38, offset: 37 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 38, offset: 37 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 38, offset: 37 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/PossiblePromise.js'
  },
  {
    name: 'SyncThenable',
    synopsis: 'new SyncThenable(value any) -> SyncThenable',
    catchphrase: 'A synchronous Promise-like structure',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'SyncThenable',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new SyncThenable(value any) -> SyncThenable',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 44, offset: 43 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 44, offset: 43 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 44, offset: 43 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'A synchronous Promise-like structure',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 37, offset: 36 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 37, offset: 36 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 37, offset: 36 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/PossiblePromise.js'
  },
  {
    name: 'SyncThenable.prototype.then',
    synopsis: 'new SyncThenable(value any).then(func function) -> any',
    catchphrase: '.then as a function call',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'SyncThenable.prototype.then',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 28, offset: 27 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 28, offset: 27 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new SyncThenable(value any).then(func function) -> any',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 55, offset: 54 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 55, offset: 54 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 55, offset: 54 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '.then as a function call',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/PossiblePromise.js'
  },
  {
    name: 'PossiblePromise.all',
    synopsis: 'PossiblePromise.all(\n' +
      '  values Array<Promise>|Array,\n' +
      ') -> Promise<Array>|PossiblePromise<Array>',
    catchphrase: 'Always returns a thenable of an Array',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'PossiblePromise.all',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'PossiblePromise.all(\nvalues Array',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 15, offset: 35 }
                }
              },
              {
                type: 'html',
                value: '<Promise>',
                position: {
                  start: { line: 2, column: 15, offset: 35 },
                  end: { line: 2, column: 24, offset: 44 }
                }
              },
              {
                type: 'text',
                value: '|Array,\n) -> Promise',
                position: {
                  start: { line: 2, column: 24, offset: 44 },
                  end: { line: 3, column: 13, offset: 64 }
                }
              },
              {
                type: 'html',
                value: '<Array>',
                position: {
                  start: { line: 3, column: 13, offset: 64 },
                  end: { line: 3, column: 20, offset: 71 }
                }
              },
              {
                type: 'text',
                value: '|PossiblePromise',
                position: {
                  start: { line: 3, column: 20, offset: 71 },
                  end: { line: 3, column: 36, offset: 87 }
                }
              },
              {
                type: 'html',
                value: '<Array>',
                position: {
                  start: { line: 3, column: 36, offset: 87 },
                  end: { line: 3, column: 43, offset: 94 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 43, offset: 94 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 43, offset: 94 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Always returns a thenable of an Array',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 38, offset: 37 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 38, offset: 37 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 38, offset: 37 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/PossiblePromise.js'
  },
  {
    name: 'PossiblePromise.args',
    synopsis: 'PossiblePromise.args(func function)(args ...any) -> Promise|any',
    catchphrase: 'Resolves any Promises supplied as arguments to a function',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'PossiblePromise.args',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'PossiblePromise.args(func function)(args ...any) -> Promise|any',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 64, offset: 63 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 64, offset: 63 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 64, offset: 63 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Resolves any Promises supplied as arguments to a function',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 58, offset: 57 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 58, offset: 57 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 58, offset: 57 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/PossiblePromise.js'
  },
  {
    name: 'Struct.get',
    benchmark: 'structGet(arr, 0): 1e+7: 13.472ms\n' +
      'structGetTernary(arr, 0): 1e+7: 13.414ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.get',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'structGet(arr, 0): 1e+7: 13.472ms\n' +
                  'structGetTernary(arr, 0): 1e+7: 13.414ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 41, offset: 74 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 41, offset: 74 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 2, column: 41, offset: 74 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.benchmark.js'
  },
  {
    name: 'Struct.set',
    benchmark: 'arr[5] = 6: 1e+7: 12.785ms\n' +
      'structSet(arr, 6, 5): 1e+7: 13.989ms\n' +
      '\n' +
      "obj['f'] = 6: 1e+7: 12.857ms\n" +
      "structSet(obj, 6, 'f'): 1e+7: 14.154ms\n" +
      '\n' +
      'set.add(6): 1e+7: 95.934ms\n' +
      'structSet(set, 6): 1e+7: 97.659ms\n' +
      '\n' +
      "map.set('f', 6): 1e+7: 138.455ms\n" +
      "structSet(map, 6, 'f'): 1e+7: 139.162ms",
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.set',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arr[5] = 6: 1e+7: 12.785ms\n' +
                  'structSet(arr, 6, 5): 1e+7: 13.989ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 37, offset: 63 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 37, offset: 63 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "obj['f'] = 6: 1e+7: 12.857ms\n" +
                  "structSet(obj, 6, 'f'): 1e+7: 14.154ms",
                position: {
                  start: { line: 4, column: 1, offset: 65 },
                  end: { line: 5, column: 39, offset: 132 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 1, offset: 65 },
              end: { line: 5, column: 39, offset: 132 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'set.add(6): 1e+7: 95.934ms\nstructSet(set, 6): 1e+7: 97.659ms',
                position: {
                  start: { line: 7, column: 1, offset: 134 },
                  end: { line: 8, column: 34, offset: 194 }
                }
              }
            ],
            position: {
              start: { line: 7, column: 1, offset: 134 },
              end: { line: 8, column: 34, offset: 194 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "map.set('f', 6): 1e+7: 138.455ms\n" +
                  "structSet(map, 6, 'f'): 1e+7: 139.162ms",
                position: {
                  start: { line: 10, column: 1, offset: 196 },
                  end: { line: 11, column: 40, offset: 268 }
                }
              }
            ],
            position: {
              start: { line: 10, column: 1, offset: 196 },
              end: { line: 11, column: 40, offset: 268 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 40, offset: 268 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.benchmark.js'
  },
  {
    name: 'Struct.size',
    benchmark: 'structSize(arr): 1e+7: 14.043ms\n' +
      '_.size(arr): 1e+7: 583.972ms\n' +
      '\n' +
      'structSize(obj): 1e+7: 117.314ms\n' +
      'structSizeObjectKeys(obj): 1e+7: 213.629ms\n' +
      '_.size(obj): 1e+7: 664.905ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.size',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'structSize(arr): 1e+7: 14.043ms\n_.size(arr): 1e+7: 583.972ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 29, offset: 60 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 29, offset: 60 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'structSize(obj): 1e+7: 117.314ms\n' +
                  'structSizeObjectKeys(obj): 1e+7: 213.629ms\n' +
                  '_.size(obj): 1e+7: 664.905ms',
                position: {
                  start: { line: 4, column: 1, offset: 62 },
                  end: { line: 6, column: 29, offset: 166 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 1, offset: 62 },
              end: { line: 6, column: 29, offset: 166 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 29, offset: 166 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.benchmark.js'
  },
  {
    name: 'Struct.copy',
    benchmark: 'arr.slice(): 1e+6: 18.674ms\n' +
      'Array.from(arr): 1e+6: 28.472ms\n' +
      '[...arr]: 1e+6: 24.933ms\n' +
      'Struct.copy(arr): 1e+6: 19.488ms\n' +
      '\n' +
      '({ ...obj }): 1e+6: 40.274ms\n' +
      'Object.assign({}, obj): 1e+6: 164.081ms\n' +
      'Struct.copy(obj): 1e+6: 46.345ms\n' +
      '\n' +
      'new Set(set): 1e+6: 812.338ms\n' +
      'Struct.copy(set): 1e+6: 569.508ms\n' +
      '\n' +
      'new Map(map): 1e+6: 303.057ms\n' +
      'Struct.copy(map): 1e+6: 186.628ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.copy',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arr.slice(): 1e+6: 18.674ms\n' +
                  'Array.from(arr): 1e+6: 28.472ms\n' +
                  '[...arr]: 1e+6: 24.933ms\n' +
                  'Struct.copy(arr): 1e+6: 19.488ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 4, column: 33, offset: 117 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 33, offset: 117 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '({ ...obj }): 1e+6: 40.274ms\n' +
                  'Object.assign({}, obj): 1e+6: 164.081ms\n' +
                  'Struct.copy(obj): 1e+6: 46.345ms',
                position: {
                  start: { line: 6, column: 1, offset: 119 },
                  end: { line: 8, column: 33, offset: 220 }
                }
              }
            ],
            position: {
              start: { line: 6, column: 1, offset: 119 },
              end: { line: 8, column: 33, offset: 220 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Set(set): 1e+6: 812.338ms\n' +
                  'Struct.copy(set): 1e+6: 569.508ms',
                position: {
                  start: { line: 10, column: 1, offset: 222 },
                  end: { line: 11, column: 34, offset: 285 }
                }
              }
            ],
            position: {
              start: { line: 10, column: 1, offset: 222 },
              end: { line: 11, column: 34, offset: 285 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Map(map): 1e+6: 303.057ms\n' +
                  'Struct.copy(map): 1e+6: 186.628ms',
                position: {
                  start: { line: 13, column: 1, offset: 287 },
                  end: { line: 14, column: 34, offset: 350 }
                }
              }
            ],
            position: {
              start: { line: 13, column: 1, offset: 287 },
              end: { line: 14, column: 34, offset: 350 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 14, column: 34, offset: 350 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.benchmark.js'
  },
  {
    synopsis: 'isStruct(x any) -> boolean',
    mdast: {
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isStruct(x any) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 27, offset: 26 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 27, offset: 26 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 27, offset: 26 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    name: 'Struct',
    synopsis: 'new Struct(x Array|Object|Set|Map) -> Struct',
    catchphrase: 'Finite data structure',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'new Struct(x Array|Object|Set|Map) -> Struct',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 45, offset: 44 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 45, offset: 44 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 45, offset: 44 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Finite data structure',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 22, offset: 21 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 22, offset: 21 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 22, offset: 21 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    name: 'Struct.isStruct',
    synopsis: 'Struct.isStruct(x any) -> boolean',
    catchphrase: 'Tell if struct',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.isStruct',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.isStruct(x any) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 34, offset: 33 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 34, offset: 33 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 34, offset: 33 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Tell if struct',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    synopsis: '<T>objectEntriesGenerator(x Object<T>) -> Iterator<[key string, T]>',
    mdast: {
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              },
              {
                type: 'text',
                value: 'objectEntriesGenerator(x Object',
                position: {
                  start: { line: 1, column: 4, offset: 3 },
                  end: { line: 1, column: 35, offset: 34 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 35, offset: 34 },
                  end: { line: 1, column: 38, offset: 37 }
                }
              },
              {
                type: 'text',
                value: ') -> Iterator<[key string, T]>',
                position: {
                  start: { line: 1, column: 38, offset: 37 },
                  end: { line: 1, column: 68, offset: 67 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 68, offset: 67 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 68, offset: 67 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    name: 'Struct.entries',
    synopsis: '<T any>Struct.entries(x Array<T>) -> Iterator<[index number, T]>\n' +
      '\n' +
      '<T any>Struct.entries(x Object<T>) -> Iterator<[key string, T]>\n' +
      '\n' +
      '<T any>Struct.entries(x Set<T>) -> Iterator<[T, T]>\n' +
      '\n' +
      '<A any, B any>Struct.entries(x Map<A, B>) -> Iterator<[A, B]>',
    catchphrase: 'Get an iterator of key value pairs',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.entries',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              },
              {
                type: 'text',
                value: 'Struct.entries(x Array',
                position: {
                  start: { line: 1, column: 8, offset: 7 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 30, offset: 29 },
                  end: { line: 1, column: 33, offset: 32 }
                }
              },
              {
                type: 'text',
                value: ') -> Iterator<[index number, T]>',
                position: {
                  start: { line: 1, column: 33, offset: 32 },
                  end: { line: 1, column: 65, offset: 64 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 65, offset: 64 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 3, column: 1, offset: 66 },
                  end: { line: 3, column: 8, offset: 73 }
                }
              },
              {
                type: 'text',
                value: 'Struct.entries(x Object',
                position: {
                  start: { line: 3, column: 8, offset: 73 },
                  end: { line: 3, column: 31, offset: 96 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 3, column: 31, offset: 96 },
                  end: { line: 3, column: 34, offset: 99 }
                }
              },
              {
                type: 'text',
                value: ') -> Iterator<[key string, T]>',
                position: {
                  start: { line: 3, column: 34, offset: 99 },
                  end: { line: 3, column: 64, offset: 129 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 66 },
              end: { line: 3, column: 64, offset: 129 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 5, column: 1, offset: 131 },
                  end: { line: 5, column: 8, offset: 138 }
                }
              },
              {
                type: 'text',
                value: 'Struct.entries(x Set',
                position: {
                  start: { line: 5, column: 8, offset: 138 },
                  end: { line: 5, column: 28, offset: 158 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 5, column: 28, offset: 158 },
                  end: { line: 5, column: 31, offset: 161 }
                }
              },
              {
                type: 'text',
                value: ') -> Iterator<[T, T]>',
                position: {
                  start: { line: 5, column: 31, offset: 161 },
                  end: { line: 5, column: 52, offset: 182 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 131 },
              end: { line: 5, column: 52, offset: 182 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '<A any, B any>Struct.entries(x Map<A, B>) -> Iterator<[A, B]>',
                position: {
                  start: { line: 7, column: 1, offset: 184 },
                  end: { line: 7, column: 62, offset: 245 }
                }
              }
            ],
            position: {
              start: { line: 7, column: 1, offset: 184 },
              end: { line: 7, column: 62, offset: 245 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 62, offset: 245 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Get an iterator of key value pairs',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 35, offset: 34 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 35, offset: 34 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 35, offset: 34 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    synopsis: '<T>objectValuesGenerator(x Object<T>) -> Iterator<T>',
    mdast: {
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              },
              {
                type: 'text',
                value: 'objectValuesGenerator(x Object',
                position: {
                  start: { line: 1, column: 4, offset: 3 },
                  end: { line: 1, column: 34, offset: 33 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 34, offset: 33 },
                  end: { line: 1, column: 37, offset: 36 }
                }
              },
              {
                type: 'text',
                value: ') -> Iterator',
                position: {
                  start: { line: 1, column: 37, offset: 36 },
                  end: { line: 1, column: 50, offset: 49 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 50, offset: 49 },
                  end: { line: 1, column: 53, offset: 52 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 53, offset: 52 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 53, offset: 52 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    name: 'Struct.values',
    synopsis: '<T any>Struct.values(\n' +
      '  x Array<T>|Object<T>|Set<T>|Map<any, T>\n' +
      ') -> Iterator<T>',
    catchphrase: 'Get an iterator of values',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.values',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              },
              {
                type: 'text',
                value: 'Struct.values(\nx Array',
                position: {
                  start: { line: 1, column: 8, offset: 7 },
                  end: { line: 2, column: 10, offset: 31 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 2, column: 10, offset: 31 },
                  end: { line: 2, column: 13, offset: 34 }
                }
              },
              {
                type: 'text',
                value: '|Object',
                position: {
                  start: { line: 2, column: 13, offset: 34 },
                  end: { line: 2, column: 20, offset: 41 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 2, column: 20, offset: 41 },
                  end: { line: 2, column: 23, offset: 44 }
                }
              },
              {
                type: 'text',
                value: '|Set',
                position: {
                  start: { line: 2, column: 23, offset: 44 },
                  end: { line: 2, column: 27, offset: 48 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 2, column: 27, offset: 48 },
                  end: { line: 2, column: 30, offset: 51 }
                }
              },
              {
                type: 'text',
                value: '|Map<any, T>\n) -> Iterator',
                position: {
                  start: { line: 2, column: 30, offset: 51 },
                  end: { line: 3, column: 14, offset: 77 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 3, column: 14, offset: 77 },
                  end: { line: 3, column: 17, offset: 80 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 17, offset: 80 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 17, offset: 80 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Get an iterator of values',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 26, offset: 25 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 26, offset: 25 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 26, offset: 25 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    name: 'Struct.get',
    synopsis: '<T any>Struct.get(x Array<T>, index number) -> T|undefined\n' +
      '\n' +
      '<T any>Struct.get(x Object<T>, index string) -> T|undefined\n' +
      '\n' +
      '<T any>Struct.get(x Set<T>, index T) -> T|undefined\n' +
      '\n' +
      '<A any, B any>Struct.get(x Map<A, B>, index A) -> B|undefined',
    catchphrase: 'Get an element by index',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.get',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              },
              {
                type: 'text',
                value: 'Struct.get(x Array',
                position: {
                  start: { line: 1, column: 8, offset: 7 },
                  end: { line: 1, column: 26, offset: 25 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 1, column: 26, offset: 25 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              },
              {
                type: 'text',
                value: ', index number) -> T|undefined',
                position: {
                  start: { line: 1, column: 29, offset: 28 },
                  end: { line: 1, column: 59, offset: 58 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 59, offset: 58 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 3, column: 1, offset: 60 },
                  end: { line: 3, column: 8, offset: 67 }
                }
              },
              {
                type: 'text',
                value: 'Struct.get(x Object',
                position: {
                  start: { line: 3, column: 8, offset: 67 },
                  end: { line: 3, column: 27, offset: 86 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 3, column: 27, offset: 86 },
                  end: { line: 3, column: 30, offset: 89 }
                }
              },
              {
                type: 'text',
                value: ', index string) -> T|undefined',
                position: {
                  start: { line: 3, column: 30, offset: 89 },
                  end: { line: 3, column: 60, offset: 119 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 60 },
              end: { line: 3, column: 60, offset: 119 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'html',
                value: '<T any>',
                position: {
                  start: { line: 5, column: 1, offset: 121 },
                  end: { line: 5, column: 8, offset: 128 }
                }
              },
              {
                type: 'text',
                value: 'Struct.get(x Set',
                position: {
                  start: { line: 5, column: 8, offset: 128 },
                  end: { line: 5, column: 24, offset: 144 }
                }
              },
              {
                type: 'html',
                value: '<T>',
                position: {
                  start: { line: 5, column: 24, offset: 144 },
                  end: { line: 5, column: 27, offset: 147 }
                }
              },
              {
                type: 'text',
                value: ', index T) -> T|undefined',
                position: {
                  start: { line: 5, column: 27, offset: 147 },
                  end: { line: 5, column: 52, offset: 172 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 121 },
              end: { line: 5, column: 52, offset: 172 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '<A any, B any>Struct.get(x Map<A, B>, index A) -> B|undefined',
                position: {
                  start: { line: 7, column: 1, offset: 174 },
                  end: { line: 7, column: 62, offset: 235 }
                }
              }
            ],
            position: {
              start: { line: 7, column: 1, offset: 174 },
              end: { line: 7, column: 62, offset: 235 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 62, offset: 235 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Get an element by index',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 24, offset: 23 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    name: 'Struct.set',
    synopsis: 'Struct.set(x Array, value any, index number) -> mutated Array\n' +
      '\n' +
      'Struct.set(x Object, value any, index string) -> mutated Object\n' +
      '\n' +
      'Struct.set(x Set, value any) -> mutated Set\n' +
      '\n' +
      'Struct.set(x Map, value any, index any) -> mutated Map',
    catchphrase: 'Set a value',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.set',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.set(x Array, value any, index number) -> mutated Array',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 62, offset: 61 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 62, offset: 61 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.set(x Object, value any, index string) -> mutated Object',
                position: {
                  start: { line: 3, column: 1, offset: 63 },
                  end: { line: 3, column: 64, offset: 126 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 63 },
              end: { line: 3, column: 64, offset: 126 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.set(x Set, value any) -> mutated Set',
                position: {
                  start: { line: 5, column: 1, offset: 128 },
                  end: { line: 5, column: 44, offset: 171 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 128 },
              end: { line: 5, column: 44, offset: 171 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.set(x Map, value any, index any) -> mutated Map',
                position: {
                  start: { line: 7, column: 1, offset: 173 },
                  end: { line: 7, column: 55, offset: 227 }
                }
              }
            ],
            position: {
              start: { line: 7, column: 1, offset: 173 },
              end: { line: 7, column: 55, offset: 227 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 55, offset: 227 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Set a value',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    synopsis: 'objectKeysCount(obj object) -> ct number',
    mdast: {
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectKeysCount(obj object) -> ct number',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 41, offset: 40 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 41, offset: 40 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 41, offset: 40 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    name: 'Struct.size',
    synopsis: 'Struct.size(x Array|Object|Set|Map) -> number',
    catchphrase: 'Count values',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.size',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.size(x Array|Object|Set|Map) -> number',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 46, offset: 45 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 46, offset: 45 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 46, offset: 45 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Count values',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    synopsis: 'copySet(x Set) -> y Set',
    mdast: {
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'copySet(x Set) -> y Set',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 24, offset: 23 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    synopsis: 'copyMap(x Map) -> y Map',
    mdast: {
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'copyMap(x Map) -> y Map',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 24, offset: 23 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 24, offset: 23 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    name: 'Struct.copy',
    synopsis: 'Struct.copy(x Array) -> copied Array\n' +
      '\n' +
      'Struct.copy(x Object) -> copied Object\n' +
      '\n' +
      'Struct.copy(x Set) -> copied Set\n' +
      '\n' +
      'Struct.copy(x Map) -> copied Map',
    catchphrase: 'Shallow copy a struct',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.copy',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.copy(x Array) -> copied Array',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 37, offset: 36 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 37, offset: 36 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.copy(x Object) -> copied Object',
                position: {
                  start: { line: 3, column: 1, offset: 38 },
                  end: { line: 3, column: 39, offset: 76 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 38 },
              end: { line: 3, column: 39, offset: 76 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.copy(x Set) -> copied Set',
                position: {
                  start: { line: 5, column: 1, offset: 78 },
                  end: { line: 5, column: 33, offset: 110 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 78 },
              end: { line: 5, column: 33, offset: 110 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.copy(x Map) -> copied Map',
                position: {
                  start: { line: 7, column: 1, offset: 112 },
                  end: { line: 7, column: 33, offset: 144 }
                }
              }
            ],
            position: {
              start: { line: 7, column: 1, offset: 112 },
              end: { line: 7, column: 33, offset: 144 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 33, offset: 144 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Shallow copy a struct',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 22, offset: 21 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 22, offset: 21 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 22, offset: 21 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    name: 'Struct.copyDeep',
    synopsis: 'Struct.copyDeep(x Array) -> deeplyCopied Array\n' +
      '\n' +
      'Struct.copyDeep(x Object) -> deeplyCopied Object\n' +
      '\n' +
      'Struct.copyDeep(x Set) -> deeplyCopied Set\n' +
      '\n' +
      'Struct.copyDeep(x Map) -> deeplyCopied Map',
    catchphrase: 'Deep copy a struct',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.copyDeep',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 16, offset: 15 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 16, offset: 15 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.copyDeep(x Array) -> deeplyCopied Array',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 47, offset: 46 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 47, offset: 46 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.copyDeep(x Object) -> deeplyCopied Object',
                position: {
                  start: { line: 3, column: 1, offset: 48 },
                  end: { line: 3, column: 49, offset: 96 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 48 },
              end: { line: 3, column: 49, offset: 96 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.copyDeep(x Set) -> deeplyCopied Set',
                position: {
                  start: { line: 5, column: 1, offset: 98 },
                  end: { line: 5, column: 43, offset: 140 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 98 },
              end: { line: 5, column: 43, offset: 140 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Struct.copyDeep(x Map) -> deeplyCopied Map',
                position: {
                  start: { line: 7, column: 1, offset: 142 },
                  end: { line: 7, column: 43, offset: 184 }
                }
              }
            ],
            position: {
              start: { line: 7, column: 1, offset: 142 },
              end: { line: 7, column: 43, offset: 184 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 43, offset: 184 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Deep copy a struct',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/monad/Struct.js'
  },
  {
    name: 'not',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncPredicate = (...args)=>Promise|boolean\n' +
      '\n' +
      'predicate SyncOrAsyncPredicate\n' +
      '\n' +
      'not(value Promise|boolean|any) -> negated Promise|boolean\n' +
      'not(...argsOrPromises, predicate) -> negated Promise|boolean\n' +
      'not(predicate)(...args) -> negated Promise|boolean\n' +
      '```',
    description: 'Function equivalent to the [Logical NOT (`!`)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT) operator. Negates a value.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const myObj = { a: 1 }\n' +
      '\n' +
      "console.log(not('a' in myObj)) // false\n" +
      "console.log(not('b' in myObj)) // true\n" +
      '```\n' +
      '\n' +
      'If provided a predicate function, `not` returns a logically inverted predicate that returns true everywhere the original predicate would have returned false.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const isOdd = number => number % 2 == 1\n' +
      '\n' +
      'const isNotOdd = not(isOdd)\n' +
      '\n' +
      'console.log(isNotOdd(3)) // false\n' +
      '```\n' +
      '\n' +
      '`not` negates the resolved value of a promise.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const promise = Promise.resolve(false)\n' +
      '\n' +
      'not(promise).then(console.log) // true\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const isOdd = number => number % 2 == 1\n' +
      '\n' +
      'not(Promise.resolve(3), isOdd).then(console.log) // false\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [some](/docs/some)\n' +
      ' * [and](/docs/and)\n' +
      ' * [or](/docs/or)\n' +
      ' * [eq](/docs/eq)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'not',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 4, offset: 3 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 4, offset: 3 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncPredicate = (...args)=>Promise|boolean\n' +
              '\n' +
              'predicate SyncOrAsyncPredicate\n' +
              '\n' +
              'not(value Promise|boolean|any) -> negated Promise|boolean\n' +
              'not(...argsOrPromises, predicate) -> negated Promise|boolean\n' +
              'not(predicate)(...args) -> negated Promise|boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 12, column: 4, offset: 341 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 341 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Function equivalent to the ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT',
                children: [
                  {
                    type: 'text',
                    value: 'Logical NOT (',
                    position: {
                      start: { line: 1, column: 29, offset: 28 },
                      end: { line: 1, column: 42, offset: 41 }
                    }
                  },
                  {
                    type: 'inlineCode',
                    value: '!',
                    position: {
                      start: { line: 1, column: 42, offset: 41 },
                      end: { line: 1, column: 45, offset: 44 }
                    }
                  },
                  {
                    type: 'text',
                    value: ')',
                    position: {
                      start: { line: 1, column: 45, offset: 44 },
                      end: { line: 1, column: 46, offset: 45 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 28, offset: 27 },
                  end: { line: 1, column: 136, offset: 135 }
                }
              },
              {
                type: 'text',
                value: ' operator. Negates a value.',
                position: {
                  start: { line: 1, column: 136, offset: 135 },
                  end: { line: 1, column: 163, offset: 162 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 163, offset: 162 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const myObj = { a: 1 }\n' +
              '\n' +
              "console.log(not('a' in myObj)) // false\n" +
              "console.log(not('b' in myObj)) // true",
            position: {
              start: { line: 3, column: 1, offset: 164 },
              end: { line: 8, column: 4, offset: 297 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If provided a predicate function, ',
                position: {
                  start: { line: 10, column: 1, offset: 299 },
                  end: { line: 10, column: 35, offset: 333 }
                }
              },
              {
                type: 'inlineCode',
                value: 'not',
                position: {
                  start: { line: 10, column: 35, offset: 333 },
                  end: { line: 10, column: 40, offset: 338 }
                }
              },
              {
                type: 'text',
                value: ' returns a logically inverted predicate that returns true everywhere the original predicate would have returned false.',
                position: {
                  start: { line: 10, column: 40, offset: 338 },
                  end: { line: 10, column: 158, offset: 456 }
                }
              }
            ],
            position: {
              start: { line: 10, column: 1, offset: 299 },
              end: { line: 10, column: 158, offset: 456 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const isOdd = number => number % 2 == 1\n' +
              '\n' +
              'const isNotOdd = not(isOdd)\n' +
              '\n' +
              'console.log(isNotOdd(3)) // false',
            position: {
              start: { line: 12, column: 1, offset: 458 },
              end: { line: 18, column: 4, offset: 592 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'not',
                position: {
                  start: { line: 20, column: 1, offset: 594 },
                  end: { line: 20, column: 6, offset: 599 }
                }
              },
              {
                type: 'text',
                value: ' negates the resolved value of a promise.',
                position: {
                  start: { line: 20, column: 6, offset: 599 },
                  end: { line: 20, column: 47, offset: 640 }
                }
              }
            ],
            position: {
              start: { line: 20, column: 1, offset: 594 },
              end: { line: 20, column: 47, offset: 640 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const promise = Promise.resolve(false)\n' +
              '\n' +
              'not(promise).then(console.log) // true',
            position: {
              start: { line: 22, column: 1, offset: 642 },
              end: { line: 26, column: 4, offset: 751 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 28, column: 1, offset: 753 },
                  end: { line: 28, column: 148, offset: 900 }
                }
              }
            ],
            position: {
              start: { line: 28, column: 1, offset: 753 },
              end: { line: 28, column: 148, offset: 900 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const isOdd = number => number % 2 == 1\n' +
              '\n' +
              'not(Promise.resolve(3), isOdd).then(console.log) // false',
            position: {
              start: { line: 30, column: 1, offset: 902 },
              end: { line: 34, column: 4, offset: 1031 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 36, column: 1, offset: 1033 },
                  end: { line: 36, column: 10, offset: 1042 }
                }
              }
            ],
            position: {
              start: { line: 36, column: 1, offset: 1033 },
              end: { line: 36, column: 10, offset: 1042 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/some',
                        children: [
                          {
                            type: 'text',
                            value: 'some',
                            position: {
                              start: { line: 37, column: 5, offset: 1047 },
                              end: { line: 37, column: 9, offset: 1051 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 37, column: 4, offset: 1046 },
                          end: { line: 37, column: 22, offset: 1064 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 37, column: 4, offset: 1046 },
                      end: { line: 37, column: 22, offset: 1064 }
                    }
                  }
                ],
                position: {
                  start: { line: 37, column: 2, offset: 1044 },
                  end: { line: 37, column: 22, offset: 1064 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/and',
                        children: [
                          {
                            type: 'text',
                            value: 'and',
                            position: {
                              start: { line: 38, column: 5, offset: 1069 },
                              end: { line: 38, column: 8, offset: 1072 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 38, column: 4, offset: 1068 },
                          end: { line: 38, column: 20, offset: 1084 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 38, column: 4, offset: 1068 },
                      end: { line: 38, column: 20, offset: 1084 }
                    }
                  }
                ],
                position: {
                  start: { line: 38, column: 2, offset: 1066 },
                  end: { line: 38, column: 20, offset: 1084 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/or',
                        children: [
                          {
                            type: 'text',
                            value: 'or',
                            position: {
                              start: { line: 39, column: 5, offset: 1089 },
                              end: { line: 39, column: 7, offset: 1091 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 39, column: 4, offset: 1088 },
                          end: { line: 39, column: 18, offset: 1102 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 39, column: 4, offset: 1088 },
                      end: { line: 39, column: 18, offset: 1102 }
                    }
                  }
                ],
                position: {
                  start: { line: 39, column: 2, offset: 1086 },
                  end: { line: 39, column: 18, offset: 1102 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/eq',
                        children: [
                          {
                            type: 'text',
                            value: 'eq',
                            position: {
                              start: { line: 40, column: 5, offset: 1107 },
                              end: { line: 40, column: 7, offset: 1109 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 40, column: 4, offset: 1106 },
                          end: { line: 40, column: 18, offset: 1120 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 40, column: 4, offset: 1106 },
                      end: { line: 40, column: 18, offset: 1120 }
                    }
                  }
                ],
                position: {
                  start: { line: 40, column: 2, offset: 1104 },
                  end: { line: 40, column: 18, offset: 1120 }
                }
              }
            ],
            position: {
              start: { line: 37, column: 2, offset: 1044 },
              end: { line: 40, column: 18, offset: 1120 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 40, column: 18, offset: 1120 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/not.js'
  },
  {
    name: 'omit',
    synopsis: '```coffeescript [specscript]\n' +
      'omit(source Promise|Object, paths Array<string>) -> result Object\n' +
      'omit(paths Array<string>)(source Object) -> result Object\n' +
      '```',
    description: 'Create a new object by excluding provided paths on a source object.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'console.log(\n' +
      "  omit({ _id: '1', name: 'John' }, ['_id']),\n" +
      ") // { name: 'John' }\n" +
      '```\n' +
      '\n' +
      '`omit` supports three types of path patterns for nested property access\n' +
      '\n' +
      " * dot delimited - `'a.b.c'`\n" +
      " * bracket notation - `'a[0].value'`\n" +
      " * an array of keys or indices - `['a', 0, 'value']`\n" +
      '\n' +
      '```javascript [playground]\n' +
      'console.log(\n' +
      "  omit(['a.b.d'])({\n" +
      '    a: {\n' +
      '      b: {\n' +
      "        c: 'hello',\n" +
      "        d: 'goodbye',\n" +
      '      },\n' +
      '    },\n' +
      '  }),\n' +
      ") // { a: { b: { c: 'hello' } } }\n" +
      '```\n' +
      '\n' +
      'Compose `omit` inside a `pipe` with its lazy API\n' +
      '\n' +
      '```javascript [playground]\n' +
      'pipe({ a: 1, b: 2, c: 3 }, [\n' +
      '  map(number => number ** 2),\n' +
      "  omit(['a', 'b']),\n" +
      '  console.log, // { c: 9 }\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "omit(Promise.resolve({ a: 1, b: 2, c: 3 }), ['a', 'b']).then(console.log)\n" +
      '// { c: 3 }\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [all](/docs/all)\n' +
      ' * [assign](/docs/assign)\n' +
      ' * [get](/docs/get)\n' +
      ' * [set](/docs/set)\n' +
      ' * [pick](/docs/pick)\n' +
      ' * [forEach](/docs/forEach)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'omit',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'omit(source Promise|Object, paths Array<string>) -> result Object\n' +
              'omit(paths Array<string>)(source Object) -> result Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 4, offset: 156 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 4, offset: 156 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a new object by excluding provided paths on a source object.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 68, offset: 67 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 68, offset: 67 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'console.log(\n' +
              "  omit({ _id: '1', name: 'John' }, ['_id']),\n" +
              ") // { name: 'John' }",
            position: {
              start: { line: 3, column: 1, offset: 69 },
              end: { line: 7, column: 4, offset: 179 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'omit',
                position: {
                  start: { line: 9, column: 1, offset: 181 },
                  end: { line: 9, column: 7, offset: 187 }
                }
              },
              {
                type: 'text',
                value: ' supports three types of path patterns for nested property access',
                position: {
                  start: { line: 9, column: 7, offset: 187 },
                  end: { line: 9, column: 72, offset: 252 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 181 },
              end: { line: 9, column: 72, offset: 252 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'dot delimited - ',
                        position: {
                          start: { line: 11, column: 4, offset: 257 },
                          end: { line: 11, column: 20, offset: 273 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "'a.b.c'",
                        position: {
                          start: { line: 11, column: 20, offset: 273 },
                          end: { line: 11, column: 29, offset: 282 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 11, column: 4, offset: 257 },
                      end: { line: 11, column: 29, offset: 282 }
                    }
                  }
                ],
                position: {
                  start: { line: 11, column: 2, offset: 255 },
                  end: { line: 11, column: 29, offset: 282 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'bracket notation - ',
                        position: {
                          start: { line: 12, column: 4, offset: 286 },
                          end: { line: 12, column: 23, offset: 305 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "'a[0].value'",
                        position: {
                          start: { line: 12, column: 23, offset: 305 },
                          end: { line: 12, column: 37, offset: 319 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 12, column: 4, offset: 286 },
                      end: { line: 12, column: 37, offset: 319 }
                    }
                  }
                ],
                position: {
                  start: { line: 12, column: 2, offset: 284 },
                  end: { line: 12, column: 37, offset: 319 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'an array of keys or indices - ',
                        position: {
                          start: { line: 13, column: 4, offset: 323 },
                          end: { line: 13, column: 34, offset: 353 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "['a', 0, 'value']",
                        position: {
                          start: { line: 13, column: 34, offset: 353 },
                          end: { line: 13, column: 53, offset: 372 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 13, column: 4, offset: 323 },
                      end: { line: 13, column: 53, offset: 372 }
                    }
                  }
                ],
                position: {
                  start: { line: 13, column: 2, offset: 321 },
                  end: { line: 13, column: 53, offset: 372 }
                }
              }
            ],
            position: {
              start: { line: 11, column: 2, offset: 255 },
              end: { line: 13, column: 53, offset: 372 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'console.log(\n' +
              "  omit(['a.b.d'])({\n" +
              '    a: {\n' +
              '      b: {\n' +
              "        c: 'hello',\n" +
              "        d: 'goodbye',\n" +
              '      },\n' +
              '    },\n' +
              '  }),\n' +
              ") // { a: { b: { c: 'hello' } } }",
            position: {
              start: { line: 15, column: 1, offset: 374 },
              end: { line: 26, column: 4, offset: 555 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Compose ',
                position: {
                  start: { line: 28, column: 1, offset: 557 },
                  end: { line: 28, column: 9, offset: 565 }
                }
              },
              {
                type: 'inlineCode',
                value: 'omit',
                position: {
                  start: { line: 28, column: 9, offset: 565 },
                  end: { line: 28, column: 15, offset: 571 }
                }
              },
              {
                type: 'text',
                value: ' inside a ',
                position: {
                  start: { line: 28, column: 15, offset: 571 },
                  end: { line: 28, column: 25, offset: 581 }
                }
              },
              {
                type: 'inlineCode',
                value: 'pipe',
                position: {
                  start: { line: 28, column: 25, offset: 581 },
                  end: { line: 28, column: 31, offset: 587 }
                }
              },
              {
                type: 'text',
                value: ' with its lazy API',
                position: {
                  start: { line: 28, column: 31, offset: 587 },
                  end: { line: 28, column: 49, offset: 605 }
                }
              }
            ],
            position: {
              start: { line: 28, column: 1, offset: 557 },
              end: { line: 28, column: 49, offset: 605 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'pipe({ a: 1, b: 2, c: 3 }, [\n' +
              '  map(number => number ** 2),\n' +
              "  omit(['a', 'b']),\n" +
              '  console.log, // { c: 9 }\n' +
              '])',
            position: {
              start: { line: 30, column: 1, offset: 607 },
              end: { line: 36, column: 4, offset: 746 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 38, column: 1, offset: 748 },
                  end: { line: 38, column: 148, offset: 895 }
                }
              }
            ],
            position: {
              start: { line: 38, column: 1, offset: 748 },
              end: { line: 38, column: 148, offset: 895 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "omit(Promise.resolve({ a: 1, b: 2, c: 3 }), ['a', 'b']).then(console.log)\n" +
              '// { c: 3 }',
            position: {
              start: { line: 40, column: 1, offset: 897 },
              end: { line: 43, column: 4, offset: 1013 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 45, column: 1, offset: 1015 },
                  end: { line: 45, column: 10, offset: 1024 }
                }
              }
            ],
            position: {
              start: { line: 45, column: 1, offset: 1015 },
              end: { line: 45, column: 10, offset: 1024 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 46, column: 5, offset: 1029 },
                              end: { line: 46, column: 9, offset: 1033 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 46, column: 4, offset: 1028 },
                          end: { line: 46, column: 22, offset: 1046 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 46, column: 4, offset: 1028 },
                      end: { line: 46, column: 22, offset: 1046 }
                    }
                  }
                ],
                position: {
                  start: { line: 46, column: 2, offset: 1026 },
                  end: { line: 46, column: 22, offset: 1046 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/all',
                        children: [
                          {
                            type: 'text',
                            value: 'all',
                            position: {
                              start: { line: 47, column: 5, offset: 1051 },
                              end: { line: 47, column: 8, offset: 1054 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 47, column: 4, offset: 1050 },
                          end: { line: 47, column: 20, offset: 1066 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 47, column: 4, offset: 1050 },
                      end: { line: 47, column: 20, offset: 1066 }
                    }
                  }
                ],
                position: {
                  start: { line: 47, column: 2, offset: 1048 },
                  end: { line: 47, column: 20, offset: 1066 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/assign',
                        children: [
                          {
                            type: 'text',
                            value: 'assign',
                            position: {
                              start: { line: 48, column: 5, offset: 1071 },
                              end: { line: 48, column: 11, offset: 1077 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 48, column: 4, offset: 1070 },
                          end: { line: 48, column: 26, offset: 1092 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 48, column: 4, offset: 1070 },
                      end: { line: 48, column: 26, offset: 1092 }
                    }
                  }
                ],
                position: {
                  start: { line: 48, column: 2, offset: 1068 },
                  end: { line: 48, column: 26, offset: 1092 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/get',
                        children: [
                          {
                            type: 'text',
                            value: 'get',
                            position: {
                              start: { line: 49, column: 5, offset: 1097 },
                              end: { line: 49, column: 8, offset: 1100 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 49, column: 4, offset: 1096 },
                          end: { line: 49, column: 20, offset: 1112 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 49, column: 4, offset: 1096 },
                      end: { line: 49, column: 20, offset: 1112 }
                    }
                  }
                ],
                position: {
                  start: { line: 49, column: 2, offset: 1094 },
                  end: { line: 49, column: 20, offset: 1112 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/set',
                        children: [
                          {
                            type: 'text',
                            value: 'set',
                            position: {
                              start: { line: 50, column: 5, offset: 1117 },
                              end: { line: 50, column: 8, offset: 1120 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 50, column: 4, offset: 1116 },
                          end: { line: 50, column: 20, offset: 1132 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 50, column: 4, offset: 1116 },
                      end: { line: 50, column: 20, offset: 1132 }
                    }
                  }
                ],
                position: {
                  start: { line: 50, column: 2, offset: 1114 },
                  end: { line: 50, column: 20, offset: 1132 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pick',
                        children: [
                          {
                            type: 'text',
                            value: 'pick',
                            position: {
                              start: { line: 51, column: 5, offset: 1137 },
                              end: { line: 51, column: 9, offset: 1141 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 51, column: 4, offset: 1136 },
                          end: { line: 51, column: 22, offset: 1154 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 51, column: 4, offset: 1136 },
                      end: { line: 51, column: 22, offset: 1154 }
                    }
                  }
                ],
                position: {
                  start: { line: 51, column: 2, offset: 1134 },
                  end: { line: 51, column: 22, offset: 1154 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 52, column: 5, offset: 1159 },
                              end: { line: 52, column: 12, offset: 1166 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 52, column: 4, offset: 1158 },
                          end: { line: 52, column: 28, offset: 1182 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 52, column: 4, offset: 1158 },
                      end: { line: 52, column: 28, offset: 1182 }
                    }
                  }
                ],
                position: {
                  start: { line: 52, column: 2, offset: 1156 },
                  end: { line: 52, column: 28, offset: 1182 }
                }
              }
            ],
            position: {
              start: { line: 46, column: 2, offset: 1026 },
              end: { line: 52, column: 28, offset: 1182 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 52, column: 28, offset: 1182 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/omit.js'
  },
  {
    name: 'areAnyNonfunctionsTruthy',
    synopsis: '```coffeescript [specscript]\n' +
      'areAnyNonfunctionsTruthy(predicates Array<value>) -> Promise|boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'areAnyNonfunctionsTruthy',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'areAnyNonfunctionsTruthy(predicates Array<value>) -> Promise|boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 101 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 101 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/or.js'
  },
  {
    name: 'asyncAreAnyPredicatesTruthy',
    synopsis: '```coffeescript [specscript]\n' +
      'asyncAreAnyPredicatesTruthy(\n' +
      '  args Array,\n' +
      '  predicates Array<predicate function|nonfunction>,\n' +
      '  index number,\n' +
      ') -> allTruthy boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'asyncAreAnyPredicatesTruthy',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 28, offset: 27 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 28, offset: 27 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'asyncAreAnyPredicatesTruthy(\n' +
              '  args Array,\n' +
              '  predicates Array<predicate function|nonfunction>,\n' +
              '  index number,\n' +
              ') -> allTruthy boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 166 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 166 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/or.js'
  },
  {
    name: 'or',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncPredicate = (...args)=>Promise|boolean|any\n' +
      '\n' +
      'predicatesOrValues Array<SyncOrAsyncPredicate|boolean|any>\n' +
      '\n' +
      'or(values Array<boolean|any>) -> result boolean\n' +
      'or(...argsOrPromises, predicatesOrValues) -> Promise|boolean\n' +
      'or(predicatesOrValues)(...args) -> Promise|boolean\n' +
      '```',
    description: 'Function equivalent to the [Logical OR](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR) operator. Tests arrays of predicate functions, promises, values, or a mix thereof.\n' +
      '\n' +
      'If provided an array of boolean values, `or` returns true if any boolean values are truthy.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const oneIsLessThanZero = 1 < 0\n' +
      'const oneIsGreaterThanTwo = 1 > 2\n' +
      'const threeIsNotEqualToThree = 3 !== 3\n' +
      '\n' +
      'const condition = or([\n' +
      '  oneIsLessThanZero,\n' +
      '  oneIsGreaterThanTwo,\n' +
      '  threeIsNotEqualToThree\n' +
      '])\n' +
      'console.log(condition) // false\n' +
      '```\n' +
      '\n' +
      'If any predicate functions are provided in the array, `or` returns an aggregate predicate function that returns true for a given set of arguments if any provided predicate functions test true. If any provided predicate functions are asynchronous, the aggregate predicate function becomes asynchronous.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const isOdd = number => number % 2 == 1\n' +
      'const isNegative = number => number < 0\n' +
      'const asyncIsGreaterThan3 = async number => number > 3\n' +
      '\n' +
      'const aggregatePredicate = or([\n' +
      '  false,\n' +
      '  isOdd,\n' +
      '  isNegative,\n' +
      '  asyncIsGreaterThan3,\n' +
      '])\n' +
      '\n' +
      'const condition = await aggregatePredicate(2)\n' +
      'console.log(condition) // false\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "or(Promise.resolve('aaa'), [\n" +
      "  s => s.startsWith('b'),\n" +
      "  s => s.endsWith('a'),\n" +
      ']).then(console.log) // true\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [some](/docs/some)\n' +
      ' * [and](/docs/and)\n' +
      ' * [not](/docs/not)\n' +
      ' * [eq](/docs/eq)',
    execution: 'series',
    note: '...args slows down here by an order of magnitude',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'or',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 3, offset: 2 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 3, offset: 2 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 3, offset: 2 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncPredicate = (...args)=>Promise|boolean|any\n' +
              '\n' +
              'predicatesOrValues Array<SyncOrAsyncPredicate|boolean|any>\n' +
              '\n' +
              'or(values Array<boolean|any>) -> result boolean\n' +
              'or(...argsOrPromises, predicatesOrValues) -> Promise|boolean\n' +
              'or(predicatesOrValues)(...args) -> Promise|boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 12, column: 4, offset: 363 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 363 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Function equivalent to the ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR',
                children: [
                  {
                    type: 'text',
                    value: 'Logical OR',
                    position: {
                      start: { line: 1, column: 29, offset: 28 },
                      end: { line: 1, column: 39, offset: 38 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 28, offset: 27 },
                  end: { line: 1, column: 128, offset: 127 }
                }
              },
              {
                type: 'text',
                value: ' operator. Tests arrays of predicate functions, promises, values, or a mix thereof.',
                position: {
                  start: { line: 1, column: 128, offset: 127 },
                  end: { line: 1, column: 211, offset: 210 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 211, offset: 210 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If provided an array of boolean values, ',
                position: {
                  start: { line: 3, column: 1, offset: 212 },
                  end: { line: 3, column: 41, offset: 252 }
                }
              },
              {
                type: 'inlineCode',
                value: 'or',
                position: {
                  start: { line: 3, column: 41, offset: 252 },
                  end: { line: 3, column: 45, offset: 256 }
                }
              },
              {
                type: 'text',
                value: ' returns true if any boolean values are truthy.',
                position: {
                  start: { line: 3, column: 45, offset: 256 },
                  end: { line: 3, column: 92, offset: 303 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 212 },
              end: { line: 3, column: 92, offset: 303 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const oneIsLessThanZero = 1 < 0\n' +
              'const oneIsGreaterThanTwo = 1 > 2\n' +
              'const threeIsNotEqualToThree = 3 !== 3\n' +
              '\n' +
              'const condition = or([\n' +
              '  oneIsLessThanZero,\n' +
              '  oneIsGreaterThanTwo,\n' +
              '  threeIsNotEqualToThree\n' +
              '])\n' +
              'console.log(condition) // false',
            position: {
              start: { line: 5, column: 1, offset: 305 },
              end: { line: 16, column: 4, offset: 568 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If any predicate functions are provided in the array, ',
                position: {
                  start: { line: 18, column: 1, offset: 570 },
                  end: { line: 18, column: 55, offset: 624 }
                }
              },
              {
                type: 'inlineCode',
                value: 'or',
                position: {
                  start: { line: 18, column: 55, offset: 624 },
                  end: { line: 18, column: 59, offset: 628 }
                }
              },
              {
                type: 'text',
                value: ' returns an aggregate predicate function that returns true for a given set of arguments if any provided predicate functions test true. If any provided predicate functions are asynchronous, the aggregate predicate function becomes asynchronous.',
                position: {
                  start: { line: 18, column: 59, offset: 628 },
                  end: { line: 18, column: 302, offset: 871 }
                }
              }
            ],
            position: {
              start: { line: 18, column: 1, offset: 570 },
              end: { line: 18, column: 302, offset: 871 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const isOdd = number => number % 2 == 1\n' +
              'const isNegative = number => number < 0\n' +
              'const asyncIsGreaterThan3 = async number => number > 3\n' +
              '\n' +
              'const aggregatePredicate = or([\n' +
              '  false,\n' +
              '  isOdd,\n' +
              '  isNegative,\n' +
              '  asyncIsGreaterThan3,\n' +
              '])\n' +
              '\n' +
              'const condition = await aggregatePredicate(2)\n' +
              'console.log(condition) // false',
            position: {
              start: { line: 20, column: 1, offset: 873 },
              end: { line: 34, column: 4, offset: 1208 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 36, column: 1, offset: 1210 },
                  end: { line: 36, column: 148, offset: 1357 }
                }
              }
            ],
            position: {
              start: { line: 36, column: 1, offset: 1210 },
              end: { line: 36, column: 148, offset: 1357 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "or(Promise.resolve('aaa'), [\n" +
              "  s => s.startsWith('b'),\n" +
              "  s => s.endsWith('a'),\n" +
              ']).then(console.log) // true',
            position: {
              start: { line: 38, column: 1, offset: 1359 },
              end: { line: 43, column: 4, offset: 1497 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 45, column: 1, offset: 1499 },
                  end: { line: 45, column: 10, offset: 1508 }
                }
              }
            ],
            position: {
              start: { line: 45, column: 1, offset: 1499 },
              end: { line: 45, column: 10, offset: 1508 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/some',
                        children: [
                          {
                            type: 'text',
                            value: 'some',
                            position: {
                              start: { line: 46, column: 5, offset: 1513 },
                              end: { line: 46, column: 9, offset: 1517 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 46, column: 4, offset: 1512 },
                          end: { line: 46, column: 22, offset: 1530 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 46, column: 4, offset: 1512 },
                      end: { line: 46, column: 22, offset: 1530 }
                    }
                  }
                ],
                position: {
                  start: { line: 46, column: 2, offset: 1510 },
                  end: { line: 46, column: 22, offset: 1530 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/and',
                        children: [
                          {
                            type: 'text',
                            value: 'and',
                            position: {
                              start: { line: 47, column: 5, offset: 1535 },
                              end: { line: 47, column: 8, offset: 1538 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 47, column: 4, offset: 1534 },
                          end: { line: 47, column: 20, offset: 1550 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 47, column: 4, offset: 1534 },
                      end: { line: 47, column: 20, offset: 1550 }
                    }
                  }
                ],
                position: {
                  start: { line: 47, column: 2, offset: 1532 },
                  end: { line: 47, column: 20, offset: 1550 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/not',
                        children: [
                          {
                            type: 'text',
                            value: 'not',
                            position: {
                              start: { line: 48, column: 5, offset: 1555 },
                              end: { line: 48, column: 8, offset: 1558 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 48, column: 4, offset: 1554 },
                          end: { line: 48, column: 20, offset: 1570 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 48, column: 4, offset: 1554 },
                      end: { line: 48, column: 20, offset: 1570 }
                    }
                  }
                ],
                position: {
                  start: { line: 48, column: 2, offset: 1552 },
                  end: { line: 48, column: 20, offset: 1570 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/eq',
                        children: [
                          {
                            type: 'text',
                            value: 'eq',
                            position: {
                              start: { line: 49, column: 5, offset: 1575 },
                              end: { line: 49, column: 7, offset: 1577 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 49, column: 4, offset: 1574 },
                          end: { line: 49, column: 18, offset: 1588 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 49, column: 4, offset: 1574 },
                      end: { line: 49, column: 18, offset: 1588 }
                    }
                  }
                ],
                position: {
                  start: { line: 49, column: 2, offset: 1572 },
                  end: { line: 49, column: 18, offset: 1588 }
                }
              }
            ],
            position: {
              start: { line: 46, column: 2, offset: 1510 },
              end: { line: 49, column: 18, offset: 1588 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 49, column: 18, offset: 1588 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'series',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      note: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '...args slows down here by an order of magnitude',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 49, offset: 48 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 49, offset: 48 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 49, offset: 48 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/or.js'
  },
  {
    name: 'pick',
    synopsis: '```coffeescript [specscript]\n' +
      'pick(source Promise|Object, keys Array<string>) -> result Object\n' +
      'pick(keys Array<string>)(source Object) -> result Object\n' +
      '```',
    description: 'Creates a new object from a source object by selecting provided keys. If a provided key does not exist on the source object, excludes it from the resulting object.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'console.log(\n' +
      "  pick({ goodbye: 1, world: 2 }, ['hello', 'world']),\n" +
      ') // { world: 2 }\n' +
      '```\n' +
      '\n' +
      '`pick` supports three types of path patterns for nested property access\n' +
      '\n' +
      " * dot delimited - `'a.b.c'`\n" +
      " * bracket notation - `'a[0].value'`\n" +
      " * an array of keys or indices - `['a', 0, 'value']`\n" +
      '\n' +
      '```javascript [playground]\n' +
      'const nested = { a: { b: { c: { d: 1, e: [2, 3] } } } }\n' +
      '\n' +
      "console.log(pick(['a.b.c.d'])(nested)) // { a: { b: { c: { d: 1 } } } }\n" +
      '```\n' +
      '\n' +
      'Compose `pick` inside a `pipe` with its lazy API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'pipe({ a: 1, b: 2, c: 3 }, [\n' +
      '  map(number => number ** 2),\n' +
      "  pick(['a', 'c']),\n" +
      '  console.log, // { a: 1, c: 9 }\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "pick(Promise.resolve({ a: 1, b: 2, c: 3 }), ['a', 'b']).then(console.log)\n" +
      '// { a: 1, b: 2 }\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [all](/docs/all)\n' +
      ' * [assign](/docs/assign)\n' +
      ' * [get](/docs/get)\n' +
      ' * [set](/docs/set)\n' +
      ' * [omit](/docs/omit)\n' +
      ' * [forEach](/docs/forEach)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'pick',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'pick(source Promise|Object, keys Array<string>) -> result Object\n' +
              'pick(keys Array<string>)(source Object) -> result Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 4, offset: 154 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 4, offset: 154 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Creates a new object from a source object by selecting provided keys. If a provided key does not exist on the source object, excludes it from the resulting object.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 164, offset: 163 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 164, offset: 163 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'console.log(\n' +
              "  pick({ goodbye: 1, world: 2 }, ['hello', 'world']),\n" +
              ') // { world: 2 }',
            position: {
              start: { line: 3, column: 1, offset: 165 },
              end: { line: 7, column: 4, offset: 280 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'pick',
                position: {
                  start: { line: 9, column: 1, offset: 282 },
                  end: { line: 9, column: 7, offset: 288 }
                }
              },
              {
                type: 'text',
                value: ' supports three types of path patterns for nested property access',
                position: {
                  start: { line: 9, column: 7, offset: 288 },
                  end: { line: 9, column: 72, offset: 353 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 282 },
              end: { line: 9, column: 72, offset: 353 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'dot delimited - ',
                        position: {
                          start: { line: 11, column: 4, offset: 358 },
                          end: { line: 11, column: 20, offset: 374 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "'a.b.c'",
                        position: {
                          start: { line: 11, column: 20, offset: 374 },
                          end: { line: 11, column: 29, offset: 383 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 11, column: 4, offset: 358 },
                      end: { line: 11, column: 29, offset: 383 }
                    }
                  }
                ],
                position: {
                  start: { line: 11, column: 2, offset: 356 },
                  end: { line: 11, column: 29, offset: 383 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'bracket notation - ',
                        position: {
                          start: { line: 12, column: 4, offset: 387 },
                          end: { line: 12, column: 23, offset: 406 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "'a[0].value'",
                        position: {
                          start: { line: 12, column: 23, offset: 406 },
                          end: { line: 12, column: 37, offset: 420 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 12, column: 4, offset: 387 },
                      end: { line: 12, column: 37, offset: 420 }
                    }
                  }
                ],
                position: {
                  start: { line: 12, column: 2, offset: 385 },
                  end: { line: 12, column: 37, offset: 420 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'an array of keys or indices - ',
                        position: {
                          start: { line: 13, column: 4, offset: 424 },
                          end: { line: 13, column: 34, offset: 454 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "['a', 0, 'value']",
                        position: {
                          start: { line: 13, column: 34, offset: 454 },
                          end: { line: 13, column: 53, offset: 473 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 13, column: 4, offset: 424 },
                      end: { line: 13, column: 53, offset: 473 }
                    }
                  }
                ],
                position: {
                  start: { line: 13, column: 2, offset: 422 },
                  end: { line: 13, column: 53, offset: 473 }
                }
              }
            ],
            position: {
              start: { line: 11, column: 2, offset: 356 },
              end: { line: 13, column: 53, offset: 473 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const nested = { a: { b: { c: { d: 1, e: [2, 3] } } } }\n' +
              '\n' +
              "console.log(pick(['a.b.c.d'])(nested)) // { a: { b: { c: { d: 1 } } } }",
            position: {
              start: { line: 15, column: 1, offset: 475 },
              end: { line: 19, column: 4, offset: 634 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Compose ',
                position: {
                  start: { line: 21, column: 1, offset: 636 },
                  end: { line: 21, column: 9, offset: 644 }
                }
              },
              {
                type: 'inlineCode',
                value: 'pick',
                position: {
                  start: { line: 21, column: 9, offset: 644 },
                  end: { line: 21, column: 15, offset: 650 }
                }
              },
              {
                type: 'text',
                value: ' inside a ',
                position: {
                  start: { line: 21, column: 15, offset: 650 },
                  end: { line: 21, column: 25, offset: 660 }
                }
              },
              {
                type: 'inlineCode',
                value: 'pipe',
                position: {
                  start: { line: 21, column: 25, offset: 660 },
                  end: { line: 21, column: 31, offset: 666 }
                }
              },
              {
                type: 'text',
                value: ' with its lazy API.',
                position: {
                  start: { line: 21, column: 31, offset: 666 },
                  end: { line: 21, column: 50, offset: 685 }
                }
              }
            ],
            position: {
              start: { line: 21, column: 1, offset: 636 },
              end: { line: 21, column: 50, offset: 685 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'pipe({ a: 1, b: 2, c: 3 }, [\n' +
              '  map(number => number ** 2),\n' +
              "  pick(['a', 'c']),\n" +
              '  console.log, // { a: 1, c: 9 }\n' +
              '])',
            position: {
              start: { line: 23, column: 1, offset: 687 },
              end: { line: 29, column: 4, offset: 832 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 31, column: 1, offset: 834 },
                  end: { line: 31, column: 148, offset: 981 }
                }
              }
            ],
            position: {
              start: { line: 31, column: 1, offset: 834 },
              end: { line: 31, column: 148, offset: 981 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "pick(Promise.resolve({ a: 1, b: 2, c: 3 }), ['a', 'b']).then(console.log)\n" +
              '// { a: 1, b: 2 }',
            position: {
              start: { line: 33, column: 1, offset: 983 },
              end: { line: 36, column: 4, offset: 1105 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 38, column: 1, offset: 1107 },
                  end: { line: 38, column: 10, offset: 1116 }
                }
              }
            ],
            position: {
              start: { line: 38, column: 1, offset: 1107 },
              end: { line: 38, column: 10, offset: 1116 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 39, column: 5, offset: 1121 },
                              end: { line: 39, column: 9, offset: 1125 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 39, column: 4, offset: 1120 },
                          end: { line: 39, column: 22, offset: 1138 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 39, column: 4, offset: 1120 },
                      end: { line: 39, column: 22, offset: 1138 }
                    }
                  }
                ],
                position: {
                  start: { line: 39, column: 2, offset: 1118 },
                  end: { line: 39, column: 22, offset: 1138 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/all',
                        children: [
                          {
                            type: 'text',
                            value: 'all',
                            position: {
                              start: { line: 40, column: 5, offset: 1143 },
                              end: { line: 40, column: 8, offset: 1146 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 40, column: 4, offset: 1142 },
                          end: { line: 40, column: 20, offset: 1158 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 40, column: 4, offset: 1142 },
                      end: { line: 40, column: 20, offset: 1158 }
                    }
                  }
                ],
                position: {
                  start: { line: 40, column: 2, offset: 1140 },
                  end: { line: 40, column: 20, offset: 1158 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/assign',
                        children: [
                          {
                            type: 'text',
                            value: 'assign',
                            position: {
                              start: { line: 41, column: 5, offset: 1163 },
                              end: { line: 41, column: 11, offset: 1169 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 41, column: 4, offset: 1162 },
                          end: { line: 41, column: 26, offset: 1184 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 41, column: 4, offset: 1162 },
                      end: { line: 41, column: 26, offset: 1184 }
                    }
                  }
                ],
                position: {
                  start: { line: 41, column: 2, offset: 1160 },
                  end: { line: 41, column: 26, offset: 1184 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/get',
                        children: [
                          {
                            type: 'text',
                            value: 'get',
                            position: {
                              start: { line: 42, column: 5, offset: 1189 },
                              end: { line: 42, column: 8, offset: 1192 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 42, column: 4, offset: 1188 },
                          end: { line: 42, column: 20, offset: 1204 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 42, column: 4, offset: 1188 },
                      end: { line: 42, column: 20, offset: 1204 }
                    }
                  }
                ],
                position: {
                  start: { line: 42, column: 2, offset: 1186 },
                  end: { line: 42, column: 20, offset: 1204 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/set',
                        children: [
                          {
                            type: 'text',
                            value: 'set',
                            position: {
                              start: { line: 43, column: 5, offset: 1209 },
                              end: { line: 43, column: 8, offset: 1212 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 43, column: 4, offset: 1208 },
                          end: { line: 43, column: 20, offset: 1224 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 43, column: 4, offset: 1208 },
                      end: { line: 43, column: 20, offset: 1224 }
                    }
                  }
                ],
                position: {
                  start: { line: 43, column: 2, offset: 1206 },
                  end: { line: 43, column: 20, offset: 1224 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/omit',
                        children: [
                          {
                            type: 'text',
                            value: 'omit',
                            position: {
                              start: { line: 44, column: 5, offset: 1229 },
                              end: { line: 44, column: 9, offset: 1233 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 44, column: 4, offset: 1228 },
                          end: { line: 44, column: 22, offset: 1246 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 44, column: 4, offset: 1228 },
                      end: { line: 44, column: 22, offset: 1246 }
                    }
                  }
                ],
                position: {
                  start: { line: 44, column: 2, offset: 1226 },
                  end: { line: 44, column: 22, offset: 1246 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 45, column: 5, offset: 1251 },
                              end: { line: 45, column: 12, offset: 1258 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 45, column: 4, offset: 1250 },
                          end: { line: 45, column: 28, offset: 1274 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 45, column: 4, offset: 1250 },
                      end: { line: 45, column: 28, offset: 1274 }
                    }
                  }
                ],
                position: {
                  start: { line: 45, column: 2, offset: 1248 },
                  end: { line: 45, column: 28, offset: 1274 }
                }
              }
            ],
            position: {
              start: { line: 39, column: 2, offset: 1118 },
              end: { line: 45, column: 28, offset: 1274 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 45, column: 28, offset: 1274 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/pick.js'
  },
  {
    name: 'pipe',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncFunction = (...args)=>Promise|any\n' +
      'type UnarySyncOrAsyncFunction = any=>Promise|any\n' +
      '\n' +
      'funcs [SyncOrAsyncFunction, ...Array<UnarySyncOrAsyncFunction>]\n' +
      '\n' +
      'pipe(funcs)(...args) -> result Promise|any\n' +
      'pipe(...argsOrPromises, funcs) -> result Promise|any\n' +
      'pipe(...funcs)(...args) -> result Promise|any\n' +
      '```',
    description: 'Creates a function pipeline from multiple functions. Each function in the pipeline is evaluated in series, passing its return value as an argument to the next function. The result of a pipeline execution is the return value of the last function in the pipeline. All arguments provided to the pipeline are provided to the first function in the pipeline. If any function in the pipeline is asynchronous, the result of the pipeline execution is a Promise.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const syncAdd123 = pipe([\n' +
      '  number => number + 1,\n' +
      '  number => number + 2,\n' +
      '  number => number + 3,\n' +
      '])\n' +
      '\n' +
      'console.log(syncAdd123(5)) // 11\n' +
      '\n' +
      'const asyncAdd123 = pipe([\n' +
      '  async number => number + 1,\n' +
      '  async number => number + 2,\n' +
      '  async number => number + 3,\n' +
      '])\n' +
      '\n' +
      'asyncAdd123(5).then(console.log) // 11\n' +
      '```\n' +
      '\n' +
      '`pipe` supports a mathematical API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "const appendB = x => x + 'b'\n" +
      "const appendC = x => x + 'c'\n" +
      '\n' +
      'const appendBC = pipe(appendB, appendC)\n' +
      '\n' +
      "console.log(appendBC('a')) // 'abc'\n" +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'pipe(Promise.resolve(1), 2, Promise.resolve(3), [\n' +
      '  console.log, // [1, 2, 3]\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [compose](/docs/compose)\n' +
      ' * [tap](/docs/tap)\n' +
      ' * [switchCase](/docs/switchCase)\n' +
      ' * [tryCatch](/docs/tryCatch)',
    execution: 'series',
    transducing: '',
    since: '1.6.0',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'pipe',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncFunction = (...args)=>Promise|any\n' +
              'type UnarySyncOrAsyncFunction = any=>Promise|any\n' +
              '\n' +
              'funcs [SyncOrAsyncFunction, ...Array<UnarySyncOrAsyncFunction>]\n' +
              '\n' +
              'pipe(funcs)(...args) -> result Promise|any\n' +
              'pipe(...argsOrPromises, funcs) -> result Promise|any\n' +
              'pipe(...funcs)(...args) -> result Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 13, column: 4, offset: 390 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 390 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Creates a function pipeline from multiple functions. Each function in the pipeline is evaluated in series, passing its return value as an argument to the next function. The result of a pipeline execution is the return value of the last function in the pipeline. All arguments provided to the pipeline are provided to the first function in the pipeline. If any function in the pipeline is asynchronous, the result of the pipeline execution is a Promise.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 453, offset: 452 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 453, offset: 452 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const syncAdd123 = pipe([\n' +
              '  number => number + 1,\n' +
              '  number => number + 2,\n' +
              '  number => number + 3,\n' +
              '])\n' +
              '\n' +
              'console.log(syncAdd123(5)) // 11\n' +
              '\n' +
              'const asyncAdd123 = pipe([\n' +
              '  async number => number + 1,\n' +
              '  async number => number + 2,\n' +
              '  async number => number + 3,\n' +
              '])\n' +
              '\n' +
              'asyncAdd123(5).then(console.log) // 11',
            position: {
              start: { line: 3, column: 1, offset: 454 },
              end: { line: 19, column: 4, offset: 780 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'pipe',
                position: {
                  start: { line: 21, column: 1, offset: 782 },
                  end: { line: 21, column: 7, offset: 788 }
                }
              },
              {
                type: 'text',
                value: ' supports a mathematical API.',
                position: {
                  start: { line: 21, column: 7, offset: 788 },
                  end: { line: 21, column: 36, offset: 817 }
                }
              }
            ],
            position: {
              start: { line: 21, column: 1, offset: 782 },
              end: { line: 21, column: 36, offset: 817 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "const appendB = x => x + 'b'\n" +
              "const appendC = x => x + 'c'\n" +
              '\n' +
              'const appendBC = pipe(appendB, appendC)\n' +
              '\n' +
              "console.log(appendBC('a')) // 'abc'",
            position: {
              start: { line: 23, column: 1, offset: 819 },
              end: { line: 30, column: 4, offset: 985 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 32, column: 1, offset: 987 },
                  end: { line: 32, column: 148, offset: 1134 }
                }
              }
            ],
            position: {
              start: { line: 32, column: 1, offset: 987 },
              end: { line: 32, column: 148, offset: 1134 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'pipe(Promise.resolve(1), 2, Promise.resolve(3), [\n' +
              '  console.log, // [1, 2, 3]\n' +
              '])',
            position: {
              start: { line: 34, column: 1, offset: 1136 },
              end: { line: 38, column: 4, offset: 1247 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 40, column: 1, offset: 1249 },
                  end: { line: 40, column: 10, offset: 1258 }
                }
              }
            ],
            position: {
              start: { line: 40, column: 1, offset: 1249 },
              end: { line: 40, column: 10, offset: 1258 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/compose',
                        children: [
                          {
                            type: 'text',
                            value: 'compose',
                            position: {
                              start: { line: 41, column: 5, offset: 1263 },
                              end: { line: 41, column: 12, offset: 1270 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 41, column: 4, offset: 1262 },
                          end: { line: 41, column: 28, offset: 1286 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 41, column: 4, offset: 1262 },
                      end: { line: 41, column: 28, offset: 1286 }
                    }
                  }
                ],
                position: {
                  start: { line: 41, column: 2, offset: 1260 },
                  end: { line: 41, column: 28, offset: 1286 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/tap',
                        children: [
                          {
                            type: 'text',
                            value: 'tap',
                            position: {
                              start: { line: 42, column: 5, offset: 1291 },
                              end: { line: 42, column: 8, offset: 1294 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 42, column: 4, offset: 1290 },
                          end: { line: 42, column: 20, offset: 1306 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 42, column: 4, offset: 1290 },
                      end: { line: 42, column: 20, offset: 1306 }
                    }
                  }
                ],
                position: {
                  start: { line: 42, column: 2, offset: 1288 },
                  end: { line: 42, column: 20, offset: 1306 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/switchCase',
                        children: [
                          {
                            type: 'text',
                            value: 'switchCase',
                            position: {
                              start: { line: 43, column: 5, offset: 1311 },
                              end: { line: 43, column: 15, offset: 1321 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 43, column: 4, offset: 1310 },
                          end: { line: 43, column: 34, offset: 1340 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 43, column: 4, offset: 1310 },
                      end: { line: 43, column: 34, offset: 1340 }
                    }
                  }
                ],
                position: {
                  start: { line: 43, column: 2, offset: 1308 },
                  end: { line: 43, column: 34, offset: 1340 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/tryCatch',
                        children: [
                          {
                            type: 'text',
                            value: 'tryCatch',
                            position: {
                              start: { line: 44, column: 5, offset: 1345 },
                              end: { line: 44, column: 13, offset: 1353 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 44, column: 4, offset: 1344 },
                          end: { line: 44, column: 30, offset: 1370 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 44, column: 4, offset: 1344 },
                      end: { line: 44, column: 30, offset: 1370 }
                    }
                  }
                ],
                position: {
                  start: { line: 44, column: 2, offset: 1342 },
                  end: { line: 44, column: 30, offset: 1370 }
                }
              }
            ],
            position: {
              start: { line: 41, column: 2, offset: 1260 },
              end: { line: 44, column: 30, offset: 1370 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 44, column: 30, offset: 1370 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'series',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      transducing: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      },
      since: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '1.6.0',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/pipe.js'
  },
  {
    name: 'reduce',
    synopsis: '```coffeescript [specscript]\n' +
      'type Foldable = Array|Set|Map|Generator|AsyncGenerator|{ reduce: function }|Object\n' +
      '\n' +
      'type SyncOrAsyncReducer = (\n' +
      '  accumulator any,\n' +
      '  element any,\n' +
      '  indexOrKey number|string|any,\n' +
      '  foldable Foldable\n' +
      ')=>(nextAccumulator Promise|any)\n' +
      '\n' +
      'type UnarySyncOrAsyncResolver = any=>Promise|any\n' +
      '\n' +
      'reducer SyncOrAsyncReducer\n' +
      'initial UnarySyncOrAsyncResolver|any\n' +
      '\n' +
      'reduce(foldable Promise|Foldable, reducer, initial?) -> result Promise|any\n' +
      'reduce(reducer, initial?)(foldable Foldable) -> result Promise|any\n' +
      '```',
    description: 'Reduces a foldable to a single value.\n' +
      '\n' +
      'The following data types are considered to be foldables:\n' +
      ' * `array`\n' +
      ' * `set`\n' +
      ' * `map`\n' +
      ' * `generator`\n' +
      ' * `async generator`\n' +
      ' * `object with .reduce method`\n' +
      ' * `object`\n' +
      '\n' +
      'The reducing operation is dictated by a provided reducer function, which defines a transformation between the accumulator and a given element of the foldable.\n' +
      '\n' +
      '```javascript\n' +
      'const reducer = function (accumulator, element) {\n' +
      '  // nextAccumulator is the result of some operation between accumulator and element\n' +
      '  // and becomes the accumulator for the next iteration and invocation of the reducer\n' +
      '  return nextAccumulator\n' +
      '}\n' +
      '```\n' +
      '\n' +
      'The reducer function signature changes depending on the provided foldable.\n' +
      '\n' +
      'If the foldable is an array:\n' +
      '```coffeescript [specscript]\n' +
      'reducer(\n' +
      '  accumulator any,\n' +
      '  element any,\n' +
      '  index number,\n' +
      '  fold Array\n' +
      ') -> nextAccumulator Promise|any\n' +
      '```\n' +
      '\n' +
      'If the foldable is a set:\n' +
      '```coffeescript [specscript]\n' +
      'reducer(\n' +
      '  accumulator any,\n' +
      '  element any\n' +
      ') -> nextAccumulator Promise|any\n' +
      '```\n' +
      '\n' +
      'If the foldable is a map:\n' +
      '```coffeescript [specscript]\n' +
      'reducer(\n' +
      '  accumulator any,\n' +
      '  element any,\n' +
      '  key any,\n' +
      '  fold Map\n' +
      ') -> nextAccumulator Promise|any\n' +
      '```\n' +
      '\n' +
      'If the foldable is a generator:\n' +
      '```coffeescript [specscript]\n' +
      'reducer(\n' +
      '  accumulator any,\n' +
      '  element any\n' +
      ') -> nextAccumulator Promise|any\n' +
      '```\n' +
      '\n' +
      'If the foldable is a async generator:\n' +
      '```coffeescript [specscript]\n' +
      'reducer(\n' +
      '  accumulator any,\n' +
      '  element any\n' +
      ') -> nextAccumulator Promise|any\n' +
      '```\n' +
      '\n' +
      'If the foldable is an object with a `.reduce` method, the reducer function signature is defined externally.\n' +
      '\n' +
      'If the foldable is a plain object:\n' +
      '```coffeescript [specscript]\n' +
      'reducer(\n' +
      '  accumulator any,\n' +
      '  element any,\n' +
      '  key string,\n' +
      '  fold Object\n' +
      ') -> nextAccumulator Promise|any\n' +
      '```\n' +
      '\n' +
      '`reduce` executes a reducer function for each element of the array in order. If no initial value is provided, `reduce` uses the first element of the foldable as the initial value and starts iterating from the second element of the foldable.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const max = (a, b) => a > b ? a : b\n' +
      '\n' +
      'const result = reduce([1, 3, 5, 4, 2], max)\n' +
      'console.log(result) // 5\n' +
      '```\n' +
      '\n' +
      'If an initial value is provided, the accumulator starts as the initial value rather than the first element of the foldable.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const add = (a, b) => a + b\n' +
      '\n' +
      'const result = reduce([1, 2, 3, 4, 5], add, 0)\n' +
      'console.log(result) // 15\n' +
      '```\n' +
      '\n' +
      'If the reducer is asynchronous, all promises created by the reducer are resolved before continuing with the reducing operation.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncAdd = async (a, b) => a + b\n' +
      '\n' +
      'const promise = reduce([1, 2, 3, 4, 5], asyncAdd, 0)\n' +
      'promise.then(console.log) // 15\n' +
      '```\n' +
      '\n' +
      'If the initialization parameter is a function, it is treated as a resolver of the initial value and called with the foldable.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const concatSquares = (array, value) => array.concat(value ** 2)\n' +
      '\n' +
      'const contrivedInitializer = array => [`initial length ${array.length}`]\n' +
      '\n' +
      'const array = [1, 2, 3, 4, 5]\n' +
      '\n' +
      'console.log(reduce(array, concatSquares, contrivedInitializer))\n' +
      "// ['initial length 5', 1, 4, 9, 16, 25]\n" +
      '```\n' +
      '\n' +
      'For objects, `reduce` iterates over just the values.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const add = (a, b) => a + b\n' +
      '\n' +
      'const obj = { a: 1, b: 2, c: 3, d: 4, e: 5 }\n' +
      '\n' +
      'const result = reduce(obj, add)\n' +
      'console.log(result) // 15\n' +
      '```\n' +
      '\n' +
      'For maps, `reduce` iterates over the values of the entries.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const add = (a, b) => a + b\n' +
      '\n' +
      "const m = new Map([['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5]])\n" +
      '\n' +
      'const result = reduce(m, add)\n' +
      'console.log(result) // 15\n' +
      '```\n' +
      '\n' +
      '`reduce` works for async generators.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const asyncAdd = async (a, b) => a + b\n' +
      '\n' +
      'const asyncGenerate = async function* () {\n' +
      '  yield 1; yield 2; yield 3; yield 4; yield 5\n' +
      '}\n' +
      '\n' +
      'reduce(asyncGenerate(), asyncAdd).then(console.log) // 15\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const add = (a, b) => a + b\n' +
      '\n' +
      'reduce(Promise.resolve([1, 2, 3, 4, 5]), add, 0).then(console.log) // 15\n' +
      '```\n' +
      '\n' +
      'Any promises passed for the initial value are also resolved before further execution.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const add = (a, b) => a + b\n' +
      '\n' +
      'const promise = reduce([1, 2, 3, 4, 5], add, Promise.resolve(0))\n' +
      'promise.then(console.log) // 15\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [forEach](/docs/forEach)\n' +
      ' * [map](/docs/map)\n' +
      ' * [filter](/docs/filter)\n' +
      ' * [transform](/docs/transform)\n' +
      ' * [flatMap](/docs/flatMap)\n' +
      ' * [some](/docs/some)',
    execution: 'series',
    transducing: '',
    TODO: [ 'readerReduce', 'reduce.concurrent' ],
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'reduce',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Foldable = Array|Set|Map|Generator|AsyncGenerator|{ reduce: function }|Object\n' +
              '\n' +
              'type SyncOrAsyncReducer = (\n' +
              '  accumulator any,\n' +
              '  element any,\n' +
              '  indexOrKey number|string|any,\n' +
              '  foldable Foldable\n' +
              ')=>(nextAccumulator Promise|any)\n' +
              '\n' +
              'type UnarySyncOrAsyncResolver = any=>Promise|any\n' +
              '\n' +
              'reducer SyncOrAsyncReducer\n' +
              'initial UnarySyncOrAsyncResolver|any\n' +
              '\n' +
              'reduce(foldable Promise|Foldable, reducer, initial?) -> result Promise|any\n' +
              'reduce(reducer, initial?)(foldable Foldable) -> result Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 18, column: 4, offset: 521 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 18, column: 4, offset: 521 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Reduces a foldable to a single value.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 38, offset: 37 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 38, offset: 37 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The following data types are considered to be foldables:',
                position: {
                  start: { line: 3, column: 1, offset: 39 },
                  end: { line: 3, column: 57, offset: 95 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 39 },
              end: { line: 3, column: 57, offset: 95 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'array',
                        position: {
                          start: { line: 4, column: 4, offset: 99 },
                          end: { line: 4, column: 11, offset: 106 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 4, column: 4, offset: 99 },
                      end: { line: 4, column: 11, offset: 106 }
                    }
                  }
                ],
                position: {
                  start: { line: 4, column: 2, offset: 97 },
                  end: { line: 4, column: 11, offset: 106 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'set',
                        position: {
                          start: { line: 5, column: 4, offset: 110 },
                          end: { line: 5, column: 9, offset: 115 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 5, column: 4, offset: 110 },
                      end: { line: 5, column: 9, offset: 115 }
                    }
                  }
                ],
                position: {
                  start: { line: 5, column: 2, offset: 108 },
                  end: { line: 5, column: 9, offset: 115 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'map',
                        position: {
                          start: { line: 6, column: 4, offset: 119 },
                          end: { line: 6, column: 9, offset: 124 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 6, column: 4, offset: 119 },
                      end: { line: 6, column: 9, offset: 124 }
                    }
                  }
                ],
                position: {
                  start: { line: 6, column: 2, offset: 117 },
                  end: { line: 6, column: 9, offset: 124 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'generator',
                        position: {
                          start: { line: 7, column: 4, offset: 128 },
                          end: { line: 7, column: 15, offset: 139 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 7, column: 4, offset: 128 },
                      end: { line: 7, column: 15, offset: 139 }
                    }
                  }
                ],
                position: {
                  start: { line: 7, column: 2, offset: 126 },
                  end: { line: 7, column: 15, offset: 139 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'async generator',
                        position: {
                          start: { line: 8, column: 4, offset: 143 },
                          end: { line: 8, column: 21, offset: 160 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 8, column: 4, offset: 143 },
                      end: { line: 8, column: 21, offset: 160 }
                    }
                  }
                ],
                position: {
                  start: { line: 8, column: 2, offset: 141 },
                  end: { line: 8, column: 21, offset: 160 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object with .reduce method',
                        position: {
                          start: { line: 9, column: 4, offset: 164 },
                          end: { line: 9, column: 32, offset: 192 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 9, column: 4, offset: 164 },
                      end: { line: 9, column: 32, offset: 192 }
                    }
                  }
                ],
                position: {
                  start: { line: 9, column: 2, offset: 162 },
                  end: { line: 9, column: 32, offset: 192 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object',
                        position: {
                          start: { line: 10, column: 4, offset: 196 },
                          end: { line: 10, column: 12, offset: 204 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 10, column: 4, offset: 196 },
                      end: { line: 10, column: 12, offset: 204 }
                    }
                  }
                ],
                position: {
                  start: { line: 10, column: 2, offset: 194 },
                  end: { line: 10, column: 12, offset: 204 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 2, offset: 97 },
              end: { line: 10, column: 12, offset: 204 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The reducing operation is dictated by a provided reducer function, which defines a transformation between the accumulator and a given element of the foldable.',
                position: {
                  start: { line: 12, column: 1, offset: 206 },
                  end: { line: 12, column: 159, offset: 364 }
                }
              }
            ],
            position: {
              start: { line: 12, column: 1, offset: 206 },
              end: { line: 12, column: 159, offset: 364 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: 'const reducer = function (accumulator, element) {\n' +
              '  // nextAccumulator is the result of some operation between accumulator and element\n' +
              '  // and becomes the accumulator for the next iteration and invocation of the reducer\n' +
              '  return nextAccumulator\n' +
              '}',
            position: {
              start: { line: 14, column: 1, offset: 366 },
              end: { line: 20, column: 4, offset: 631 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The reducer function signature changes depending on the provided foldable.',
                position: {
                  start: { line: 22, column: 1, offset: 633 },
                  end: { line: 22, column: 75, offset: 707 }
                }
              }
            ],
            position: {
              start: { line: 22, column: 1, offset: 633 },
              end: { line: 22, column: 75, offset: 707 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the foldable is an array:',
                position: {
                  start: { line: 24, column: 1, offset: 709 },
                  end: { line: 24, column: 29, offset: 737 }
                }
              }
            ],
            position: {
              start: { line: 24, column: 1, offset: 709 },
              end: { line: 24, column: 29, offset: 737 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'reducer(\n' +
              '  accumulator any,\n' +
              '  element any,\n' +
              '  index number,\n' +
              '  fold Array\n' +
              ') -> nextAccumulator Promise|any',
            position: {
              start: { line: 25, column: 1, offset: 738 },
              end: { line: 32, column: 4, offset: 875 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the foldable is a set:',
                position: {
                  start: { line: 34, column: 1, offset: 877 },
                  end: { line: 34, column: 26, offset: 902 }
                }
              }
            ],
            position: {
              start: { line: 34, column: 1, offset: 877 },
              end: { line: 34, column: 26, offset: 902 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'reducer(\n' +
              '  accumulator any,\n' +
              '  element any\n' +
              ') -> nextAccumulator Promise|any',
            position: {
              start: { line: 35, column: 1, offset: 903 },
              end: { line: 40, column: 4, offset: 1010 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the foldable is a map:',
                position: {
                  start: { line: 42, column: 1, offset: 1012 },
                  end: { line: 42, column: 26, offset: 1037 }
                }
              }
            ],
            position: {
              start: { line: 42, column: 1, offset: 1012 },
              end: { line: 42, column: 26, offset: 1037 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'reducer(\n' +
              '  accumulator any,\n' +
              '  element any,\n' +
              '  key any,\n' +
              '  fold Map\n' +
              ') -> nextAccumulator Promise|any',
            position: {
              start: { line: 43, column: 1, offset: 1038 },
              end: { line: 50, column: 4, offset: 1168 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the foldable is a generator:',
                position: {
                  start: { line: 52, column: 1, offset: 1170 },
                  end: { line: 52, column: 32, offset: 1201 }
                }
              }
            ],
            position: {
              start: { line: 52, column: 1, offset: 1170 },
              end: { line: 52, column: 32, offset: 1201 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'reducer(\n' +
              '  accumulator any,\n' +
              '  element any\n' +
              ') -> nextAccumulator Promise|any',
            position: {
              start: { line: 53, column: 1, offset: 1202 },
              end: { line: 58, column: 4, offset: 1309 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the foldable is a async generator:',
                position: {
                  start: { line: 60, column: 1, offset: 1311 },
                  end: { line: 60, column: 38, offset: 1348 }
                }
              }
            ],
            position: {
              start: { line: 60, column: 1, offset: 1311 },
              end: { line: 60, column: 38, offset: 1348 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'reducer(\n' +
              '  accumulator any,\n' +
              '  element any\n' +
              ') -> nextAccumulator Promise|any',
            position: {
              start: { line: 61, column: 1, offset: 1349 },
              end: { line: 66, column: 4, offset: 1456 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the foldable is an object with a ',
                position: {
                  start: { line: 68, column: 1, offset: 1458 },
                  end: { line: 68, column: 37, offset: 1494 }
                }
              },
              {
                type: 'inlineCode',
                value: '.reduce',
                position: {
                  start: { line: 68, column: 37, offset: 1494 },
                  end: { line: 68, column: 46, offset: 1503 }
                }
              },
              {
                type: 'text',
                value: ' method, the reducer function signature is defined externally.',
                position: {
                  start: { line: 68, column: 46, offset: 1503 },
                  end: { line: 68, column: 108, offset: 1565 }
                }
              }
            ],
            position: {
              start: { line: 68, column: 1, offset: 1458 },
              end: { line: 68, column: 108, offset: 1565 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the foldable is a plain object:',
                position: {
                  start: { line: 70, column: 1, offset: 1567 },
                  end: { line: 70, column: 35, offset: 1601 }
                }
              }
            ],
            position: {
              start: { line: 70, column: 1, offset: 1567 },
              end: { line: 70, column: 35, offset: 1601 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'reducer(\n' +
              '  accumulator any,\n' +
              '  element any,\n' +
              '  key string,\n' +
              '  fold Object\n' +
              ') -> nextAccumulator Promise|any',
            position: {
              start: { line: 71, column: 1, offset: 1602 },
              end: { line: 78, column: 4, offset: 1738 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'reduce',
                position: {
                  start: { line: 80, column: 1, offset: 1740 },
                  end: { line: 80, column: 9, offset: 1748 }
                }
              },
              {
                type: 'text',
                value: ' executes a reducer function for each element of the array in order. If no initial value is provided, ',
                position: {
                  start: { line: 80, column: 9, offset: 1748 },
                  end: { line: 80, column: 111, offset: 1850 }
                }
              },
              {
                type: 'inlineCode',
                value: 'reduce',
                position: {
                  start: { line: 80, column: 111, offset: 1850 },
                  end: { line: 80, column: 119, offset: 1858 }
                }
              },
              {
                type: 'text',
                value: ' uses the first element of the foldable as the initial value and starts iterating from the second element of the foldable.',
                position: {
                  start: { line: 80, column: 119, offset: 1858 },
                  end: { line: 80, column: 241, offset: 1980 }
                }
              }
            ],
            position: {
              start: { line: 80, column: 1, offset: 1740 },
              end: { line: 80, column: 241, offset: 1980 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const max = (a, b) => a > b ? a : b\n' +
              '\n' +
              'const result = reduce([1, 3, 5, 4, 2], max)\n' +
              'console.log(result) // 5',
            position: {
              start: { line: 82, column: 1, offset: 1982 },
              end: { line: 87, column: 4, offset: 2118 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If an initial value is provided, the accumulator starts as the initial value rather than the first element of the foldable.',
                position: {
                  start: { line: 89, column: 1, offset: 2120 },
                  end: { line: 89, column: 124, offset: 2243 }
                }
              }
            ],
            position: {
              start: { line: 89, column: 1, offset: 2120 },
              end: { line: 89, column: 124, offset: 2243 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const add = (a, b) => a + b\n' +
              '\n' +
              'const result = reduce([1, 2, 3, 4, 5], add, 0)\n' +
              'console.log(result) // 15',
            position: {
              start: { line: 91, column: 1, offset: 2245 },
              end: { line: 96, column: 4, offset: 2377 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the reducer is asynchronous, all promises created by the reducer are resolved before continuing with the reducing operation.',
                position: {
                  start: { line: 98, column: 1, offset: 2379 },
                  end: { line: 98, column: 128, offset: 2506 }
                }
              }
            ],
            position: {
              start: { line: 98, column: 1, offset: 2379 },
              end: { line: 98, column: 128, offset: 2506 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncAdd = async (a, b) => a + b\n' +
              '\n' +
              'const promise = reduce([1, 2, 3, 4, 5], asyncAdd, 0)\n' +
              'promise.then(console.log) // 15',
            position: {
              start: { line: 100, column: 1, offset: 2508 },
              end: { line: 105, column: 4, offset: 2663 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the initialization parameter is a function, it is treated as a resolver of the initial value and called with the foldable.',
                position: {
                  start: { line: 107, column: 1, offset: 2665 },
                  end: { line: 107, column: 126, offset: 2790 }
                }
              }
            ],
            position: {
              start: { line: 107, column: 1, offset: 2665 },
              end: { line: 107, column: 126, offset: 2790 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const concatSquares = (array, value) => array.concat(value ** 2)\n' +
              '\n' +
              'const contrivedInitializer = array => [`initial length ${array.length}`]\n' +
              '\n' +
              'const array = [1, 2, 3, 4, 5]\n' +
              '\n' +
              'console.log(reduce(array, concatSquares, contrivedInitializer))\n' +
              "// ['initial length 5', 1, 4, 9, 16, 25]",
            position: {
              start: { line: 109, column: 1, offset: 2792 },
              end: { line: 118, column: 4, offset: 3098 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'For objects, ',
                position: {
                  start: { line: 120, column: 1, offset: 3100 },
                  end: { line: 120, column: 14, offset: 3113 }
                }
              },
              {
                type: 'inlineCode',
                value: 'reduce',
                position: {
                  start: { line: 120, column: 14, offset: 3113 },
                  end: { line: 120, column: 22, offset: 3121 }
                }
              },
              {
                type: 'text',
                value: ' iterates over just the values.',
                position: {
                  start: { line: 120, column: 22, offset: 3121 },
                  end: { line: 120, column: 53, offset: 3152 }
                }
              }
            ],
            position: {
              start: { line: 120, column: 1, offset: 3100 },
              end: { line: 120, column: 53, offset: 3152 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const add = (a, b) => a + b\n' +
              '\n' +
              'const obj = { a: 1, b: 2, c: 3, d: 4, e: 5 }\n' +
              '\n' +
              'const result = reduce(obj, add)\n' +
              'console.log(result) // 15',
            position: {
              start: { line: 122, column: 1, offset: 3154 },
              end: { line: 129, column: 4, offset: 3317 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'For maps, ',
                position: {
                  start: { line: 131, column: 1, offset: 3319 },
                  end: { line: 131, column: 11, offset: 3329 }
                }
              },
              {
                type: 'inlineCode',
                value: 'reduce',
                position: {
                  start: { line: 131, column: 11, offset: 3329 },
                  end: { line: 131, column: 19, offset: 3337 }
                }
              },
              {
                type: 'text',
                value: ' iterates over the values of the entries.',
                position: {
                  start: { line: 131, column: 19, offset: 3337 },
                  end: { line: 131, column: 60, offset: 3378 }
                }
              }
            ],
            position: {
              start: { line: 131, column: 1, offset: 3319 },
              end: { line: 131, column: 60, offset: 3378 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const add = (a, b) => a + b\n' +
              '\n' +
              "const m = new Map([['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5]])\n" +
              '\n' +
              'const result = reduce(m, add)\n' +
              'console.log(result) // 15',
            position: {
              start: { line: 133, column: 1, offset: 3380 },
              end: { line: 140, column: 4, offset: 3566 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'reduce',
                position: {
                  start: { line: 142, column: 1, offset: 3568 },
                  end: { line: 142, column: 9, offset: 3576 }
                }
              },
              {
                type: 'text',
                value: ' works for async generators.',
                position: {
                  start: { line: 142, column: 9, offset: 3576 },
                  end: { line: 142, column: 37, offset: 3604 }
                }
              }
            ],
            position: {
              start: { line: 142, column: 1, offset: 3568 },
              end: { line: 142, column: 37, offset: 3604 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const asyncAdd = async (a, b) => a + b\n' +
              '\n' +
              'const asyncGenerate = async function* () {\n' +
              '  yield 1; yield 2; yield 3; yield 4; yield 5\n' +
              '}\n' +
              '\n' +
              'reduce(asyncGenerate(), asyncAdd).then(console.log) // 15',
            position: {
              start: { line: 144, column: 1, offset: 3606 },
              end: { line: 152, column: 4, offset: 3826 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 154, column: 1, offset: 3828 },
                  end: { line: 154, column: 148, offset: 3975 }
                }
              }
            ],
            position: {
              start: { line: 154, column: 1, offset: 3828 },
              end: { line: 154, column: 148, offset: 3975 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const add = (a, b) => a + b\n' +
              '\n' +
              'reduce(Promise.resolve([1, 2, 3, 4, 5]), add, 0).then(console.log) // 15',
            position: {
              start: { line: 156, column: 1, offset: 3977 },
              end: { line: 160, column: 4, offset: 4109 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed for the initial value are also resolved before further execution.',
                position: {
                  start: { line: 162, column: 1, offset: 4111 },
                  end: { line: 162, column: 86, offset: 4196 }
                }
              }
            ],
            position: {
              start: { line: 162, column: 1, offset: 4111 },
              end: { line: 162, column: 86, offset: 4196 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const add = (a, b) => a + b\n' +
              '\n' +
              'const promise = reduce([1, 2, 3, 4, 5], add, Promise.resolve(0))\n' +
              'promise.then(console.log) // 15',
            position: {
              start: { line: 164, column: 1, offset: 4198 },
              end: { line: 169, column: 4, offset: 4354 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 171, column: 1, offset: 4356 },
                  end: { line: 171, column: 10, offset: 4365 }
                }
              }
            ],
            position: {
              start: { line: 171, column: 1, offset: 4356 },
              end: { line: 171, column: 10, offset: 4365 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 172, column: 5, offset: 4370 },
                              end: { line: 172, column: 12, offset: 4377 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 172, column: 4, offset: 4369 },
                          end: { line: 172, column: 28, offset: 4393 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 172, column: 4, offset: 4369 },
                      end: { line: 172, column: 28, offset: 4393 }
                    }
                  }
                ],
                position: {
                  start: { line: 172, column: 2, offset: 4367 },
                  end: { line: 172, column: 28, offset: 4393 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map',
                        children: [
                          {
                            type: 'text',
                            value: 'map',
                            position: {
                              start: { line: 173, column: 5, offset: 4398 },
                              end: { line: 173, column: 8, offset: 4401 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 173, column: 4, offset: 4397 },
                          end: { line: 173, column: 20, offset: 4413 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 173, column: 4, offset: 4397 },
                      end: { line: 173, column: 20, offset: 4413 }
                    }
                  }
                ],
                position: {
                  start: { line: 173, column: 2, offset: 4395 },
                  end: { line: 173, column: 20, offset: 4413 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/filter',
                        children: [
                          {
                            type: 'text',
                            value: 'filter',
                            position: {
                              start: { line: 174, column: 5, offset: 4418 },
                              end: { line: 174, column: 11, offset: 4424 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 174, column: 4, offset: 4417 },
                          end: { line: 174, column: 26, offset: 4439 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 174, column: 4, offset: 4417 },
                      end: { line: 174, column: 26, offset: 4439 }
                    }
                  }
                ],
                position: {
                  start: { line: 174, column: 2, offset: 4415 },
                  end: { line: 174, column: 26, offset: 4439 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/transform',
                        children: [
                          {
                            type: 'text',
                            value: 'transform',
                            position: {
                              start: { line: 175, column: 5, offset: 4444 },
                              end: { line: 175, column: 14, offset: 4453 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 175, column: 4, offset: 4443 },
                          end: { line: 175, column: 32, offset: 4471 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 175, column: 4, offset: 4443 },
                      end: { line: 175, column: 32, offset: 4471 }
                    }
                  }
                ],
                position: {
                  start: { line: 175, column: 2, offset: 4441 },
                  end: { line: 175, column: 32, offset: 4471 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/flatMap',
                        children: [
                          {
                            type: 'text',
                            value: 'flatMap',
                            position: {
                              start: { line: 176, column: 5, offset: 4476 },
                              end: { line: 176, column: 12, offset: 4483 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 176, column: 4, offset: 4475 },
                          end: { line: 176, column: 28, offset: 4499 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 176, column: 4, offset: 4475 },
                      end: { line: 176, column: 28, offset: 4499 }
                    }
                  }
                ],
                position: {
                  start: { line: 176, column: 2, offset: 4473 },
                  end: { line: 176, column: 28, offset: 4499 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/some',
                        children: [
                          {
                            type: 'text',
                            value: 'some',
                            position: {
                              start: { line: 177, column: 5, offset: 4504 },
                              end: { line: 177, column: 9, offset: 4508 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 177, column: 4, offset: 4503 },
                          end: { line: 177, column: 22, offset: 4521 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 177, column: 4, offset: 4503 },
                      end: { line: 177, column: 22, offset: 4521 }
                    }
                  }
                ],
                position: {
                  start: { line: 177, column: 2, offset: 4501 },
                  end: { line: 177, column: 22, offset: 4521 }
                }
              }
            ],
            position: {
              start: { line: 172, column: 2, offset: 4367 },
              end: { line: 177, column: 22, offset: 4521 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 177, column: 22, offset: 4521 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'series',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      transducing: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      },
      TODO: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/reduce.js'
  },
  {
    mdast: {},
    fileName: '/home/richard/code/rubico.land/../rubico/rubico.js'
  },
  {
    name: '_set',
    synopsis: '```coffeescript [specscript]\n' +
      '_set(\n' +
      '  obj Object,\n' +
      '  path string|Array<string|number>,\n' +
      '  value function|any,\n' +
      ') -> result Promise|Object\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_set',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_set(\n' +
              '  obj Object,\n' +
              '  path string|Array<string|number>,\n' +
              '  value function|any,\n' +
              ') -> result Promise|Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 137 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 137 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/set.js'
  },
  {
    name: 'set',
    synopsis: '```coffeescript [specscript]\n' +
      'set(\n' +
      '  object Promise|Object,\n' +
      '  path string|Array<string|number>,\n' +
      '  value function|any,\n' +
      ') -> result Promise|Object\n' +
      '\n' +
      'set(\n' +
      '  path string|Array<string|number>,\n' +
      '  value function|any,\n' +
      ')(object Object) -> result Promise|Object\n' +
      '```',
    description: 'Sets a property on a new object shallow cloned from the argument object given a path denoted by a string, number, or an array of string or numbers.\n' +
      '\n' +
      '`set` supports three types of path patterns for nested property access.\n' +
      '\n' +
      " * dot delimited - `'a.b.c'`\n" +
      " * bracket notation - `'a[0].value'`\n" +
      " * an array of keys or indices - `['a', 0, 'value']`\n" +
      '\n' +
      '```javascript [playground]\n' +
      "console.log(set({ b: 2 }, 'a', 1)) // { a: 1, b: 2 }\n" +
      '\n' +
      'const nestedAC2 = { a: { c: 2 } }\n' +
      '\n' +
      "console.log(set(nestedAC2, 'a.b', 1)) // { a : { b: 1, c: 2 }}\n" +
      '\n' +
      'const nestedA0BC3 = { a: [{ b: { c: 3 } }] }\n' +
      '\n' +
      "console.log(set(nestedA0BC3, 'a[0].b.c', 4)) // { a: [{ b: { c: 4 } }] }\n" +
      '```\n' +
      '\n' +
      'The property value may be a function, in which case it is treated as a resolver and provided the argument object to resolve the value to set.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const myObj = { a: 1 }\n' +
      '\n' +
      "const myNewObj = set('b', obj => obj.a + 2)(myObj)\n" +
      '\n' +
      'console.log(myNewObj) // { a: 1, b: 3 }\n' +
      '```\n' +
      '\n' +
      '`set` supports a lazy API for composability.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'pipe({ a: 1 }, [\n' +
      "  set('b', 2),\n" +
      '  console.log, // { a: 1, b: 2 }\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "set(Promise.resolve({}), 'a', 1).then(console.log) // { a: 1 }\n" +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [all](/docs/all)\n' +
      ' * [assign](/docs/assign)\n' +
      ' * [get](/docs/get)\n' +
      ' * [pick](/docs/pick)\n' +
      ' * [omit](/docs/omit)\n' +
      ' * [forEach](/docs/forEach)',
    since: '1.7.0',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'set',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 4, offset: 3 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 4, offset: 3 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'set(\n' +
              '  object Promise|Object,\n' +
              '  path string|Array<string|number>,\n' +
              '  value function|any,\n' +
              ') -> result Promise|Object\n' +
              '\n' +
              'set(\n' +
              '  path string|Array<string|number>,\n' +
              '  value function|any,\n' +
              ')(object Object) -> result Promise|Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 12, column: 4, offset: 253 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 253 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Sets a property on a new object shallow cloned from the argument object given a path denoted by a string, number, or an array of string or numbers.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 148, offset: 147 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 148, offset: 147 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'set',
                position: {
                  start: { line: 3, column: 1, offset: 149 },
                  end: { line: 3, column: 6, offset: 154 }
                }
              },
              {
                type: 'text',
                value: ' supports three types of path patterns for nested property access.',
                position: {
                  start: { line: 3, column: 6, offset: 154 },
                  end: { line: 3, column: 72, offset: 220 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 149 },
              end: { line: 3, column: 72, offset: 220 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'dot delimited - ',
                        position: {
                          start: { line: 5, column: 4, offset: 225 },
                          end: { line: 5, column: 20, offset: 241 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "'a.b.c'",
                        position: {
                          start: { line: 5, column: 20, offset: 241 },
                          end: { line: 5, column: 29, offset: 250 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 5, column: 4, offset: 225 },
                      end: { line: 5, column: 29, offset: 250 }
                    }
                  }
                ],
                position: {
                  start: { line: 5, column: 2, offset: 223 },
                  end: { line: 5, column: 29, offset: 250 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'bracket notation - ',
                        position: {
                          start: { line: 6, column: 4, offset: 254 },
                          end: { line: 6, column: 23, offset: 273 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "'a[0].value'",
                        position: {
                          start: { line: 6, column: 23, offset: 273 },
                          end: { line: 6, column: 37, offset: 287 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 6, column: 4, offset: 254 },
                      end: { line: 6, column: 37, offset: 287 }
                    }
                  }
                ],
                position: {
                  start: { line: 6, column: 2, offset: 252 },
                  end: { line: 6, column: 37, offset: 287 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'an array of keys or indices - ',
                        position: {
                          start: { line: 7, column: 4, offset: 291 },
                          end: { line: 7, column: 34, offset: 321 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "['a', 0, 'value']",
                        position: {
                          start: { line: 7, column: 34, offset: 321 },
                          end: { line: 7, column: 53, offset: 340 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 7, column: 4, offset: 291 },
                      end: { line: 7, column: 53, offset: 340 }
                    }
                  }
                ],
                position: {
                  start: { line: 7, column: 2, offset: 289 },
                  end: { line: 7, column: 53, offset: 340 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 2, offset: 223 },
              end: { line: 7, column: 53, offset: 340 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "console.log(set({ b: 2 }, 'a', 1)) // { a: 1, b: 2 }\n" +
              '\n' +
              'const nestedAC2 = { a: { c: 2 } }\n' +
              '\n' +
              "console.log(set(nestedAC2, 'a.b', 1)) // { a : { b: 1, c: 2 }}\n" +
              '\n' +
              'const nestedA0BC3 = { a: [{ b: { c: 3 } }] }\n' +
              '\n' +
              "console.log(set(nestedA0BC3, 'a[0].b.c', 4)) // { a: [{ b: { c: 4 } }] }",
            position: {
              start: { line: 9, column: 1, offset: 342 },
              end: { line: 19, column: 4, offset: 644 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The property value may be a function, in which case it is treated as a resolver and provided the argument object to resolve the value to set.',
                position: {
                  start: { line: 21, column: 1, offset: 646 },
                  end: { line: 21, column: 142, offset: 787 }
                }
              }
            ],
            position: {
              start: { line: 21, column: 1, offset: 646 },
              end: { line: 21, column: 142, offset: 787 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const myObj = { a: 1 }\n' +
              '\n' +
              "const myNewObj = set('b', obj => obj.a + 2)(myObj)\n" +
              '\n' +
              'console.log(myNewObj) // { a: 1, b: 3 }',
            position: {
              start: { line: 23, column: 1, offset: 789 },
              end: { line: 29, column: 4, offset: 935 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'set',
                position: {
                  start: { line: 31, column: 1, offset: 937 },
                  end: { line: 31, column: 6, offset: 942 }
                }
              },
              {
                type: 'text',
                value: ' supports a lazy API for composability.',
                position: {
                  start: { line: 31, column: 6, offset: 942 },
                  end: { line: 31, column: 45, offset: 981 }
                }
              }
            ],
            position: {
              start: { line: 31, column: 1, offset: 937 },
              end: { line: 31, column: 45, offset: 981 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'pipe({ a: 1 }, [\n' +
              "  set('b', 2),\n" +
              '  console.log, // { a: 1, b: 2 }\n' +
              '])',
            position: {
              start: { line: 33, column: 1, offset: 983 },
              end: { line: 38, column: 4, offset: 1081 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 40, column: 1, offset: 1083 },
                  end: { line: 40, column: 148, offset: 1230 }
                }
              }
            ],
            position: {
              start: { line: 40, column: 1, offset: 1083 },
              end: { line: 40, column: 148, offset: 1230 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "set(Promise.resolve({}), 'a', 1).then(console.log) // { a: 1 }",
            position: {
              start: { line: 42, column: 1, offset: 1232 },
              end: { line: 44, column: 4, offset: 1325 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 46, column: 1, offset: 1327 },
                  end: { line: 46, column: 10, offset: 1336 }
                }
              }
            ],
            position: {
              start: { line: 46, column: 1, offset: 1327 },
              end: { line: 46, column: 10, offset: 1336 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 47, column: 5, offset: 1341 },
                              end: { line: 47, column: 9, offset: 1345 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 47, column: 4, offset: 1340 },
                          end: { line: 47, column: 22, offset: 1358 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 47, column: 4, offset: 1340 },
                      end: { line: 47, column: 22, offset: 1358 }
                    }
                  }
                ],
                position: {
                  start: { line: 47, column: 2, offset: 1338 },
                  end: { line: 47, column: 22, offset: 1358 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/all',
                        children: [
                          {
                            type: 'text',
                            value: 'all',
                            position: {
                              start: { line: 48, column: 5, offset: 1363 },
                              end: { line: 48, column: 8, offset: 1366 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 48, column: 4, offset: 1362 },
                          end: { line: 48, column: 20, offset: 1378 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 48, column: 4, offset: 1362 },
                      end: { line: 48, column: 20, offset: 1378 }
                    }
                  }
                ],
                position: {
                  start: { line: 48, column: 2, offset: 1360 },
                  end: { line: 48, column: 20, offset: 1378 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/assign',
                        children: [
                          {
                            type: 'text',
                            value: 'assign',
                            position: {
                              start: { line: 49, column: 5, offset: 1383 },
                              end: { line: 49, column: 11, offset: 1389 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 49, column: 4, offset: 1382 },
                          end: { line: 49, column: 26, offset: 1404 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 49, column: 4, offset: 1382 },
                      end: { line: 49, column: 26, offset: 1404 }
                    }
                  }
                ],
                position: {
                  start: { line: 49, column: 2, offset: 1380 },
                  end: { line: 49, column: 26, offset: 1404 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/get',
                        children: [
                          {
                            type: 'text',
                            value: 'get',
                            position: {
                              start: { line: 50, column: 5, offset: 1409 },
                              end: { line: 50, column: 8, offset: 1412 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 50, column: 4, offset: 1408 },
                          end: { line: 50, column: 20, offset: 1424 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 50, column: 4, offset: 1408 },
                      end: { line: 50, column: 20, offset: 1424 }
                    }
                  }
                ],
                position: {
                  start: { line: 50, column: 2, offset: 1406 },
                  end: { line: 50, column: 20, offset: 1424 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pick',
                        children: [
                          {
                            type: 'text',
                            value: 'pick',
                            position: {
                              start: { line: 51, column: 5, offset: 1429 },
                              end: { line: 51, column: 9, offset: 1433 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 51, column: 4, offset: 1428 },
                          end: { line: 51, column: 22, offset: 1446 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 51, column: 4, offset: 1428 },
                      end: { line: 51, column: 22, offset: 1446 }
                    }
                  }
                ],
                position: {
                  start: { line: 51, column: 2, offset: 1426 },
                  end: { line: 51, column: 22, offset: 1446 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/omit',
                        children: [
                          {
                            type: 'text',
                            value: 'omit',
                            position: {
                              start: { line: 52, column: 5, offset: 1451 },
                              end: { line: 52, column: 9, offset: 1455 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 52, column: 4, offset: 1450 },
                          end: { line: 52, column: 22, offset: 1468 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 52, column: 4, offset: 1450 },
                      end: { line: 52, column: 22, offset: 1468 }
                    }
                  }
                ],
                position: {
                  start: { line: 52, column: 2, offset: 1448 },
                  end: { line: 52, column: 22, offset: 1468 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 53, column: 5, offset: 1473 },
                              end: { line: 53, column: 12, offset: 1480 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 53, column: 4, offset: 1472 },
                          end: { line: 53, column: 28, offset: 1496 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 53, column: 4, offset: 1472 },
                      end: { line: 53, column: 28, offset: 1496 }
                    }
                  }
                ],
                position: {
                  start: { line: 53, column: 2, offset: 1470 },
                  end: { line: 53, column: 28, offset: 1496 }
                }
              }
            ],
            position: {
              start: { line: 47, column: 2, offset: 1338 },
              end: { line: 53, column: 28, offset: 1496 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 53, column: 28, offset: 1496 }
        }
      },
      since: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '1.7.0',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/set.js'
  },
  {
    name: 'some',
    synopsis: '```coffeescript [specscript]\n' +
      'type Foldable = Array|Set|Map|Generator|AsyncGenerator|{ reduce: function }|Object\n' +
      'type UnarySyncOrAsyncPredicate = any=>Promise|boolean\n' +
      '\n' +
      'predicate UnarySyncOrAsyncPredicate\n' +
      '\n' +
      'some(foldable Foldable, predicate) -> Promise|boolean\n' +
      'some(predicate)(foldable Foldable) -> Promise|boolean\n' +
      '```',
    description: 'Test a predicate concurrently across all elements of a foldable, returning true if any executions return true.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const isOdd = number => number % 2 == 1\n' +
      '\n' +
      'console.log(\n' +
      '  some([1, 2, 3, 4, 5], isOdd),\n' +
      ') // true\n' +
      '```\n' +
      '\n' +
      'The following data types are considered to be foldables:\n' +
      ' * `array`\n' +
      ' * `set`\n' +
      ' * `map`\n' +
      ' * `generator`\n' +
      ' * `async generator`\n' +
      ' * `object with .reduce method`\n' +
      ' * `object`\n' +
      '\n' +
      '`some` works for async generators.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "const toTodosUrl = id => 'https://jsonplaceholder.typicode.com/todos/' + id\n" +
      '\n' +
      'const fetchedToJson = fetched => fetched.json()\n' +
      '\n' +
      'const fetchTodo = pipe([\n' +
      '  toTodosUrl,\n' +
      '  fetch,\n' +
      '  fetchedToJson,\n' +
      '])\n' +
      '\n' +
      'const todoIDsGenerator = async function* () {\n' +
      '  yield 1; yield 2; yield 3; yield 4; yield 5\n' +
      '}\n' +
      '\n' +
      'const promise = some(todoIDsGenerator(), async id => {\n' +
      '  const todo = await fetchTodo(id)\n' +
      "  return todo.title.startsWith('fugiat')\n" +
      '})\n' +
      '\n' +
      'promise.then(console.log) // true\n' +
      '```\n' +
      '\n' +
      '`some` supports a lazy API for composability.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'pipe([1, 2, 3], [\n' +
      '  some(number => number < 5),\n' +
      '  console.log, // true\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'some(Promise.resolve([1, 2, 3, 4, 5]), n => n > 6).then(console.log) // false\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [map](/docs/map)\n' +
      ' * [every](/docs/every)\n' +
      ' * [and](/docs/and)',
    execution: 'concurrent',
    muxing: '',
    related: 'or',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'some',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Foldable = Array|Set|Map|Generator|AsyncGenerator|{ reduce: function }|Object\n' +
              'type UnarySyncOrAsyncPredicate = any=>Promise|boolean\n' +
              '\n' +
              'predicate UnarySyncOrAsyncPredicate\n' +
              '\n' +
              'some(foldable Foldable, predicate) -> Promise|boolean\n' +
              'some(predicate)(foldable Foldable) -> Promise|boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 315 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 315 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Test a predicate concurrently across all elements of a foldable, returning true if any executions return true.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 111, offset: 110 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 111, offset: 110 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const isOdd = number => number % 2 == 1\n' +
              '\n' +
              'console.log(\n' +
              '  some([1, 2, 3, 4, 5], isOdd),\n' +
              ') // true',
            position: {
              start: { line: 3, column: 1, offset: 112 },
              end: { line: 9, column: 4, offset: 238 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The following data types are considered to be foldables:',
                position: {
                  start: { line: 11, column: 1, offset: 240 },
                  end: { line: 11, column: 57, offset: 296 }
                }
              }
            ],
            position: {
              start: { line: 11, column: 1, offset: 240 },
              end: { line: 11, column: 57, offset: 296 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'array',
                        position: {
                          start: { line: 12, column: 4, offset: 300 },
                          end: { line: 12, column: 11, offset: 307 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 12, column: 4, offset: 300 },
                      end: { line: 12, column: 11, offset: 307 }
                    }
                  }
                ],
                position: {
                  start: { line: 12, column: 2, offset: 298 },
                  end: { line: 12, column: 11, offset: 307 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'set',
                        position: {
                          start: { line: 13, column: 4, offset: 311 },
                          end: { line: 13, column: 9, offset: 316 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 13, column: 4, offset: 311 },
                      end: { line: 13, column: 9, offset: 316 }
                    }
                  }
                ],
                position: {
                  start: { line: 13, column: 2, offset: 309 },
                  end: { line: 13, column: 9, offset: 316 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'map',
                        position: {
                          start: { line: 14, column: 4, offset: 320 },
                          end: { line: 14, column: 9, offset: 325 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 14, column: 4, offset: 320 },
                      end: { line: 14, column: 9, offset: 325 }
                    }
                  }
                ],
                position: {
                  start: { line: 14, column: 2, offset: 318 },
                  end: { line: 14, column: 9, offset: 325 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'generator',
                        position: {
                          start: { line: 15, column: 4, offset: 329 },
                          end: { line: 15, column: 15, offset: 340 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 15, column: 4, offset: 329 },
                      end: { line: 15, column: 15, offset: 340 }
                    }
                  }
                ],
                position: {
                  start: { line: 15, column: 2, offset: 327 },
                  end: { line: 15, column: 15, offset: 340 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'async generator',
                        position: {
                          start: { line: 16, column: 4, offset: 344 },
                          end: { line: 16, column: 21, offset: 361 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 16, column: 4, offset: 344 },
                      end: { line: 16, column: 21, offset: 361 }
                    }
                  }
                ],
                position: {
                  start: { line: 16, column: 2, offset: 342 },
                  end: { line: 16, column: 21, offset: 361 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object with .reduce method',
                        position: {
                          start: { line: 17, column: 4, offset: 365 },
                          end: { line: 17, column: 32, offset: 393 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 17, column: 4, offset: 365 },
                      end: { line: 17, column: 32, offset: 393 }
                    }
                  }
                ],
                position: {
                  start: { line: 17, column: 2, offset: 363 },
                  end: { line: 17, column: 32, offset: 393 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object',
                        position: {
                          start: { line: 18, column: 4, offset: 397 },
                          end: { line: 18, column: 12, offset: 405 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 18, column: 4, offset: 397 },
                      end: { line: 18, column: 12, offset: 405 }
                    }
                  }
                ],
                position: {
                  start: { line: 18, column: 2, offset: 395 },
                  end: { line: 18, column: 12, offset: 405 }
                }
              }
            ],
            position: {
              start: { line: 12, column: 2, offset: 298 },
              end: { line: 18, column: 12, offset: 405 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'some',
                position: {
                  start: { line: 20, column: 1, offset: 407 },
                  end: { line: 20, column: 7, offset: 413 }
                }
              },
              {
                type: 'text',
                value: ' works for async generators.',
                position: {
                  start: { line: 20, column: 7, offset: 413 },
                  end: { line: 20, column: 35, offset: 441 }
                }
              }
            ],
            position: {
              start: { line: 20, column: 1, offset: 407 },
              end: { line: 20, column: 35, offset: 441 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "const toTodosUrl = id => 'https://jsonplaceholder.typicode.com/todos/' + id\n" +
              '\n' +
              'const fetchedToJson = fetched => fetched.json()\n' +
              '\n' +
              'const fetchTodo = pipe([\n' +
              '  toTodosUrl,\n' +
              '  fetch,\n' +
              '  fetchedToJson,\n' +
              '])\n' +
              '\n' +
              'const todoIDsGenerator = async function* () {\n' +
              '  yield 1; yield 2; yield 3; yield 4; yield 5\n' +
              '}\n' +
              '\n' +
              'const promise = some(todoIDsGenerator(), async id => {\n' +
              '  const todo = await fetchTodo(id)\n' +
              "  return todo.title.startsWith('fugiat')\n" +
              '})\n' +
              '\n' +
              'promise.then(console.log) // true',
            position: {
              start: { line: 22, column: 1, offset: 443 },
              end: { line: 43, column: 4, offset: 932 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'some',
                position: {
                  start: { line: 45, column: 1, offset: 934 },
                  end: { line: 45, column: 7, offset: 940 }
                }
              },
              {
                type: 'text',
                value: ' supports a lazy API for composability.',
                position: {
                  start: { line: 45, column: 7, offset: 940 },
                  end: { line: 45, column: 46, offset: 979 }
                }
              }
            ],
            position: {
              start: { line: 45, column: 1, offset: 934 },
              end: { line: 45, column: 46, offset: 979 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'pipe([1, 2, 3], [\n' +
              '  some(number => number < 5),\n' +
              '  console.log, // true\n' +
              '])',
            position: {
              start: { line: 47, column: 1, offset: 981 },
              end: { line: 52, column: 4, offset: 1085 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 54, column: 1, offset: 1087 },
                  end: { line: 54, column: 148, offset: 1234 }
                }
              }
            ],
            position: {
              start: { line: 54, column: 1, offset: 1087 },
              end: { line: 54, column: 148, offset: 1234 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'some(Promise.resolve([1, 2, 3, 4, 5]), n => n > 6).then(console.log) // false',
            position: {
              start: { line: 56, column: 1, offset: 1236 },
              end: { line: 58, column: 4, offset: 1344 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 60, column: 1, offset: 1346 },
                  end: { line: 60, column: 10, offset: 1355 }
                }
              }
            ],
            position: {
              start: { line: 60, column: 1, offset: 1346 },
              end: { line: 60, column: 10, offset: 1355 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map',
                        children: [
                          {
                            type: 'text',
                            value: 'map',
                            position: {
                              start: { line: 61, column: 5, offset: 1360 },
                              end: { line: 61, column: 8, offset: 1363 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 61, column: 4, offset: 1359 },
                          end: { line: 61, column: 20, offset: 1375 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 61, column: 4, offset: 1359 },
                      end: { line: 61, column: 20, offset: 1375 }
                    }
                  }
                ],
                position: {
                  start: { line: 61, column: 2, offset: 1357 },
                  end: { line: 61, column: 20, offset: 1375 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/every',
                        children: [
                          {
                            type: 'text',
                            value: 'every',
                            position: {
                              start: { line: 62, column: 5, offset: 1380 },
                              end: { line: 62, column: 10, offset: 1385 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 62, column: 4, offset: 1379 },
                          end: { line: 62, column: 24, offset: 1399 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 62, column: 4, offset: 1379 },
                      end: { line: 62, column: 24, offset: 1399 }
                    }
                  }
                ],
                position: {
                  start: { line: 62, column: 2, offset: 1377 },
                  end: { line: 62, column: 24, offset: 1399 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/and',
                        children: [
                          {
                            type: 'text',
                            value: 'and',
                            position: {
                              start: { line: 63, column: 5, offset: 1404 },
                              end: { line: 63, column: 8, offset: 1407 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 63, column: 4, offset: 1403 },
                          end: { line: 63, column: 20, offset: 1419 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 63, column: 4, offset: 1403 },
                      end: { line: 63, column: 20, offset: 1419 }
                    }
                  }
                ],
                position: {
                  start: { line: 63, column: 2, offset: 1401 },
                  end: { line: 63, column: 20, offset: 1419 }
                }
              }
            ],
            position: {
              start: { line: 61, column: 2, offset: 1357 },
              end: { line: 63, column: 20, offset: 1419 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 63, column: 20, offset: 1419 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'concurrent',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      muxing: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      },
      related: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'or',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 3, offset: 2 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 3, offset: 2 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 3, offset: 2 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/some.js'
  },
  {
    name: 'switchCase',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncPredicate = (...args)=>Promise|boolean|any\n' +
      '\n' +
      'conditionalPromisesOrValues Array<Promise|boolean|any>\n' +
      'conditionalFuncsOrPromisesOrValues Array<SyncOrAsyncPredicate|Promise|boolean|any>\n' +
      '\n' +
      'switchCase(conditionalPromisesOrValues) -> Promise|any\n' +
      'switchCase(...argsOrPromises, conditionalFuncsOrPromisesOrValues) -> Promise|any\n' +
      'switchCase(conditionalFuncsOrPromisesOrValues)(...args) -> Promise|any\n' +
      '```',
    description: 'Function equivalent to the [Conditional (ternary) operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator). Accepts an array of conditional functions that specifies cases as pairings of `predicate` and `resolver` functions with the exception of the last, default resolver. All functions are provided with the same arguments and executed in series. The result of a `switchCase` operation is either the result of the execution the last default resolver, or the result of the execution of the first resolver where the associated predicate tested true.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "const fruitIsYellow = fruit => fruit.color == 'yellow'\n" +
      '\n' +
      'console.log(\n' +
      "  switchCase({ name: 'plantain', color: 'yellow' }, [\n" +
      '    fruitIsYellow,\n' +
      "    fruit => fruit.name + ' is possibly a banana',\n" +
      "    fruit => fruit.name + ' is probably not a banana',\n" +
      '  ])\n' +
      ') // plantain is possibly a banana\n' +
      '```\n' +
      '\n' +
      'For composability `switchCase` supports a lazy API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "const fruitIsYellow = fruit => fruit.color == 'yellow'\n" +
      '\n' +
      'const fruitsGuesser = switchCase([\n' +
      '  fruitIsYellow,\n' +
      "  fruit => fruit.name + ' is possibly a banana',\n" +
      "  fruit => fruit.name + ' is probably not a banana',\n" +
      '])\n' +
      '\n' +
      "console.log(fruitsGuesser({ name: 'plantain', color: 'yellow' }))\n" +
      '// plantain is possibly a banana\n' +
      '\n' +
      "console.log(fruitsGuesser({ name: 'apple', color: 'red' }))\n" +
      '// apple is probably not a banana\n' +
      '```\n' +
      '\n' +
      'Any function can be replaced with a nonfunction (object or primitive) value to be used directly in the operation.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'switchCase(false, [\n' +
      '  async function asyncIdentity(value) {\n' +
      '    return value\n' +
      '  },\n' +
      "  'something',\n" +
      "  'default',\n" +
      ']).then(console.log) // default\n' +
      '```\n' +
      '\n' +
      'If every element in the conditional array is a nonfunction value, `switchCase` executes eagerly.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const age = 26\n' +
      '\n' +
      "const myDrink = switchCase([age >= 21, 'Beer', 'Juice'])\n" +
      '\n' +
      'console.log(myDrink) // Beer\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'switchCase(Promise.resolve(1), 2, Promise.resolve(3), [\n' +
      '  function doValuesAddUpTo6(a, b, c) {\n' +
      '    return a + b + c == 6\n' +
      '  },\n' +
      '  (a, b, c) => console.log(`${a} + ${b} + ${c} == 6`),\n' +
      '  (a, b, c) => console.log(`${a} + ${b} + ${c} != 6`),\n' +
      ']) // 1 + 2 + 3 == 6\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [tap.if](/docs/tap.if)\n' +
      ' * [tryCatch](/docs/tryCatch)\n' +
      ' * [all](/docs/all)',
    execution: 'series',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'switchCase',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncPredicate = (...args)=>Promise|boolean|any\n' +
              '\n' +
              'conditionalPromisesOrValues Array<Promise|boolean|any>\n' +
              'conditionalFuncsOrPromisesOrValues Array<SyncOrAsyncPredicate|Promise|boolean|any>\n' +
              '\n' +
              'switchCase(conditionalPromisesOrValues) -> Promise|any\n' +
              'switchCase(...argsOrPromises, conditionalFuncsOrPromisesOrValues) -> Promise|any\n' +
              'switchCase(conditionalFuncsOrPromisesOrValues)(...args) -> Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 13, column: 4, offset: 489 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 489 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Function equivalent to the ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator',
                children: [
                  {
                    type: 'text',
                    value: 'Conditional (ternary) operator',
                    position: {
                      start: { line: 1, column: 29, offset: 28 },
                      end: { line: 1, column: 59, offset: 58 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 28, offset: 27 },
                  end: { line: 1, column: 158, offset: 157 }
                }
              },
              {
                type: 'text',
                value: '. Accepts an array of conditional functions that specifies cases as pairings of ',
                position: {
                  start: { line: 1, column: 158, offset: 157 },
                  end: { line: 1, column: 238, offset: 237 }
                }
              },
              {
                type: 'inlineCode',
                value: 'predicate',
                position: {
                  start: { line: 1, column: 238, offset: 237 },
                  end: { line: 1, column: 249, offset: 248 }
                }
              },
              {
                type: 'text',
                value: ' and ',
                position: {
                  start: { line: 1, column: 249, offset: 248 },
                  end: { line: 1, column: 254, offset: 253 }
                }
              },
              {
                type: 'inlineCode',
                value: 'resolver',
                position: {
                  start: { line: 1, column: 254, offset: 253 },
                  end: { line: 1, column: 264, offset: 263 }
                }
              },
              {
                type: 'text',
                value: ' functions with the exception of the last, default resolver. All functions are provided with the same arguments and executed in series. The result of a ',
                position: {
                  start: { line: 1, column: 264, offset: 263 },
                  end: { line: 1, column: 416, offset: 415 }
                }
              },
              {
                type: 'inlineCode',
                value: 'switchCase',
                position: {
                  start: { line: 1, column: 416, offset: 415 },
                  end: { line: 1, column: 428, offset: 427 }
                }
              },
              {
                type: 'text',
                value: ' operation is either the result of the execution the last default resolver, or the result of the execution of the first resolver where the associated predicate tested true.',
                position: {
                  start: { line: 1, column: 428, offset: 427 },
                  end: { line: 1, column: 600, offset: 599 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 600, offset: 599 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "const fruitIsYellow = fruit => fruit.color == 'yellow'\n" +
              '\n' +
              'console.log(\n' +
              "  switchCase({ name: 'plantain', color: 'yellow' }, [\n" +
              '    fruitIsYellow,\n' +
              "    fruit => fruit.name + ' is possibly a banana',\n" +
              "    fruit => fruit.name + ' is probably not a banana',\n" +
              '  ])\n' +
              ') // plantain is possibly a banana',
            position: {
              start: { line: 3, column: 1, offset: 601 },
              end: { line: 13, column: 4, offset: 919 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'For composability ',
                position: {
                  start: { line: 15, column: 1, offset: 921 },
                  end: { line: 15, column: 19, offset: 939 }
                }
              },
              {
                type: 'inlineCode',
                value: 'switchCase',
                position: {
                  start: { line: 15, column: 19, offset: 939 },
                  end: { line: 15, column: 31, offset: 951 }
                }
              },
              {
                type: 'text',
                value: ' supports a lazy API.',
                position: {
                  start: { line: 15, column: 31, offset: 951 },
                  end: { line: 15, column: 52, offset: 972 }
                }
              }
            ],
            position: {
              start: { line: 15, column: 1, offset: 921 },
              end: { line: 15, column: 52, offset: 972 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "const fruitIsYellow = fruit => fruit.color == 'yellow'\n" +
              '\n' +
              'const fruitsGuesser = switchCase([\n' +
              '  fruitIsYellow,\n' +
              "  fruit => fruit.name + ' is possibly a banana',\n" +
              "  fruit => fruit.name + ' is probably not a banana',\n" +
              '])\n' +
              '\n' +
              "console.log(fruitsGuesser({ name: 'plantain', color: 'yellow' }))\n" +
              '// plantain is possibly a banana\n' +
              '\n' +
              "console.log(fruitsGuesser({ name: 'apple', color: 'red' }))\n" +
              '// apple is probably not a banana',
            position: {
              start: { line: 17, column: 1, offset: 974 },
              end: { line: 31, column: 4, offset: 1412 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any function can be replaced with a nonfunction (object or primitive) value to be used directly in the operation.',
                position: {
                  start: { line: 33, column: 1, offset: 1414 },
                  end: { line: 33, column: 114, offset: 1527 }
                }
              }
            ],
            position: {
              start: { line: 33, column: 1, offset: 1414 },
              end: { line: 33, column: 114, offset: 1527 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'switchCase(false, [\n' +
              '  async function asyncIdentity(value) {\n' +
              '    return value\n' +
              '  },\n' +
              "  'something',\n" +
              "  'default',\n" +
              ']).then(console.log) // default',
            position: {
              start: { line: 35, column: 1, offset: 1529 },
              end: { line: 43, column: 4, offset: 1701 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If every element in the conditional array is a nonfunction value, ',
                position: {
                  start: { line: 45, column: 1, offset: 1703 },
                  end: { line: 45, column: 67, offset: 1769 }
                }
              },
              {
                type: 'inlineCode',
                value: 'switchCase',
                position: {
                  start: { line: 45, column: 67, offset: 1769 },
                  end: { line: 45, column: 79, offset: 1781 }
                }
              },
              {
                type: 'text',
                value: ' executes eagerly.',
                position: {
                  start: { line: 45, column: 79, offset: 1781 },
                  end: { line: 45, column: 97, offset: 1799 }
                }
              }
            ],
            position: {
              start: { line: 45, column: 1, offset: 1703 },
              end: { line: 45, column: 97, offset: 1799 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const age = 26\n' +
              '\n' +
              "const myDrink = switchCase([age >= 21, 'Beer', 'Juice'])\n" +
              '\n' +
              'console.log(myDrink) // Beer',
            position: {
              start: { line: 47, column: 1, offset: 1801 },
              end: { line: 53, column: 4, offset: 1934 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 55, column: 1, offset: 1936 },
                  end: { line: 55, column: 148, offset: 2083 }
                }
              }
            ],
            position: {
              start: { line: 55, column: 1, offset: 1936 },
              end: { line: 55, column: 148, offset: 2083 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'switchCase(Promise.resolve(1), 2, Promise.resolve(3), [\n' +
              '  function doValuesAddUpTo6(a, b, c) {\n' +
              '    return a + b + c == 6\n' +
              '  },\n' +
              '  (a, b, c) => console.log(`${a} + ${b} + ${c} == 6`),\n' +
              '  (a, b, c) => console.log(`${a} + ${b} + ${c} != 6`),\n' +
              ']) // 1 + 2 + 3 == 6',
            position: {
              start: { line: 57, column: 1, offset: 2085 },
              end: { line: 65, column: 4, offset: 2372 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 67, column: 1, offset: 2374 },
                  end: { line: 67, column: 10, offset: 2383 }
                }
              }
            ],
            position: {
              start: { line: 67, column: 1, offset: 2374 },
              end: { line: 67, column: 10, offset: 2383 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 68, column: 5, offset: 2388 },
                              end: { line: 68, column: 9, offset: 2392 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 68, column: 4, offset: 2387 },
                          end: { line: 68, column: 22, offset: 2405 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 68, column: 4, offset: 2387 },
                      end: { line: 68, column: 22, offset: 2405 }
                    }
                  }
                ],
                position: {
                  start: { line: 68, column: 2, offset: 2385 },
                  end: { line: 68, column: 22, offset: 2405 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/tap.if',
                        children: [
                          {
                            type: 'text',
                            value: 'tap.if',
                            position: {
                              start: { line: 69, column: 5, offset: 2410 },
                              end: { line: 69, column: 11, offset: 2416 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 69, column: 4, offset: 2409 },
                          end: { line: 69, column: 26, offset: 2431 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 69, column: 4, offset: 2409 },
                      end: { line: 69, column: 26, offset: 2431 }
                    }
                  }
                ],
                position: {
                  start: { line: 69, column: 2, offset: 2407 },
                  end: { line: 69, column: 26, offset: 2431 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/tryCatch',
                        children: [
                          {
                            type: 'text',
                            value: 'tryCatch',
                            position: {
                              start: { line: 70, column: 5, offset: 2436 },
                              end: { line: 70, column: 13, offset: 2444 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 70, column: 4, offset: 2435 },
                          end: { line: 70, column: 30, offset: 2461 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 70, column: 4, offset: 2435 },
                      end: { line: 70, column: 30, offset: 2461 }
                    }
                  }
                ],
                position: {
                  start: { line: 70, column: 2, offset: 2433 },
                  end: { line: 70, column: 30, offset: 2461 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/all',
                        children: [
                          {
                            type: 'text',
                            value: 'all',
                            position: {
                              start: { line: 71, column: 5, offset: 2466 },
                              end: { line: 71, column: 8, offset: 2469 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 71, column: 4, offset: 2465 },
                          end: { line: 71, column: 20, offset: 2481 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 71, column: 4, offset: 2465 },
                      end: { line: 71, column: 20, offset: 2481 }
                    }
                  }
                ],
                position: {
                  start: { line: 71, column: 2, offset: 2463 },
                  end: { line: 71, column: 20, offset: 2481 }
                }
              }
            ],
            position: {
              start: { line: 68, column: 2, offset: 2385 },
              end: { line: 71, column: 20, offset: 2481 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 71, column: 20, offset: 2481 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'series',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/switchCase.js'
  },
  {
    name: 'tap',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncFunction = (...args)=>Promise|any\n' +
      '\n' +
      'f SyncOrAsyncFunction\n' +
      '\n' +
      'tap(...argsOrPromises, f) -> Promise|args[0]\n' +
      'tap(f)(...args) -> Promise|args[0]\n' +
      '```',
    description: 'Call a function with provided arguments, returning the first argument. The return value of the function call is discarded.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const pipeline = pipe([\n' +
      '  tap(value => console.log(value)),\n' +
      "  tap(value => console.log(value + 'bar')),\n" +
      "  tap(value => console.log(value + 'barbaz')),\n" +
      '])\n' +
      '\n' +
      "pipeline('foo') // 'foo'\n" +
      "                // 'foobar'\n" +
      "                // 'foobarbaz'\n" +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'tap(Promise.resolve(1), Promise.resolve(2), 3, console.log) // 1 2 3\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [compose](/docs/compose)\n' +
      ' * [tap.if](/docs/tap.if)\n' +
      ' * [switchCase](/docs/switchCase)\n' +
      ' * [tryCatch](/docs/tryCatch)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'tap',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 4, offset: 3 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 4, offset: 3 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncFunction = (...args)=>Promise|any\n' +
              '\n' +
              'f SyncOrAsyncFunction\n' +
              '\n' +
              'tap(...argsOrPromises, f) -> Promise|args[0]\n' +
              'tap(f)(...args) -> Promise|args[0]',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 11, column: 4, offset: 237 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 4, offset: 237 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Call a function with provided arguments, returning the first argument. The return value of the function call is discarded.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 123, offset: 122 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 123, offset: 122 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const pipeline = pipe([\n' +
              '  tap(value => console.log(value)),\n' +
              "  tap(value => console.log(value + 'bar')),\n" +
              "  tap(value => console.log(value + 'barbaz')),\n" +
              '])\n' +
              '\n' +
              "pipeline('foo') // 'foo'\n" +
              "                // 'foobar'\n" +
              "                // 'foobarbaz'",
            position: {
              start: { line: 3, column: 1, offset: 124 },
              end: { line: 13, column: 4, offset: 393 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 15, column: 1, offset: 395 },
                  end: { line: 15, column: 148, offset: 542 }
                }
              }
            ],
            position: {
              start: { line: 15, column: 1, offset: 395 },
              end: { line: 15, column: 148, offset: 542 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'tap(Promise.resolve(1), Promise.resolve(2), 3, console.log) // 1 2 3',
            position: {
              start: { line: 17, column: 1, offset: 544 },
              end: { line: 19, column: 4, offset: 643 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 21, column: 1, offset: 645 },
                  end: { line: 21, column: 10, offset: 654 }
                }
              }
            ],
            position: {
              start: { line: 21, column: 1, offset: 645 },
              end: { line: 21, column: 10, offset: 654 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 22, column: 5, offset: 659 },
                              end: { line: 22, column: 9, offset: 663 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 22, column: 4, offset: 658 },
                          end: { line: 22, column: 22, offset: 676 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 22, column: 4, offset: 658 },
                      end: { line: 22, column: 22, offset: 676 }
                    }
                  }
                ],
                position: {
                  start: { line: 22, column: 2, offset: 656 },
                  end: { line: 22, column: 22, offset: 676 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/compose',
                        children: [
                          {
                            type: 'text',
                            value: 'compose',
                            position: {
                              start: { line: 23, column: 5, offset: 681 },
                              end: { line: 23, column: 12, offset: 688 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 23, column: 4, offset: 680 },
                          end: { line: 23, column: 28, offset: 704 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 23, column: 4, offset: 680 },
                      end: { line: 23, column: 28, offset: 704 }
                    }
                  }
                ],
                position: {
                  start: { line: 23, column: 2, offset: 678 },
                  end: { line: 23, column: 28, offset: 704 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/tap.if',
                        children: [
                          {
                            type: 'text',
                            value: 'tap.if',
                            position: {
                              start: { line: 24, column: 5, offset: 709 },
                              end: { line: 24, column: 11, offset: 715 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 24, column: 4, offset: 708 },
                          end: { line: 24, column: 26, offset: 730 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 24, column: 4, offset: 708 },
                      end: { line: 24, column: 26, offset: 730 }
                    }
                  }
                ],
                position: {
                  start: { line: 24, column: 2, offset: 706 },
                  end: { line: 24, column: 26, offset: 730 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/switchCase',
                        children: [
                          {
                            type: 'text',
                            value: 'switchCase',
                            position: {
                              start: { line: 25, column: 5, offset: 735 },
                              end: { line: 25, column: 15, offset: 745 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 25, column: 4, offset: 734 },
                          end: { line: 25, column: 34, offset: 764 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 25, column: 4, offset: 734 },
                      end: { line: 25, column: 34, offset: 764 }
                    }
                  }
                ],
                position: {
                  start: { line: 25, column: 2, offset: 732 },
                  end: { line: 25, column: 34, offset: 764 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/tryCatch',
                        children: [
                          {
                            type: 'text',
                            value: 'tryCatch',
                            position: {
                              start: { line: 26, column: 5, offset: 769 },
                              end: { line: 26, column: 13, offset: 777 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 26, column: 4, offset: 768 },
                          end: { line: 26, column: 30, offset: 794 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 26, column: 4, offset: 768 },
                      end: { line: 26, column: 30, offset: 794 }
                    }
                  }
                ],
                position: {
                  start: { line: 26, column: 2, offset: 766 },
                  end: { line: 26, column: 30, offset: 794 }
                }
              }
            ],
            position: {
              start: { line: 22, column: 2, offset: 656 },
              end: { line: 26, column: 30, offset: 794 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 26, column: 30, offset: 794 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/tap.js'
  },
  {
    name: '_tapIf',
    synopsis: '```coffeescript [specscript]\n' +
      '_tapIf(\n' +
      '  predicate function,\n' +
      '  f function,\n' +
      '  args Array,\n' +
      ') -> Promise|args[0]\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_tapIf',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_tapIf(\n' +
              '  predicate function,\n' +
              '  f function,\n' +
              '  args Array,\n' +
              ') -> Promise|args[0]',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 111 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 111 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/tap.js'
  },
  {
    name: 'tap.if',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncPredicate = (...args)=>Promise|boolean|any\n' +
      'type SyncOrAsyncFunction = (...args)=>Promise|any\n' +
      '\n' +
      'predicate SyncOrAsyncPredicate\n' +
      'f SyncOrAsyncFunction\n' +
      '\n' +
      'tap.if(...argsOrPromises, predicate, f) -> Promise|args[0]\n' +
      'tap.if(predicate, f)(...args) -> Promise|args[0]\n' +
      '```',
    description: 'A version of `tap` that accepts a predicate function (a function that returns a boolean value) before the function `f` to execute. Only executes `f` if the predicate function tests true. The arguments are the same to both the predicate function and the function to execute `f`.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const isOdd = number => number % 2 == 1\n' +
      '\n' +
      'const logIfOdd = tap.if(isOdd, console.log)\n' +
      '\n' +
      'logIfOdd(2)\n' +
      'logIfOdd(3) // 3\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'tap.if(Promise.resolve(1), n => n < 5, console.log) // 1\n' +
      'tap.if(Promise.resolve(6), n => n < 5, console.log)\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [compose](/docs/compose)\n' +
      ' * [tap](/docs/tap)\n' +
      ' * [switchCase](/docs/switchCase)\n' +
      ' * [tryCatch](/docs/tryCatch)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'tap.if',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncPredicate = (...args)=>Promise|boolean|any\n' +
              'type SyncOrAsyncFunction = (...args)=>Promise|any\n' +
              '\n' +
              'predicate SyncOrAsyncPredicate\n' +
              'f SyncOrAsyncFunction\n' +
              '\n' +
              'tap.if(...argsOrPromises, predicate, f) -> Promise|args[0]\n' +
              'tap.if(predicate, f)(...args) -> Promise|args[0]',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 13, column: 4, offset: 355 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 355 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'A version of ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              },
              {
                type: 'inlineCode',
                value: 'tap',
                position: {
                  start: { line: 1, column: 14, offset: 13 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              },
              {
                type: 'text',
                value: ' that accepts a predicate function (a function that returns a boolean value) before the function ',
                position: {
                  start: { line: 1, column: 19, offset: 18 },
                  end: { line: 1, column: 116, offset: 115 }
                }
              },
              {
                type: 'inlineCode',
                value: 'f',
                position: {
                  start: { line: 1, column: 116, offset: 115 },
                  end: { line: 1, column: 119, offset: 118 }
                }
              },
              {
                type: 'text',
                value: ' to execute. Only executes ',
                position: {
                  start: { line: 1, column: 119, offset: 118 },
                  end: { line: 1, column: 146, offset: 145 }
                }
              },
              {
                type: 'inlineCode',
                value: 'f',
                position: {
                  start: { line: 1, column: 146, offset: 145 },
                  end: { line: 1, column: 149, offset: 148 }
                }
              },
              {
                type: 'text',
                value: ' if the predicate function tests true. The arguments are the same to both the predicate function and the function to execute ',
                position: {
                  start: { line: 1, column: 149, offset: 148 },
                  end: { line: 1, column: 274, offset: 273 }
                }
              },
              {
                type: 'inlineCode',
                value: 'f',
                position: {
                  start: { line: 1, column: 274, offset: 273 },
                  end: { line: 1, column: 277, offset: 276 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 1, column: 277, offset: 276 },
                  end: { line: 1, column: 278, offset: 277 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 278, offset: 277 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const isOdd = number => number % 2 == 1\n' +
              '\n' +
              'const logIfOdd = tap.if(isOdd, console.log)\n' +
              '\n' +
              'logIfOdd(2)\n' +
              'logIfOdd(3) // 3',
            position: {
              start: { line: 3, column: 1, offset: 279 },
              end: { line: 10, column: 4, offset: 424 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 12, column: 1, offset: 426 },
                  end: { line: 12, column: 148, offset: 573 }
                }
              }
            ],
            position: {
              start: { line: 12, column: 1, offset: 426 },
              end: { line: 12, column: 148, offset: 573 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'tap.if(Promise.resolve(1), n => n < 5, console.log) // 1\n' +
              'tap.if(Promise.resolve(6), n => n < 5, console.log)',
            position: {
              start: { line: 14, column: 1, offset: 575 },
              end: { line: 17, column: 4, offset: 714 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 19, column: 1, offset: 716 },
                  end: { line: 19, column: 10, offset: 725 }
                }
              }
            ],
            position: {
              start: { line: 19, column: 1, offset: 716 },
              end: { line: 19, column: 10, offset: 725 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 20, column: 5, offset: 730 },
                              end: { line: 20, column: 9, offset: 734 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 20, column: 4, offset: 729 },
                          end: { line: 20, column: 22, offset: 747 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 20, column: 4, offset: 729 },
                      end: { line: 20, column: 22, offset: 747 }
                    }
                  }
                ],
                position: {
                  start: { line: 20, column: 2, offset: 727 },
                  end: { line: 20, column: 22, offset: 747 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/compose',
                        children: [
                          {
                            type: 'text',
                            value: 'compose',
                            position: {
                              start: { line: 21, column: 5, offset: 752 },
                              end: { line: 21, column: 12, offset: 759 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 21, column: 4, offset: 751 },
                          end: { line: 21, column: 28, offset: 775 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 21, column: 4, offset: 751 },
                      end: { line: 21, column: 28, offset: 775 }
                    }
                  }
                ],
                position: {
                  start: { line: 21, column: 2, offset: 749 },
                  end: { line: 21, column: 28, offset: 775 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/tap',
                        children: [
                          {
                            type: 'text',
                            value: 'tap',
                            position: {
                              start: { line: 22, column: 5, offset: 780 },
                              end: { line: 22, column: 8, offset: 783 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 22, column: 4, offset: 779 },
                          end: { line: 22, column: 20, offset: 795 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 22, column: 4, offset: 779 },
                      end: { line: 22, column: 20, offset: 795 }
                    }
                  }
                ],
                position: {
                  start: { line: 22, column: 2, offset: 777 },
                  end: { line: 22, column: 20, offset: 795 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/switchCase',
                        children: [
                          {
                            type: 'text',
                            value: 'switchCase',
                            position: {
                              start: { line: 23, column: 5, offset: 800 },
                              end: { line: 23, column: 15, offset: 810 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 23, column: 4, offset: 799 },
                          end: { line: 23, column: 34, offset: 829 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 23, column: 4, offset: 799 },
                      end: { line: 23, column: 34, offset: 829 }
                    }
                  }
                ],
                position: {
                  start: { line: 23, column: 2, offset: 797 },
                  end: { line: 23, column: 34, offset: 829 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/tryCatch',
                        children: [
                          {
                            type: 'text',
                            value: 'tryCatch',
                            position: {
                              start: { line: 24, column: 5, offset: 834 },
                              end: { line: 24, column: 13, offset: 842 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 24, column: 4, offset: 833 },
                          end: { line: 24, column: 30, offset: 859 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 24, column: 4, offset: 833 },
                      end: { line: 24, column: 30, offset: 859 }
                    }
                  }
                ],
                position: {
                  start: { line: 24, column: 2, offset: 831 },
                  end: { line: 24, column: 30, offset: 859 }
                }
              }
            ],
            position: {
              start: { line: 20, column: 2, offset: 727 },
              end: { line: 24, column: 30, offset: 859 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 24, column: 30, offset: 859 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/tap.js'
  },
  {
    name: 'thunkify',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      '\n' +
      'thunkify(func function, ...args) -> thunk ()=>func(...args)\n' +
      '```',
    description: 'Create a thunk function from another function and any number of arguments. The thunk function takes no arguments, and when called, executes the other function with the provided arguments. The other function is said to be "thunkified".\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const add = (a, b) => a + b\n' +
      '\n' +
      'const thunkAdd12 = thunkify(add, 1, 2)\n' +
      '\n' +
      'console.log(thunkAdd12()) // 3\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [eq](/docs/eq)\n' +
      ' * [always](/docs/always)\n' +
      ' * [curry](/docs/curry)\n' +
      ' * [__](/docs/__)\n' +
      ' * [Transducer.map](/docs/Transducer.map)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'thunkify',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              '\n' +
              'thunkify(func function, ...args) -> thunk ()=>func(...args)',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 109 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 109 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create a thunk function from another function and any number of arguments. The thunk function takes no arguments, and when called, executes the other function with the provided arguments. The other function is said to be "thunkified".',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 235, offset: 234 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 235, offset: 234 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const add = (a, b) => a + b\n' +
              '\n' +
              'const thunkAdd12 = thunkify(add, 1, 2)\n' +
              '\n' +
              'console.log(thunkAdd12()) // 3',
            position: {
              start: { line: 3, column: 1, offset: 236 },
              end: { line: 9, column: 4, offset: 366 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 11, column: 1, offset: 368 },
                  end: { line: 11, column: 10, offset: 377 }
                }
              }
            ],
            position: {
              start: { line: 11, column: 1, offset: 368 },
              end: { line: 11, column: 10, offset: 377 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/eq',
                        children: [
                          {
                            type: 'text',
                            value: 'eq',
                            position: {
                              start: { line: 12, column: 5, offset: 382 },
                              end: { line: 12, column: 7, offset: 384 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 12, column: 4, offset: 381 },
                          end: { line: 12, column: 18, offset: 395 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 12, column: 4, offset: 381 },
                      end: { line: 12, column: 18, offset: 395 }
                    }
                  }
                ],
                position: {
                  start: { line: 12, column: 2, offset: 379 },
                  end: { line: 12, column: 18, offset: 395 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/always',
                        children: [
                          {
                            type: 'text',
                            value: 'always',
                            position: {
                              start: { line: 13, column: 5, offset: 400 },
                              end: { line: 13, column: 11, offset: 406 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 13, column: 4, offset: 399 },
                          end: { line: 13, column: 26, offset: 421 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 13, column: 4, offset: 399 },
                      end: { line: 13, column: 26, offset: 421 }
                    }
                  }
                ],
                position: {
                  start: { line: 13, column: 2, offset: 397 },
                  end: { line: 13, column: 26, offset: 421 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/curry',
                        children: [
                          {
                            type: 'text',
                            value: 'curry',
                            position: {
                              start: { line: 14, column: 5, offset: 426 },
                              end: { line: 14, column: 10, offset: 431 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 14, column: 4, offset: 425 },
                          end: { line: 14, column: 24, offset: 445 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 14, column: 4, offset: 425 },
                      end: { line: 14, column: 24, offset: 445 }
                    }
                  }
                ],
                position: {
                  start: { line: 14, column: 2, offset: 423 },
                  end: { line: 14, column: 24, offset: 445 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/__',
                        children: [
                          {
                            type: 'text',
                            value: '__',
                            position: {
                              start: { line: 15, column: 5, offset: 450 },
                              end: { line: 15, column: 7, offset: 452 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 15, column: 4, offset: 449 },
                          end: { line: 15, column: 18, offset: 463 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 15, column: 4, offset: 449 },
                      end: { line: 15, column: 18, offset: 463 }
                    }
                  }
                ],
                position: {
                  start: { line: 15, column: 2, offset: 447 },
                  end: { line: 15, column: 18, offset: 463 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/Transducer.map',
                        children: [
                          {
                            type: 'text',
                            value: 'Transducer.map',
                            position: {
                              start: { line: 16, column: 5, offset: 468 },
                              end: { line: 16, column: 19, offset: 482 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 16, column: 4, offset: 467 },
                          end: { line: 16, column: 42, offset: 505 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 16, column: 4, offset: 467 },
                      end: { line: 16, column: 42, offset: 505 }
                    }
                  }
                ],
                position: {
                  start: { line: 16, column: 2, offset: 465 },
                  end: { line: 16, column: 42, offset: 505 }
                }
              }
            ],
            position: {
              start: { line: 12, column: 2, offset: 379 },
              end: { line: 16, column: 42, offset: 505 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 16, column: 42, offset: 505 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/thunkify.js'
  },
  {
    name: 'transform',
    synopsis: '```coffeescript [specscript]\n' +
      'type Foldable = Array|Set|Map|Generator|AsyncGenerator|{ reduce: function }|Object\n' +
      'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
      'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
      '\n' +
      'type Semigroup =\n' +
      '  Array|String|Set|TypedArray|{ concat: function }|{ write: function }|Object\n' +
      '\n' +
      'type UnarySyncOrAsyncSemigroupResolver = any=>Promise|Semigroup\n' +
      '\n' +
      'transducer Transducer\n' +
      'initial UnarySyncOrAsyncSemigroupResolver|Semigroup\n' +
      '\n' +
      'transform(foldable Promise|Foldable, transducer, initial?) -> result Promise|Semigroup\n' +
      'transform(transducer, initial?)(foldable Foldable) -> result Promise|Semigroup\n' +
      '```',
    description: 'Transforms a foldable with [transducers](https://rubico.land/blog/transducers-crash-course-rubico-v2) into a semigroup.\n' +
      '\n' +
      'The following data types are considered to be foldables:\n' +
      ' * `array`\n' +
      ' * `set`\n' +
      ' * `map`\n' +
      ' * `generator`\n' +
      ' * `async generator`\n' +
      ' * `object with .reduce method`\n' +
      ' * `object`\n' +
      '\n' +
      "Transducers, due to their lazy nature, don't have knowledge of the foldable they are transforming. As such, the transducer signature for all foldables is the same:\n" +
      '\n' +
      '```coffeescript [specscript]\n' +
      'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
      'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
      '```\n' +
      '\n' +
      'The following data types are considered to be semigroups:\n' +
      ' * `array`\n' +
      ' * `string`\n' +
      ' * `set`\n' +
      ' * `binary`\n' +
      ' * `{ concat: function }`\n' +
      ' * `{ write: function }`\n' +
      ' * `object`\n' +
      '\n' +
      'The concatenation operation changes depending on the provided semigroup:\n' +
      '\n' +
      'If the semigroup is an array, concatenation is defined as:\n' +
      '```javascript\n' +
      'nextAccumulator = accumulator.concat(values)\n' +
      '```\n' +
      '\n' +
      'If the semigroup is a string, concatenation is defined as:\n' +
      '```javascript\n' +
      'nextAccumulator = accumulator + values\n' +
      '```\n' +
      '\n' +
      'If the semigroup is a set, concatenation is defined as:\n' +
      '```javascript\n' +
      'nextAccumulator = accumulator.add(...values)\n' +
      '```\n' +
      '\n' +
      'If the semigroup is binary, concatenation is defined as:\n' +
      '```javascript\n' +
      'nextAccumulator = new accumulator.constructor(accumulator.length + values.length)\n' +
      'nextAccumulator.set(accumulator)\n' +
      'nextAccumulator.set(values, accumulator.length)\n' +
      '```\n' +
      '\n' +
      'If the semigroup is an object with a `.concat` method, concatenation is defined as:\n' +
      '```javascript\n' +
      'nextAccumulator = accumulator\n' +
      'accumulator.concat(values)\n' +
      '```\n' +
      '\n' +
      'If the semigroup is an object with a `.write` method, concatenation is defined as:\n' +
      '```javascript\n' +
      'nextAccumulator = accumulator\n' +
      'accumulator.write(values)\n' +
      '```\n' +
      '\n' +
      'If the semigroup is a plain object, concatenation is defined as:\n' +
      '```javascript\n' +
      'nextAccumulator = ({ ...accumulator, ...values })\n' +
      '```\n' +
      '\n' +
      '`transform` transforms numbers from an array into another array.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const square = number => number ** 2\n' +
      '\n' +
      'const isOdd = number => number % 2 == 1\n' +
      '\n' +
      'const squaredOdds = compose([\n' +
      '  Transducer.filter(isOdd),\n' +
      '  Transducer.map(square),\n' +
      '])\n' +
      '\n' +
      '// transform arrays into arrays\n' +
      'console.log(\n' +
      '  transform([1, 2, 3, 4, 5], squaredOdds, [])\n' +
      ') // [1, 9, 25]\n' +
      '\n' +
      '// transform arrays into strings\n' +
      'console.log(\n' +
      "  transform([1, 2, 3, 4, 5], squaredOdds, '')\n" +
      ") // '1925'\n" +
      '\n' +
      '// transform arrays into sets\n' +
      'console.log(\n' +
      '  transform([1, 2, 3, 4, 5], squaredOdds, new Set())\n' +
      ') // Set (3) { 1, 9, 25 }\n' +
      '\n' +
      '// transform arrays into typed arrays\n' +
      'console.log(\n' +
      '  transform([1, 2, 3, 4, 5], squaredOdds, new Uint8Array()),\n' +
      ') // Uint8Array(3) [ 1, 9, 25 ]\n' +
      '```\n' +
      '\n' +
      '`transform` transforms arrays into objects that implement `.concat`.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const square = number => number ** 2\n' +
      '\n' +
      'const Stdout = {\n' +
      '  concat(...args) {\n' +
      '    console.log(...args)\n' +
      '    return this\n' +
      '  },\n' +
      '}\n' +
      '\n' +
      'transform([1, 2, 3, 4, 5], Transducer.map(square), Stdout)\n' +
      '// 1\n' +
      '// 4\n' +
      '// 9\n' +
      '// 16\n' +
      '// 25\n' +
      '```\n' +
      '\n' +
      '`transform` transforms an async generator into `process.stdout`, a Node.js writable stream that implements `.write`.\n' +
      '\n' +
      '```javascript\n' +
      'const { pipe, compose, transform } = rubico\n' +
      '// global Transducer\n' +
      '\n' +
      'const square = number => number ** 2\n' +
      '\n' +
      'const toString = value => value.toString()\n' +
      '\n' +
      'const randomInt = () => Math.ceil(Math.random() * 100)\n' +
      '\n' +
      'const streamRandomInts = async function* (n) {\n' +
      '  let ct = 0\n' +
      '  while (ct < n) {\n' +
      '    ct += 1\n' +
      '    yield randomInt()\n' +
      '  }\n' +
      '}\n' +
      '\n' +
      'transform(\n' +
      '  streamRandomInts(10),\n' +
      '  compose([\n' +
      '    Transducer.map(square),\n' +
      '    Transducer.map(toString),\n' +
      '  ]),\n' +
      '  process.stdout // 2893600784289441449001600409684644624324923044411225\n' +
      ')\n' +
      '```\n' +
      '\n' +
      'If the initial value is a function it is treated as a resolver of the semigroup. The resolver may be asynchronous.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const promise = transform(\n' +
      '  [1, 2, 3, 4, 5],\n' +
      '  Transducer.map(number => number ** 2),\n' +
      "  async () => ['a'],\n" +
      ')\n' +
      '\n' +
      'promise.then(console.log)\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const promise = transform(\n' +
      '  Promise.resolve([1, 2, 3, 4, 5]),\n' +
      '  Transducer.map(n => n ** 2),\n' +
      '  [],\n' +
      ')\n' +
      '\n' +
      'promise.then(console.log) // [1, 4, 9, 16, 25]\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [forEach](/docs/forEach)\n' +
      ' * [map](/docs/map)\n' +
      ' * [filter](/docs/filter)\n' +
      ' * [reduce](/docs/reduce)\n' +
      ' * [flatMap](/docs/flatMap)\n' +
      ' * [some](/docs/some)',
    execution: 'series',
    transducing: 'TODO explore Semigroup = Iterator|AsyncIterator',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'transform',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type Foldable = Array|Set|Map|Generator|AsyncGenerator|{ reduce: function }|Object\n' +
              'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
              'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer\n' +
              '\n' +
              'type Semigroup =\n' +
              '  Array|String|Set|TypedArray|{ concat: function }|{ write: function }|Object\n' +
              '\n' +
              'type UnarySyncOrAsyncSemigroupResolver = any=>Promise|Semigroup\n' +
              '\n' +
              'transducer Transducer\n' +
              'initial UnarySyncOrAsyncSemigroupResolver|Semigroup\n' +
              '\n' +
              'transform(foldable Promise|Foldable, transducer, initial?) -> result Promise|Semigroup\n' +
              'transform(transducer, initial?)(foldable Foldable) -> result Promise|Semigroup',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 16, column: 4, offset: 661 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 16, column: 4, offset: 661 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Transforms a foldable with ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'https://rubico.land/blog/transducers-crash-course-rubico-v2',
                children: [
                  {
                    type: 'text',
                    value: 'transducers',
                    position: {
                      start: { line: 1, column: 29, offset: 28 },
                      end: { line: 1, column: 40, offset: 39 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 28, offset: 27 },
                  end: { line: 1, column: 102, offset: 101 }
                }
              },
              {
                type: 'text',
                value: ' into a semigroup.',
                position: {
                  start: { line: 1, column: 102, offset: 101 },
                  end: { line: 1, column: 120, offset: 119 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 120, offset: 119 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The following data types are considered to be foldables:',
                position: {
                  start: { line: 3, column: 1, offset: 121 },
                  end: { line: 3, column: 57, offset: 177 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 121 },
              end: { line: 3, column: 57, offset: 177 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'array',
                        position: {
                          start: { line: 4, column: 4, offset: 181 },
                          end: { line: 4, column: 11, offset: 188 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 4, column: 4, offset: 181 },
                      end: { line: 4, column: 11, offset: 188 }
                    }
                  }
                ],
                position: {
                  start: { line: 4, column: 2, offset: 179 },
                  end: { line: 4, column: 11, offset: 188 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'set',
                        position: {
                          start: { line: 5, column: 4, offset: 192 },
                          end: { line: 5, column: 9, offset: 197 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 5, column: 4, offset: 192 },
                      end: { line: 5, column: 9, offset: 197 }
                    }
                  }
                ],
                position: {
                  start: { line: 5, column: 2, offset: 190 },
                  end: { line: 5, column: 9, offset: 197 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'map',
                        position: {
                          start: { line: 6, column: 4, offset: 201 },
                          end: { line: 6, column: 9, offset: 206 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 6, column: 4, offset: 201 },
                      end: { line: 6, column: 9, offset: 206 }
                    }
                  }
                ],
                position: {
                  start: { line: 6, column: 2, offset: 199 },
                  end: { line: 6, column: 9, offset: 206 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'generator',
                        position: {
                          start: { line: 7, column: 4, offset: 210 },
                          end: { line: 7, column: 15, offset: 221 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 7, column: 4, offset: 210 },
                      end: { line: 7, column: 15, offset: 221 }
                    }
                  }
                ],
                position: {
                  start: { line: 7, column: 2, offset: 208 },
                  end: { line: 7, column: 15, offset: 221 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'async generator',
                        position: {
                          start: { line: 8, column: 4, offset: 225 },
                          end: { line: 8, column: 21, offset: 242 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 8, column: 4, offset: 225 },
                      end: { line: 8, column: 21, offset: 242 }
                    }
                  }
                ],
                position: {
                  start: { line: 8, column: 2, offset: 223 },
                  end: { line: 8, column: 21, offset: 242 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object with .reduce method',
                        position: {
                          start: { line: 9, column: 4, offset: 246 },
                          end: { line: 9, column: 32, offset: 274 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 9, column: 4, offset: 246 },
                      end: { line: 9, column: 32, offset: 274 }
                    }
                  }
                ],
                position: {
                  start: { line: 9, column: 2, offset: 244 },
                  end: { line: 9, column: 32, offset: 274 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object',
                        position: {
                          start: { line: 10, column: 4, offset: 278 },
                          end: { line: 10, column: 12, offset: 286 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 10, column: 4, offset: 278 },
                      end: { line: 10, column: 12, offset: 286 }
                    }
                  }
                ],
                position: {
                  start: { line: 10, column: 2, offset: 276 },
                  end: { line: 10, column: 12, offset: 286 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 2, offset: 179 },
              end: { line: 10, column: 12, offset: 286 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "Transducers, due to their lazy nature, don't have knowledge of the foldable they are transforming. As such, the transducer signature for all foldables is the same:",
                position: {
                  start: { line: 12, column: 1, offset: 288 },
                  end: { line: 12, column: 164, offset: 451 }
                }
              }
            ],
            position: {
              start: { line: 12, column: 1, offset: 288 },
              end: { line: 12, column: 164, offset: 451 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'type SyncOrAsyncReducer = (accumulator any, value any)=>(nextAccumulator Promise|any)\n' +
              'type Transducer = SyncOrAsyncReducer=>SyncOrAsyncReducer',
            position: {
              start: { line: 14, column: 1, offset: 453 },
              end: { line: 17, column: 4, offset: 628 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The following data types are considered to be semigroups:',
                position: {
                  start: { line: 19, column: 1, offset: 630 },
                  end: { line: 19, column: 58, offset: 687 }
                }
              }
            ],
            position: {
              start: { line: 19, column: 1, offset: 630 },
              end: { line: 19, column: 58, offset: 687 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'array',
                        position: {
                          start: { line: 20, column: 4, offset: 691 },
                          end: { line: 20, column: 11, offset: 698 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 20, column: 4, offset: 691 },
                      end: { line: 20, column: 11, offset: 698 }
                    }
                  }
                ],
                position: {
                  start: { line: 20, column: 2, offset: 689 },
                  end: { line: 20, column: 11, offset: 698 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'string',
                        position: {
                          start: { line: 21, column: 4, offset: 702 },
                          end: { line: 21, column: 12, offset: 710 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 21, column: 4, offset: 702 },
                      end: { line: 21, column: 12, offset: 710 }
                    }
                  }
                ],
                position: {
                  start: { line: 21, column: 2, offset: 700 },
                  end: { line: 21, column: 12, offset: 710 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'set',
                        position: {
                          start: { line: 22, column: 4, offset: 714 },
                          end: { line: 22, column: 9, offset: 719 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 22, column: 4, offset: 714 },
                      end: { line: 22, column: 9, offset: 719 }
                    }
                  }
                ],
                position: {
                  start: { line: 22, column: 2, offset: 712 },
                  end: { line: 22, column: 9, offset: 719 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'binary',
                        position: {
                          start: { line: 23, column: 4, offset: 723 },
                          end: { line: 23, column: 12, offset: 731 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 23, column: 4, offset: 723 },
                      end: { line: 23, column: 12, offset: 731 }
                    }
                  }
                ],
                position: {
                  start: { line: 23, column: 2, offset: 721 },
                  end: { line: 23, column: 12, offset: 731 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: '{ concat: function }',
                        position: {
                          start: { line: 24, column: 4, offset: 735 },
                          end: { line: 24, column: 26, offset: 757 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 24, column: 4, offset: 735 },
                      end: { line: 24, column: 26, offset: 757 }
                    }
                  }
                ],
                position: {
                  start: { line: 24, column: 2, offset: 733 },
                  end: { line: 24, column: 26, offset: 757 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: '{ write: function }',
                        position: {
                          start: { line: 25, column: 4, offset: 761 },
                          end: { line: 25, column: 25, offset: 782 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 25, column: 4, offset: 761 },
                      end: { line: 25, column: 25, offset: 782 }
                    }
                  }
                ],
                position: {
                  start: { line: 25, column: 2, offset: 759 },
                  end: { line: 25, column: 25, offset: 782 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'inlineCode',
                        value: 'object',
                        position: {
                          start: { line: 26, column: 4, offset: 786 },
                          end: { line: 26, column: 12, offset: 794 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 26, column: 4, offset: 786 },
                      end: { line: 26, column: 12, offset: 794 }
                    }
                  }
                ],
                position: {
                  start: { line: 26, column: 2, offset: 784 },
                  end: { line: 26, column: 12, offset: 794 }
                }
              }
            ],
            position: {
              start: { line: 20, column: 2, offset: 689 },
              end: { line: 26, column: 12, offset: 794 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The concatenation operation changes depending on the provided semigroup:',
                position: {
                  start: { line: 28, column: 1, offset: 796 },
                  end: { line: 28, column: 73, offset: 868 }
                }
              }
            ],
            position: {
              start: { line: 28, column: 1, offset: 796 },
              end: { line: 28, column: 73, offset: 868 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the semigroup is an array, concatenation is defined as:',
                position: {
                  start: { line: 30, column: 1, offset: 870 },
                  end: { line: 30, column: 59, offset: 928 }
                }
              }
            ],
            position: {
              start: { line: 30, column: 1, offset: 870 },
              end: { line: 30, column: 59, offset: 928 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: 'nextAccumulator = accumulator.concat(values)',
            position: {
              start: { line: 31, column: 1, offset: 929 },
              end: { line: 33, column: 4, offset: 991 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the semigroup is a string, concatenation is defined as:',
                position: {
                  start: { line: 35, column: 1, offset: 993 },
                  end: { line: 35, column: 59, offset: 1051 }
                }
              }
            ],
            position: {
              start: { line: 35, column: 1, offset: 993 },
              end: { line: 35, column: 59, offset: 1051 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: 'nextAccumulator = accumulator + values',
            position: {
              start: { line: 36, column: 1, offset: 1052 },
              end: { line: 38, column: 4, offset: 1108 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the semigroup is a set, concatenation is defined as:',
                position: {
                  start: { line: 40, column: 1, offset: 1110 },
                  end: { line: 40, column: 56, offset: 1165 }
                }
              }
            ],
            position: {
              start: { line: 40, column: 1, offset: 1110 },
              end: { line: 40, column: 56, offset: 1165 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: 'nextAccumulator = accumulator.add(...values)',
            position: {
              start: { line: 41, column: 1, offset: 1166 },
              end: { line: 43, column: 4, offset: 1228 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the semigroup is binary, concatenation is defined as:',
                position: {
                  start: { line: 45, column: 1, offset: 1230 },
                  end: { line: 45, column: 57, offset: 1286 }
                }
              }
            ],
            position: {
              start: { line: 45, column: 1, offset: 1230 },
              end: { line: 45, column: 57, offset: 1286 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: 'nextAccumulator = new accumulator.constructor(accumulator.length + values.length)\n' +
              'nextAccumulator.set(accumulator)\n' +
              'nextAccumulator.set(values, accumulator.length)',
            position: {
              start: { line: 46, column: 1, offset: 1287 },
              end: { line: 50, column: 4, offset: 1467 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the semigroup is an object with a ',
                position: {
                  start: { line: 52, column: 1, offset: 1469 },
                  end: { line: 52, column: 38, offset: 1506 }
                }
              },
              {
                type: 'inlineCode',
                value: '.concat',
                position: {
                  start: { line: 52, column: 38, offset: 1506 },
                  end: { line: 52, column: 47, offset: 1515 }
                }
              },
              {
                type: 'text',
                value: ' method, concatenation is defined as:',
                position: {
                  start: { line: 52, column: 47, offset: 1515 },
                  end: { line: 52, column: 84, offset: 1552 }
                }
              }
            ],
            position: {
              start: { line: 52, column: 1, offset: 1469 },
              end: { line: 52, column: 84, offset: 1552 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: 'nextAccumulator = accumulator\naccumulator.concat(values)',
            position: {
              start: { line: 53, column: 1, offset: 1553 },
              end: { line: 56, column: 4, offset: 1627 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the semigroup is an object with a ',
                position: {
                  start: { line: 58, column: 1, offset: 1629 },
                  end: { line: 58, column: 38, offset: 1666 }
                }
              },
              {
                type: 'inlineCode',
                value: '.write',
                position: {
                  start: { line: 58, column: 38, offset: 1666 },
                  end: { line: 58, column: 46, offset: 1674 }
                }
              },
              {
                type: 'text',
                value: ' method, concatenation is defined as:',
                position: {
                  start: { line: 58, column: 46, offset: 1674 },
                  end: { line: 58, column: 83, offset: 1711 }
                }
              }
            ],
            position: {
              start: { line: 58, column: 1, offset: 1629 },
              end: { line: 58, column: 83, offset: 1711 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: 'nextAccumulator = accumulator\naccumulator.write(values)',
            position: {
              start: { line: 59, column: 1, offset: 1712 },
              end: { line: 62, column: 4, offset: 1785 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the semigroup is a plain object, concatenation is defined as:',
                position: {
                  start: { line: 64, column: 1, offset: 1787 },
                  end: { line: 64, column: 65, offset: 1851 }
                }
              }
            ],
            position: {
              start: { line: 64, column: 1, offset: 1787 },
              end: { line: 64, column: 65, offset: 1851 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: 'nextAccumulator = ({ ...accumulator, ...values })',
            position: {
              start: { line: 65, column: 1, offset: 1852 },
              end: { line: 67, column: 4, offset: 1919 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'transform',
                position: {
                  start: { line: 69, column: 1, offset: 1921 },
                  end: { line: 69, column: 12, offset: 1932 }
                }
              },
              {
                type: 'text',
                value: ' transforms numbers from an array into another array.',
                position: {
                  start: { line: 69, column: 12, offset: 1932 },
                  end: { line: 69, column: 65, offset: 1985 }
                }
              }
            ],
            position: {
              start: { line: 69, column: 1, offset: 1921 },
              end: { line: 69, column: 65, offset: 1985 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const square = number => number ** 2\n' +
              '\n' +
              'const isOdd = number => number % 2 == 1\n' +
              '\n' +
              'const squaredOdds = compose([\n' +
              '  Transducer.filter(isOdd),\n' +
              '  Transducer.map(square),\n' +
              '])\n' +
              '\n' +
              '// transform arrays into arrays\n' +
              'console.log(\n' +
              '  transform([1, 2, 3, 4, 5], squaredOdds, [])\n' +
              ') // [1, 9, 25]\n' +
              '\n' +
              '// transform arrays into strings\n' +
              'console.log(\n' +
              "  transform([1, 2, 3, 4, 5], squaredOdds, '')\n" +
              ") // '1925'\n" +
              '\n' +
              '// transform arrays into sets\n' +
              'console.log(\n' +
              '  transform([1, 2, 3, 4, 5], squaredOdds, new Set())\n' +
              ') // Set (3) { 1, 9, 25 }\n' +
              '\n' +
              '// transform arrays into typed arrays\n' +
              'console.log(\n' +
              '  transform([1, 2, 3, 4, 5], squaredOdds, new Uint8Array()),\n' +
              ') // Uint8Array(3) [ 1, 9, 25 ]',
            position: {
              start: { line: 71, column: 1, offset: 1987 },
              end: { line: 100, column: 4, offset: 2664 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'transform',
                position: {
                  start: { line: 102, column: 1, offset: 2666 },
                  end: { line: 102, column: 12, offset: 2677 }
                }
              },
              {
                type: 'text',
                value: ' transforms arrays into objects that implement ',
                position: {
                  start: { line: 102, column: 12, offset: 2677 },
                  end: { line: 102, column: 59, offset: 2724 }
                }
              },
              {
                type: 'inlineCode',
                value: '.concat',
                position: {
                  start: { line: 102, column: 59, offset: 2724 },
                  end: { line: 102, column: 68, offset: 2733 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 102, column: 68, offset: 2733 },
                  end: { line: 102, column: 69, offset: 2734 }
                }
              }
            ],
            position: {
              start: { line: 102, column: 1, offset: 2666 },
              end: { line: 102, column: 69, offset: 2734 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const square = number => number ** 2\n' +
              '\n' +
              'const Stdout = {\n' +
              '  concat(...args) {\n' +
              '    console.log(...args)\n' +
              '    return this\n' +
              '  },\n' +
              '}\n' +
              '\n' +
              'transform([1, 2, 3, 4, 5], Transducer.map(square), Stdout)\n' +
              '// 1\n' +
              '// 4\n' +
              '// 9\n' +
              '// 16\n' +
              '// 25',
            position: {
              start: { line: 104, column: 1, offset: 2736 },
              end: { line: 120, column: 4, offset: 2976 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'transform',
                position: {
                  start: { line: 122, column: 1, offset: 2978 },
                  end: { line: 122, column: 12, offset: 2989 }
                }
              },
              {
                type: 'text',
                value: ' transforms an async generator into ',
                position: {
                  start: { line: 122, column: 12, offset: 2989 },
                  end: { line: 122, column: 48, offset: 3025 }
                }
              },
              {
                type: 'inlineCode',
                value: 'process.stdout',
                position: {
                  start: { line: 122, column: 48, offset: 3025 },
                  end: { line: 122, column: 64, offset: 3041 }
                }
              },
              {
                type: 'text',
                value: ', a Node.js writable stream that implements ',
                position: {
                  start: { line: 122, column: 64, offset: 3041 },
                  end: { line: 122, column: 108, offset: 3085 }
                }
              },
              {
                type: 'inlineCode',
                value: '.write',
                position: {
                  start: { line: 122, column: 108, offset: 3085 },
                  end: { line: 122, column: 116, offset: 3093 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 122, column: 116, offset: 3093 },
                  end: { line: 122, column: 117, offset: 3094 }
                }
              }
            ],
            position: {
              start: { line: 122, column: 1, offset: 2978 },
              end: { line: 122, column: 117, offset: 3094 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: 'const { pipe, compose, transform } = rubico\n' +
              '// global Transducer\n' +
              '\n' +
              'const square = number => number ** 2\n' +
              '\n' +
              'const toString = value => value.toString()\n' +
              '\n' +
              'const randomInt = () => Math.ceil(Math.random() * 100)\n' +
              '\n' +
              'const streamRandomInts = async function* (n) {\n' +
              '  let ct = 0\n' +
              '  while (ct < n) {\n' +
              '    ct += 1\n' +
              '    yield randomInt()\n' +
              '  }\n' +
              '}\n' +
              '\n' +
              'transform(\n' +
              '  streamRandomInts(10),\n' +
              '  compose([\n' +
              '    Transducer.map(square),\n' +
              '    Transducer.map(toString),\n' +
              '  ]),\n' +
              '  process.stdout // 2893600784289441449001600409684644624324923044411225\n' +
              ')',
            position: {
              start: { line: 124, column: 1, offset: 3096 },
              end: { line: 150, column: 4, offset: 3623 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the initial value is a function it is treated as a resolver of the semigroup. The resolver may be asynchronous.',
                position: {
                  start: { line: 152, column: 1, offset: 3625 },
                  end: { line: 152, column: 115, offset: 3739 }
                }
              }
            ],
            position: {
              start: { line: 152, column: 1, offset: 3625 },
              end: { line: 152, column: 115, offset: 3739 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const promise = transform(\n' +
              '  [1, 2, 3, 4, 5],\n' +
              '  Transducer.map(number => number ** 2),\n' +
              "  async () => ['a'],\n" +
              ')\n' +
              '\n' +
              'promise.then(console.log)',
            position: {
              start: { line: 154, column: 1, offset: 3741 },
              end: { line: 162, column: 4, offset: 3908 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 164, column: 1, offset: 3910 },
                  end: { line: 164, column: 148, offset: 4057 }
                }
              }
            ],
            position: {
              start: { line: 164, column: 1, offset: 3910 },
              end: { line: 164, column: 148, offset: 4057 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const promise = transform(\n' +
              '  Promise.resolve([1, 2, 3, 4, 5]),\n' +
              '  Transducer.map(n => n ** 2),\n' +
              '  [],\n' +
              ')\n' +
              '\n' +
              'promise.then(console.log) // [1, 4, 9, 16, 25]',
            position: {
              start: { line: 166, column: 1, offset: 4059 },
              end: { line: 174, column: 4, offset: 4239 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 176, column: 1, offset: 4241 },
                  end: { line: 176, column: 10, offset: 4250 }
                }
              }
            ],
            position: {
              start: { line: 176, column: 1, offset: 4241 },
              end: { line: 176, column: 10, offset: 4250 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/forEach',
                        children: [
                          {
                            type: 'text',
                            value: 'forEach',
                            position: {
                              start: { line: 177, column: 5, offset: 4255 },
                              end: { line: 177, column: 12, offset: 4262 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 177, column: 4, offset: 4254 },
                          end: { line: 177, column: 28, offset: 4278 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 177, column: 4, offset: 4254 },
                      end: { line: 177, column: 28, offset: 4278 }
                    }
                  }
                ],
                position: {
                  start: { line: 177, column: 2, offset: 4252 },
                  end: { line: 177, column: 28, offset: 4278 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/map',
                        children: [
                          {
                            type: 'text',
                            value: 'map',
                            position: {
                              start: { line: 178, column: 5, offset: 4283 },
                              end: { line: 178, column: 8, offset: 4286 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 178, column: 4, offset: 4282 },
                          end: { line: 178, column: 20, offset: 4298 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 178, column: 4, offset: 4282 },
                      end: { line: 178, column: 20, offset: 4298 }
                    }
                  }
                ],
                position: {
                  start: { line: 178, column: 2, offset: 4280 },
                  end: { line: 178, column: 20, offset: 4298 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/filter',
                        children: [
                          {
                            type: 'text',
                            value: 'filter',
                            position: {
                              start: { line: 179, column: 5, offset: 4303 },
                              end: { line: 179, column: 11, offset: 4309 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 179, column: 4, offset: 4302 },
                          end: { line: 179, column: 26, offset: 4324 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 179, column: 4, offset: 4302 },
                      end: { line: 179, column: 26, offset: 4324 }
                    }
                  }
                ],
                position: {
                  start: { line: 179, column: 2, offset: 4300 },
                  end: { line: 179, column: 26, offset: 4324 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/reduce',
                        children: [
                          {
                            type: 'text',
                            value: 'reduce',
                            position: {
                              start: { line: 180, column: 5, offset: 4329 },
                              end: { line: 180, column: 11, offset: 4335 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 180, column: 4, offset: 4328 },
                          end: { line: 180, column: 26, offset: 4350 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 180, column: 4, offset: 4328 },
                      end: { line: 180, column: 26, offset: 4350 }
                    }
                  }
                ],
                position: {
                  start: { line: 180, column: 2, offset: 4326 },
                  end: { line: 180, column: 26, offset: 4350 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/flatMap',
                        children: [
                          {
                            type: 'text',
                            value: 'flatMap',
                            position: {
                              start: { line: 181, column: 5, offset: 4355 },
                              end: { line: 181, column: 12, offset: 4362 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 181, column: 4, offset: 4354 },
                          end: { line: 181, column: 28, offset: 4378 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 181, column: 4, offset: 4354 },
                      end: { line: 181, column: 28, offset: 4378 }
                    }
                  }
                ],
                position: {
                  start: { line: 181, column: 2, offset: 4352 },
                  end: { line: 181, column: 28, offset: 4378 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/some',
                        children: [
                          {
                            type: 'text',
                            value: 'some',
                            position: {
                              start: { line: 182, column: 5, offset: 4383 },
                              end: { line: 182, column: 9, offset: 4387 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 182, column: 4, offset: 4382 },
                          end: { line: 182, column: 22, offset: 4400 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 182, column: 4, offset: 4382 },
                      end: { line: 182, column: 22, offset: 4400 }
                    }
                  }
                ],
                position: {
                  start: { line: 182, column: 2, offset: 4380 },
                  end: { line: 182, column: 22, offset: 4400 }
                }
              }
            ],
            position: {
              start: { line: 177, column: 2, offset: 4252 },
              end: { line: 182, column: 22, offset: 4400 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 182, column: 22, offset: 4400 }
        }
      },
      execution: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'series',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      transducing: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'TODO explore Semigroup = Iterator|AsyncIterator',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 48, offset: 47 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 48, offset: 47 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 48, offset: 47 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/transform.js'
  },
  {
    name: 'tryCatch',
    synopsis: '```coffeescript [specscript]\n' +
      'args Array<any>\n' +
      'argsOrPromises Array<Promise|any>\n' +
      '\n' +
      'type SyncOrAsyncFunction = (...args)=>Promise|any\n' +
      'type SyncOrAsyncCatcher = (error Error|any, ...args)=>Promise|any\n' +
      '\n' +
      'tryer SyncOrAsyncFunction\n' +
      'catcher SyncOrAsyncCatcher\n' +
      '\n' +
      'tryCatch(tryer, catcher)(...args) -> Promise|any\n' +
      'tryCatch(...argsOrPromises, tryer, catcher) -> Promise|any\n' +
      '```',
    description: 'Function equivalent to the [try...catch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) statement. Accepts two functions: a `tryer` function and a `catcher` function. Calls the `tryer` function and catches any errors thrown by the `tryer` function with the `catcher` function.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const throwsIfOdd = number => {\n' +
      '  if (number % 2 == 1) {\n' +
      '    throw new Error(`${number} is odd`)\n' +
      '  }\n' +
      "  console.log('did not throw for', number)\n" +
      '}\n' +
      '\n' +
      'const errorHandler = (error, number) => {\n' +
      "  console.log('caught error from number', number)\n" +
      '  console.log(error)\n' +
      '}\n' +
      '\n' +
      'const handler = tryCatch(throwsIfOdd, errorHandler)\n' +
      '\n' +
      'handler(2) // did not throw for 2\n' +
      'handler(3) // caught error from number 3\n' +
      '           // Error: 3 is odd\n' +
      '\n' +
      '```\n' +
      '\n' +
      'If the `tryer` function is asynchronous and throws an error, the `catcher` function will catch the rejected promise.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const rejectsIfOdd = async number => {\n' +
      '  if (number % 2 == 1) {\n' +
      '    throw new Error(`${number} is odd`)\n' +
      '  }\n' +
      "  console.log('did not throw for', number)\n" +
      '}\n' +
      '\n' +
      'const errorHandler = (error, number) => {\n' +
      "  console.log('caught error from number', number)\n" +
      '  console.log(error)\n' +
      '}\n' +
      '\n' +
      'const asyncHandler = tryCatch(rejectsIfOdd, errorHandler)\n' +
      '\n' +
      'asyncHandler(2) // did not throw for 2\n' +
      'asyncHandler(3) // caught error from number 3\n' +
      '                // Error: 3 is odd\n' +
      '\n' +
      '```\n' +
      '\n' +
      'When provided any number of arguments before the tryer and catcher functions, `tryCatch` executes immediately.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'const add = (a, b) => a + b\n' +
      '\n' +
      'tryCatch(1, 2, 3, function throwSum(...numbers) {\n' +
      '  const sum = numbers.reduce(add)\n' +
      '  throw new Error(`the sum is ${sum}`)\n' +
      '}, function logErrorMessage(error) {\n' +
      '  console.error(error.message) // the sum is 6\n' +
      '})\n' +
      '```\n' +
      '\n' +
      'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'tryCatch(Promise.resolve(1), 2, Promise.resolve(3), (a, b, c) => {\n' +
      '  const sum = a + b + c\n' +
      '  if (sum > 5) {\n' +
      "    throw new Error('limit exceeded')\n" +
      '  }\n' +
      "  console.log('sum:', sum)\n" +
      '}, (error, a, b, c) => {\n' +
      '  console.error(`${a} + ${b} + ${c}: ${error.message}`)\n' +
      '})\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [switchCase](/docs/switchCase)\n' +
      ' * [all](/docs/all)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'tryCatch',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'args Array<any>\n' +
              'argsOrPromises Array<Promise|any>\n' +
              '\n' +
              'type SyncOrAsyncFunction = (...args)=>Promise|any\n' +
              'type SyncOrAsyncCatcher = (error Error|any, ...args)=>Promise|any\n' +
              '\n' +
              'tryer SyncOrAsyncFunction\n' +
              'catcher SyncOrAsyncCatcher\n' +
              '\n' +
              'tryCatch(tryer, catcher)(...args) -> Promise|any\n' +
              'tryCatch(...argsOrPromises, tryer, catcher) -> Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 13, column: 4, offset: 362 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 362 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Function equivalent to the ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 28, offset: 27 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch',
                children: [
                  {
                    type: 'text',
                    value: 'try...catch',
                    position: {
                      start: { line: 1, column: 29, offset: 28 },
                      end: { line: 1, column: 40, offset: 39 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 28, offset: 27 },
                  end: { line: 1, column: 131, offset: 130 }
                }
              },
              {
                type: 'text',
                value: ' statement. Accepts two functions: a ',
                position: {
                  start: { line: 1, column: 131, offset: 130 },
                  end: { line: 1, column: 168, offset: 167 }
                }
              },
              {
                type: 'inlineCode',
                value: 'tryer',
                position: {
                  start: { line: 1, column: 168, offset: 167 },
                  end: { line: 1, column: 175, offset: 174 }
                }
              },
              {
                type: 'text',
                value: ' function and a ',
                position: {
                  start: { line: 1, column: 175, offset: 174 },
                  end: { line: 1, column: 191, offset: 190 }
                }
              },
              {
                type: 'inlineCode',
                value: 'catcher',
                position: {
                  start: { line: 1, column: 191, offset: 190 },
                  end: { line: 1, column: 200, offset: 199 }
                }
              },
              {
                type: 'text',
                value: ' function. Calls the ',
                position: {
                  start: { line: 1, column: 200, offset: 199 },
                  end: { line: 1, column: 221, offset: 220 }
                }
              },
              {
                type: 'inlineCode',
                value: 'tryer',
                position: {
                  start: { line: 1, column: 221, offset: 220 },
                  end: { line: 1, column: 228, offset: 227 }
                }
              },
              {
                type: 'text',
                value: ' function and catches any errors thrown by the ',
                position: {
                  start: { line: 1, column: 228, offset: 227 },
                  end: { line: 1, column: 275, offset: 274 }
                }
              },
              {
                type: 'inlineCode',
                value: 'tryer',
                position: {
                  start: { line: 1, column: 275, offset: 274 },
                  end: { line: 1, column: 282, offset: 281 }
                }
              },
              {
                type: 'text',
                value: ' function with the ',
                position: {
                  start: { line: 1, column: 282, offset: 281 },
                  end: { line: 1, column: 301, offset: 300 }
                }
              },
              {
                type: 'inlineCode',
                value: 'catcher',
                position: {
                  start: { line: 1, column: 301, offset: 300 },
                  end: { line: 1, column: 310, offset: 309 }
                }
              },
              {
                type: 'text',
                value: ' function.',
                position: {
                  start: { line: 1, column: 310, offset: 309 },
                  end: { line: 1, column: 320, offset: 319 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 320, offset: 319 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const throwsIfOdd = number => {\n' +
              '  if (number % 2 == 1) {\n' +
              '    throw new Error(`${number} is odd`)\n' +
              '  }\n' +
              "  console.log('did not throw for', number)\n" +
              '}\n' +
              '\n' +
              'const errorHandler = (error, number) => {\n' +
              "  console.log('caught error from number', number)\n" +
              '  console.log(error)\n' +
              '}\n' +
              '\n' +
              'const handler = tryCatch(throwsIfOdd, errorHandler)\n' +
              '\n' +
              'handler(2) // did not throw for 2\n' +
              'handler(3) // caught error from number 3\n' +
              '           // Error: 3 is odd\n',
            position: {
              start: { line: 3, column: 1, offset: 321 },
              end: { line: 22, column: 4, offset: 773 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'If the ',
                position: {
                  start: { line: 24, column: 1, offset: 775 },
                  end: { line: 24, column: 8, offset: 782 }
                }
              },
              {
                type: 'inlineCode',
                value: 'tryer',
                position: {
                  start: { line: 24, column: 8, offset: 782 },
                  end: { line: 24, column: 15, offset: 789 }
                }
              },
              {
                type: 'text',
                value: ' function is asynchronous and throws an error, the ',
                position: {
                  start: { line: 24, column: 15, offset: 789 },
                  end: { line: 24, column: 66, offset: 840 }
                }
              },
              {
                type: 'inlineCode',
                value: 'catcher',
                position: {
                  start: { line: 24, column: 66, offset: 840 },
                  end: { line: 24, column: 75, offset: 849 }
                }
              },
              {
                type: 'text',
                value: ' function will catch the rejected promise.',
                position: {
                  start: { line: 24, column: 75, offset: 849 },
                  end: { line: 24, column: 117, offset: 891 }
                }
              }
            ],
            position: {
              start: { line: 24, column: 1, offset: 775 },
              end: { line: 24, column: 117, offset: 891 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const rejectsIfOdd = async number => {\n' +
              '  if (number % 2 == 1) {\n' +
              '    throw new Error(`${number} is odd`)\n' +
              '  }\n' +
              "  console.log('did not throw for', number)\n" +
              '}\n' +
              '\n' +
              'const errorHandler = (error, number) => {\n' +
              "  console.log('caught error from number', number)\n" +
              '  console.log(error)\n' +
              '}\n' +
              '\n' +
              'const asyncHandler = tryCatch(rejectsIfOdd, errorHandler)\n' +
              '\n' +
              'asyncHandler(2) // did not throw for 2\n' +
              'asyncHandler(3) // caught error from number 3\n' +
              '                // Error: 3 is odd\n',
            position: {
              start: { line: 26, column: 1, offset: 893 },
              end: { line: 45, column: 4, offset: 1373 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'When provided any number of arguments before the tryer and catcher functions, ',
                position: {
                  start: { line: 47, column: 1, offset: 1375 },
                  end: { line: 47, column: 79, offset: 1453 }
                }
              },
              {
                type: 'inlineCode',
                value: 'tryCatch',
                position: {
                  start: { line: 47, column: 79, offset: 1453 },
                  end: { line: 47, column: 89, offset: 1463 }
                }
              },
              {
                type: 'text',
                value: ' executes immediately.',
                position: {
                  start: { line: 47, column: 89, offset: 1463 },
                  end: { line: 47, column: 111, offset: 1485 }
                }
              }
            ],
            position: {
              start: { line: 47, column: 1, offset: 1375 },
              end: { line: 47, column: 111, offset: 1485 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'const add = (a, b) => a + b\n' +
              '\n' +
              'tryCatch(1, 2, 3, function throwSum(...numbers) {\n' +
              '  const sum = numbers.reduce(add)\n' +
              '  throw new Error(`the sum is ${sum}`)\n' +
              '}, function logErrorMessage(error) {\n' +
              '  console.error(error.message) // the sum is 6\n' +
              '})',
            position: {
              start: { line: 49, column: 1, offset: 1487 },
              end: { line: 58, column: 4, offset: 1756 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Any promises passed in argument position are resolved for their values before further execution. This only applies to the eager version of the API.',
                position: {
                  start: { line: 60, column: 1, offset: 1758 },
                  end: { line: 60, column: 148, offset: 1905 }
                }
              }
            ],
            position: {
              start: { line: 60, column: 1, offset: 1758 },
              end: { line: 60, column: 148, offset: 1905 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'tryCatch(Promise.resolve(1), 2, Promise.resolve(3), (a, b, c) => {\n' +
              '  const sum = a + b + c\n' +
              '  if (sum > 5) {\n' +
              "    throw new Error('limit exceeded')\n" +
              '  }\n' +
              "  console.log('sum:', sum)\n" +
              '}, (error, a, b, c) => {\n' +
              '  console.error(`${a} + ${b} + ${c}: ${error.message}`)\n' +
              '})',
            position: {
              start: { line: 62, column: 1, offset: 1907 },
              end: { line: 72, column: 4, offset: 2198 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 74, column: 1, offset: 2200 },
                  end: { line: 74, column: 10, offset: 2209 }
                }
              }
            ],
            position: {
              start: { line: 74, column: 1, offset: 2200 },
              end: { line: 74, column: 10, offset: 2209 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 75, column: 5, offset: 2214 },
                              end: { line: 75, column: 9, offset: 2218 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 75, column: 4, offset: 2213 },
                          end: { line: 75, column: 22, offset: 2231 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 75, column: 4, offset: 2213 },
                      end: { line: 75, column: 22, offset: 2231 }
                    }
                  }
                ],
                position: {
                  start: { line: 75, column: 2, offset: 2211 },
                  end: { line: 75, column: 22, offset: 2231 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/switchCase',
                        children: [
                          {
                            type: 'text',
                            value: 'switchCase',
                            position: {
                              start: { line: 76, column: 5, offset: 2236 },
                              end: { line: 76, column: 15, offset: 2246 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 76, column: 4, offset: 2235 },
                          end: { line: 76, column: 34, offset: 2265 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 76, column: 4, offset: 2235 },
                      end: { line: 76, column: 34, offset: 2265 }
                    }
                  }
                ],
                position: {
                  start: { line: 76, column: 2, offset: 2233 },
                  end: { line: 76, column: 34, offset: 2265 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/all',
                        children: [
                          {
                            type: 'text',
                            value: 'all',
                            position: {
                              start: { line: 77, column: 5, offset: 2270 },
                              end: { line: 77, column: 8, offset: 2273 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 77, column: 4, offset: 2269 },
                          end: { line: 77, column: 20, offset: 2285 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 77, column: 4, offset: 2269 },
                      end: { line: 77, column: 20, offset: 2285 }
                    }
                  }
                ],
                position: {
                  start: { line: 77, column: 2, offset: 2267 },
                  end: { line: 77, column: 20, offset: 2285 }
                }
              }
            ],
            position: {
              start: { line: 75, column: 2, offset: 2211 },
              end: { line: 77, column: 20, offset: 2285 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 77, column: 20, offset: 2285 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/tryCatch.js'
  },
  {
    name: 'append',
    synopsis: '```coffeescript [specscript]\n' +
      'append(\n' +
      '  element string|Array,\n' +
      ')(value string|Array) -> string|array\n' +
      '```',
    description: 'Append a string or an array.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import append from 'https://unpkg.com/rubico/dist/x/append.es.js'\n" +
      '\n' +
      "const myArray = ['orange', 'apple']\n" +
      '\n' +
      '{\n' +
      "  const result = append(['ananas'])(myArray)\n" +
      "  console.log(result) // ['orange', 'apple', 'ananas']\n" +
      '}\n' +
      '\n' +
      '{\n' +
      "  const result = append('ananas')(myArray)\n" +
      "  console.log(result) // ['orange', 'apple', 'ananas']\n" +
      '}\n' +
      '\n' +
      '{\n' +
      "  const result = append('world')('hello ')\n" +
      "  console.log(result) // 'hello world'\n" +
      '}\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [callProp](/docs/callProp)',
    since: '1.7.3',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'append',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'append(\n' +
              '  element string|Array,\n' +
              ')(value string|Array) -> string|array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 102 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 102 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Append a string or an array.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import append from 'https://unpkg.com/rubico/dist/x/append.es.js'\n" +
              '\n' +
              "const myArray = ['orange', 'apple']\n" +
              '\n' +
              '{\n' +
              "  const result = append(['ananas'])(myArray)\n" +
              "  console.log(result) // ['orange', 'apple', 'ananas']\n" +
              '}\n' +
              '\n' +
              '{\n' +
              "  const result = append('ananas')(myArray)\n" +
              "  console.log(result) // ['orange', 'apple', 'ananas']\n" +
              '}\n' +
              '\n' +
              '{\n' +
              "  const result = append('world')('hello ')\n" +
              "  console.log(result) // 'hello world'\n" +
              '}',
            position: {
              start: { line: 3, column: 1, offset: 30 },
              end: { line: 22, column: 4, offset: 458 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 24, column: 1, offset: 460 },
                  end: { line: 24, column: 10, offset: 469 }
                }
              }
            ],
            position: {
              start: { line: 24, column: 1, offset: 460 },
              end: { line: 24, column: 10, offset: 469 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/callProp',
                        children: [
                          {
                            type: 'text',
                            value: 'callProp',
                            position: {
                              start: { line: 25, column: 5, offset: 474 },
                              end: { line: 25, column: 13, offset: 482 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 25, column: 4, offset: 473 },
                          end: { line: 25, column: 30, offset: 499 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 25, column: 4, offset: 473 },
                      end: { line: 25, column: 30, offset: 499 }
                    }
                  }
                ],
                position: {
                  start: { line: 25, column: 2, offset: 471 },
                  end: { line: 25, column: 30, offset: 499 }
                }
              }
            ],
            position: {
              start: { line: 25, column: 2, offset: 471 },
              end: { line: 25, column: 30, offset: 499 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 25, column: 30, offset: 499 }
        }
      },
      since: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '1.7.3',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/append.js'
  },
  {
    name: 'callProp',
    synopsis: '```coffeescript [specscript]\n' +
      'callProp(property string, ...args)(object) -> object[property](...args)\n' +
      '```',
    description: 'Calls a property on an object with arguments.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import callProp from 'https://unpkg.com/rubico/dist/x/callProp.es.js'\n" +
      '\n' +
      "const priceRoundedDown = callProp('toFixed', 2)(5.992)\n" +
      "console.log('priceRoundedDown:', priceRoundedDown) // '5.99'\n" +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [append](/docs/append)\n' +
      ' * [defaultsDeep](/docs/defaultsDeep)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'callProp',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'callProp(property string, ...args)(object) -> object[property](...args)',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 104 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 104 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Calls a property on an object with arguments.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 46, offset: 45 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 46, offset: 45 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import callProp from 'https://unpkg.com/rubico/dist/x/callProp.es.js'\n" +
              '\n' +
              "const priceRoundedDown = callProp('toFixed', 2)(5.992)\n" +
              "console.log('priceRoundedDown:', priceRoundedDown) // '5.99'",
            position: {
              start: { line: 3, column: 1, offset: 47 },
              end: { line: 8, column: 4, offset: 264 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 10, column: 1, offset: 266 },
                  end: { line: 10, column: 10, offset: 275 }
                }
              }
            ],
            position: {
              start: { line: 10, column: 1, offset: 266 },
              end: { line: 10, column: 10, offset: 275 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/append',
                        children: [
                          {
                            type: 'text',
                            value: 'append',
                            position: {
                              start: { line: 11, column: 5, offset: 280 },
                              end: { line: 11, column: 11, offset: 286 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 11, column: 4, offset: 279 },
                          end: { line: 11, column: 26, offset: 301 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 11, column: 4, offset: 279 },
                      end: { line: 11, column: 26, offset: 301 }
                    }
                  }
                ],
                position: {
                  start: { line: 11, column: 2, offset: 277 },
                  end: { line: 11, column: 26, offset: 301 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/defaultsDeep',
                        children: [
                          {
                            type: 'text',
                            value: 'defaultsDeep',
                            position: {
                              start: { line: 12, column: 5, offset: 306 },
                              end: { line: 12, column: 17, offset: 318 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 12, column: 4, offset: 305 },
                          end: { line: 12, column: 38, offset: 339 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 12, column: 4, offset: 305 },
                      end: { line: 12, column: 38, offset: 339 }
                    }
                  }
                ],
                position: {
                  start: { line: 12, column: 2, offset: 303 },
                  end: { line: 12, column: 38, offset: 339 }
                }
              }
            ],
            position: {
              start: { line: 11, column: 2, offset: 277 },
              end: { line: 12, column: 38, offset: 339 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 38, offset: 339 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/callProp.js'
  },
  {
    name: 'arrayDefaultsDeepFromArray',
    synopsis: '```coffeescript [specscript]\n' +
      'arrayDefaultsDeepFromArray(\n' +
      '  data Array<Array|Object|any>,\n' +
      '  defaults Array<Array|Object|any>\n' +
      ') -> Object\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayDefaultsDeepFromArray',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 27, offset: 26 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 27, offset: 26 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 27, offset: 26 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'arrayDefaultsDeepFromArray(\n' +
              '  data Array<Array|Object|any>,\n' +
              '  defaults Array<Array|Object|any>\n' +
              ') -> Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 139 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 139 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/defaultsDeep.js'
  },
  {
    name: 'objectDefaultsDeepFromObject',
    synopsis: '```coffeescript [specscript]\n' +
      'objectDefaultsDeepFromObject(\n' +
      '  data Object<Array|Object|any>,\n' +
      '  defaults Object<Array|Object|any>\n' +
      ') -> Object\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'objectDefaultsDeepFromObject',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 29, offset: 28 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 29, offset: 28 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 29, offset: 28 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'objectDefaultsDeepFromObject(\n' +
              '  data Object<Array|Object|any>,\n' +
              '  defaults Object<Array|Object|any>\n' +
              ') -> Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 143 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 143 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/defaultsDeep.js'
  },
  {
    name: '_defaultsDeep',
    synopsis: '```coffeescript [specscript]\n' +
      '_defaultsDeep(\n' +
      '  data Object<Array|Object|any>,\n' +
      '  defaults (Object|Array)<Array|Object|any>\n' +
      ') -> result Object\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_defaultsDeep',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_defaultsDeep(\n' +
              '  data Object<Array|Object|any>,\n' +
              '  defaults (Object|Array)<Array|Object|any>\n' +
              ') -> result Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 143 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 143 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/defaultsDeep.js'
  },
  {
    name: 'defaultsDeep',
    synopsis: '```coffeescript [specscript]\n' +
      'data (Object|Array)<Array|Object|any>\n' +
      'defaults (Object|Array)<Array|Object|any>\n' +
      '\n' +
      'defaultsDeep(data, defaults) -> result Object\n' +
      'defaultsDeep(defaults)(data) -> result Object\n' +
      '```',
    description: 'Deeply assign default values to an object or array `data` using an array or object of default values `defaults`. The keys or indices of each element of `defaults` are used to extend `data` where there is no existing value. Both `data` and `defaults` may have nested arrays or objects.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import defaultsDeep from 'https://unpkg.com/rubico/dist/x/defaultsDeep.es.js'\n" +
      '\n' +
      'const user = {\n' +
      "  name: 'John',\n" +
      "  images: [{ url: 'https://placehold.co/600x400' }],\n" +
      '}\n' +
      '\n' +
      'const userWithDefaults = defaultsDeep(user, {\n' +
      "  name: 'placeholder',\n" +
      '  images: [\n' +
      "    { url: 'https://placehold.co/150' },\n" +
      "    { url: 'https://placehold.co/150' },\n" +
      "    { url: 'https://placehold.co/150' },\n" +
      '  ],\n' +
      '})\n' +
      '\n' +
      'console.log(userWithDefaults)\n' +
      '// {\n' +
      "//   name: 'John',\n" +
      '//   images: [\n' +
      "//    { url: 'https://via.placeholder.com/150/0000FF/808080%20?Text=Digital.com' },\n" +
      "//    { url: 'https://via.placeholder.com/150' },\n" +
      "//    { url: 'https://via.placeholder.com/150' },\n" +
      '//   ],\n' +
      '// }\n' +
      '```\n' +
      '\n' +
      'The `defaults` array or object may be provided to `defaultsDeep` without `data` to create a lazy version of `defaultsDeep` that accepts `data` as a single argument. This "lazy" API can be used for function pipelines and function compositions.\n' +
      '\n' +
      '```javascript [playground]\n' +
      'pipe({ a: 1 }, [\n' +
      '  defaultsDeep({ b: 2, c: 3, g: [1, 2, 3] }),\n' +
      '  console.log, // { a: 1, b: 2, c: 3, g: [1, 2, 3] }\n' +
      '])\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [pipe](/docs/pipe)\n' +
      ' * [compose](/docs/compose)\n' +
      ' * [callProp](/docs/callProp)\n' +
      ' * [differenceWith](/docs/differenceWith)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'defaultsDeep',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'data (Object|Array)<Array|Object|any>\n' +
              'defaults (Object|Array)<Array|Object|any>\n' +
              '\n' +
              'defaultsDeep(data, defaults) -> result Object\n' +
              'defaultsDeep(defaults)(data) -> result Object',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 205 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 205 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Deeply assign default values to an object or array ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 52, offset: 51 }
                }
              },
              {
                type: 'inlineCode',
                value: 'data',
                position: {
                  start: { line: 1, column: 52, offset: 51 },
                  end: { line: 1, column: 58, offset: 57 }
                }
              },
              {
                type: 'text',
                value: ' using an array or object of default values ',
                position: {
                  start: { line: 1, column: 58, offset: 57 },
                  end: { line: 1, column: 102, offset: 101 }
                }
              },
              {
                type: 'inlineCode',
                value: 'defaults',
                position: {
                  start: { line: 1, column: 102, offset: 101 },
                  end: { line: 1, column: 112, offset: 111 }
                }
              },
              {
                type: 'text',
                value: '. The keys or indices of each element of ',
                position: {
                  start: { line: 1, column: 112, offset: 111 },
                  end: { line: 1, column: 153, offset: 152 }
                }
              },
              {
                type: 'inlineCode',
                value: 'defaults',
                position: {
                  start: { line: 1, column: 153, offset: 152 },
                  end: { line: 1, column: 163, offset: 162 }
                }
              },
              {
                type: 'text',
                value: ' are used to extend ',
                position: {
                  start: { line: 1, column: 163, offset: 162 },
                  end: { line: 1, column: 183, offset: 182 }
                }
              },
              {
                type: 'inlineCode',
                value: 'data',
                position: {
                  start: { line: 1, column: 183, offset: 182 },
                  end: { line: 1, column: 189, offset: 188 }
                }
              },
              {
                type: 'text',
                value: ' where there is no existing value. Both ',
                position: {
                  start: { line: 1, column: 189, offset: 188 },
                  end: { line: 1, column: 229, offset: 228 }
                }
              },
              {
                type: 'inlineCode',
                value: 'data',
                position: {
                  start: { line: 1, column: 229, offset: 228 },
                  end: { line: 1, column: 235, offset: 234 }
                }
              },
              {
                type: 'text',
                value: ' and ',
                position: {
                  start: { line: 1, column: 235, offset: 234 },
                  end: { line: 1, column: 240, offset: 239 }
                }
              },
              {
                type: 'inlineCode',
                value: 'defaults',
                position: {
                  start: { line: 1, column: 240, offset: 239 },
                  end: { line: 1, column: 250, offset: 249 }
                }
              },
              {
                type: 'text',
                value: ' may have nested arrays or objects.',
                position: {
                  start: { line: 1, column: 250, offset: 249 },
                  end: { line: 1, column: 285, offset: 284 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 285, offset: 284 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import defaultsDeep from 'https://unpkg.com/rubico/dist/x/defaultsDeep.es.js'\n" +
              '\n' +
              'const user = {\n' +
              "  name: 'John',\n" +
              "  images: [{ url: 'https://placehold.co/600x400' }],\n" +
              '}\n' +
              '\n' +
              'const userWithDefaults = defaultsDeep(user, {\n' +
              "  name: 'placeholder',\n" +
              '  images: [\n' +
              "    { url: 'https://placehold.co/150' },\n" +
              "    { url: 'https://placehold.co/150' },\n" +
              "    { url: 'https://placehold.co/150' },\n" +
              '  ],\n' +
              '})\n' +
              '\n' +
              'console.log(userWithDefaults)\n' +
              '// {\n' +
              "//   name: 'John',\n" +
              '//   images: [\n' +
              "//    { url: 'https://via.placeholder.com/150/0000FF/808080%20?Text=Digital.com' },\n" +
              "//    { url: 'https://via.placeholder.com/150' },\n" +
              "//    { url: 'https://via.placeholder.com/150' },\n" +
              '//   ],\n' +
              '// }',
            position: {
              start: { line: 3, column: 1, offset: 286 },
              end: { line: 29, column: 4, offset: 961 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The ',
                position: {
                  start: { line: 31, column: 1, offset: 963 },
                  end: { line: 31, column: 5, offset: 967 }
                }
              },
              {
                type: 'inlineCode',
                value: 'defaults',
                position: {
                  start: { line: 31, column: 5, offset: 967 },
                  end: { line: 31, column: 15, offset: 977 }
                }
              },
              {
                type: 'text',
                value: ' array or object may be provided to ',
                position: {
                  start: { line: 31, column: 15, offset: 977 },
                  end: { line: 31, column: 51, offset: 1013 }
                }
              },
              {
                type: 'inlineCode',
                value: 'defaultsDeep',
                position: {
                  start: { line: 31, column: 51, offset: 1013 },
                  end: { line: 31, column: 65, offset: 1027 }
                }
              },
              {
                type: 'text',
                value: ' without ',
                position: {
                  start: { line: 31, column: 65, offset: 1027 },
                  end: { line: 31, column: 74, offset: 1036 }
                }
              },
              {
                type: 'inlineCode',
                value: 'data',
                position: {
                  start: { line: 31, column: 74, offset: 1036 },
                  end: { line: 31, column: 80, offset: 1042 }
                }
              },
              {
                type: 'text',
                value: ' to create a lazy version of ',
                position: {
                  start: { line: 31, column: 80, offset: 1042 },
                  end: { line: 31, column: 109, offset: 1071 }
                }
              },
              {
                type: 'inlineCode',
                value: 'defaultsDeep',
                position: {
                  start: { line: 31, column: 109, offset: 1071 },
                  end: { line: 31, column: 123, offset: 1085 }
                }
              },
              {
                type: 'text',
                value: ' that accepts ',
                position: {
                  start: { line: 31, column: 123, offset: 1085 },
                  end: { line: 31, column: 137, offset: 1099 }
                }
              },
              {
                type: 'inlineCode',
                value: 'data',
                position: {
                  start: { line: 31, column: 137, offset: 1099 },
                  end: { line: 31, column: 143, offset: 1105 }
                }
              },
              {
                type: 'text',
                value: ' as a single argument. This "lazy" API can be used for function pipelines and function compositions.',
                position: {
                  start: { line: 31, column: 143, offset: 1105 },
                  end: { line: 31, column: 243, offset: 1205 }
                }
              }
            ],
            position: {
              start: { line: 31, column: 1, offset: 963 },
              end: { line: 31, column: 243, offset: 1205 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: 'pipe({ a: 1 }, [\n' +
              '  defaultsDeep({ b: 2, c: 3, g: [1, 2, 3] }),\n' +
              '  console.log, // { a: 1, b: 2, c: 3, g: [1, 2, 3] }\n' +
              '])',
            position: {
              start: { line: 33, column: 1, offset: 1207 },
              end: { line: 38, column: 4, offset: 1356 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 40, column: 1, offset: 1358 },
                  end: { line: 40, column: 10, offset: 1367 }
                }
              }
            ],
            position: {
              start: { line: 40, column: 1, offset: 1358 },
              end: { line: 40, column: 10, offset: 1367 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/pipe',
                        children: [
                          {
                            type: 'text',
                            value: 'pipe',
                            position: {
                              start: { line: 41, column: 5, offset: 1372 },
                              end: { line: 41, column: 9, offset: 1376 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 41, column: 4, offset: 1371 },
                          end: { line: 41, column: 22, offset: 1389 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 41, column: 4, offset: 1371 },
                      end: { line: 41, column: 22, offset: 1389 }
                    }
                  }
                ],
                position: {
                  start: { line: 41, column: 2, offset: 1369 },
                  end: { line: 41, column: 22, offset: 1389 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/compose',
                        children: [
                          {
                            type: 'text',
                            value: 'compose',
                            position: {
                              start: { line: 42, column: 5, offset: 1394 },
                              end: { line: 42, column: 12, offset: 1401 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 42, column: 4, offset: 1393 },
                          end: { line: 42, column: 28, offset: 1417 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 42, column: 4, offset: 1393 },
                      end: { line: 42, column: 28, offset: 1417 }
                    }
                  }
                ],
                position: {
                  start: { line: 42, column: 2, offset: 1391 },
                  end: { line: 42, column: 28, offset: 1417 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/callProp',
                        children: [
                          {
                            type: 'text',
                            value: 'callProp',
                            position: {
                              start: { line: 43, column: 5, offset: 1422 },
                              end: { line: 43, column: 13, offset: 1430 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 43, column: 4, offset: 1421 },
                          end: { line: 43, column: 30, offset: 1447 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 43, column: 4, offset: 1421 },
                      end: { line: 43, column: 30, offset: 1447 }
                    }
                  }
                ],
                position: {
                  start: { line: 43, column: 2, offset: 1419 },
                  end: { line: 43, column: 30, offset: 1447 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/differenceWith',
                        children: [
                          {
                            type: 'text',
                            value: 'differenceWith',
                            position: {
                              start: { line: 44, column: 5, offset: 1452 },
                              end: { line: 44, column: 19, offset: 1466 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 44, column: 4, offset: 1451 },
                          end: { line: 44, column: 42, offset: 1489 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 44, column: 4, offset: 1451 },
                      end: { line: 44, column: 42, offset: 1489 }
                    }
                  }
                ],
                position: {
                  start: { line: 44, column: 2, offset: 1449 },
                  end: { line: 44, column: 42, offset: 1489 }
                }
              }
            ],
            position: {
              start: { line: 41, column: 2, offset: 1369 },
              end: { line: 44, column: 42, offset: 1489 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 44, column: 42, offset: 1489 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/defaultsDeep.js'
  },
  {
    name: 'differenceWith-race',
    benchmark: 'rubico.differenceWith: 1e+5: 45.083ms\n_.differenceWith: 1e+5: 79.651ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'differenceWith-race',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'rubico.differenceWith: 1e+5: 45.083ms\n' +
                  '_.differenceWith: 1e+5: 79.651ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 33, offset: 70 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 33, offset: 70 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 2, column: 33, offset: 70 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/differenceWith.benchmark.js'
  },
  {
    name: 'differenceWithArrayAsync',
    synopsis: '```coffeescript [specscript]\n' +
      'differenceWithArrayAsync(\n' +
      '  comparator (any, any)=>Promise|boolean,\n' +
      '  allValues Array,\n' +
      '  array Array,\n' +
      '  result Array,\n' +
      '  index number,\n' +
      ') -> result Promise<Array>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'differenceWithArrayAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 25, offset: 24 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 25, offset: 24 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 25, offset: 24 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'differenceWithArrayAsync(\n' +
              '  comparator (any, any)=>Promise|boolean,\n' +
              '  allValues Array,\n' +
              '  array Array,\n' +
              '  result Array,\n' +
              '  index number,\n' +
              ') -> result Promise<Array>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 193 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 193 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/differenceWith.js'
  },
  {
    name: 'differenceWithArray',
    synopsis: '```coffeescript [specscript]\n' +
      'differenceWithArray(\n' +
      '  comparator (any, any)=>Promise|boolean,\n' +
      '  allValues Array,\n' +
      '  array Array,\n' +
      ') -> someOrAllValues Promise|Array\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'differenceWithArray',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'differenceWithArray(\n' +
              '  comparator (any, any)=>Promise|boolean,\n' +
              '  allValues Array,\n' +
              '  array Array,\n' +
              ') -> someOrAllValues Promise|Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 164 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 164 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/differenceWith.js'
  },
  {
    name: 'differenceWith',
    synopsis: '```coffeescript [specscript]\n' +
      'differenceWith(\n' +
      '  comparator (any, any)=>Promise|boolean,\n' +
      '  allValues Array,\n' +
      ')(values Array) -> someOrAllValues Array\n' +
      '```',
    description: 'Create an array of all the values in an array that are not in another array as dictated by a comparator.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import differenceWith from 'https://unpkg.com/rubico/dist/x/differenceWith.es.js'\n" +
      "import isDeepEqual from 'https://unpkg.com/rubico/dist/x/isDeepEqual.es.js'\n" +
      '\n' +
      'console.log(\n' +
      '  differenceWith(isDeepEqual, [{ a: 1 }, { b: 2 }, { c: 3 }])([{ b: 2 }]),\n' +
      ') // [{ a: 1 }, { c: 3 }]\n' +
      '```\n' +
      '\n' +
      'See also:\n' +
      ' * [defaultsDeep](/docs/defaultsDeep)\n' +
      ' * [filterOut](/docs/filterOut)',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'differenceWith',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'differenceWith(\n' +
              '  comparator (any, any)=>Promise|boolean,\n' +
              '  allValues Array,\n' +
              ')(values Array) -> someOrAllValues Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 150 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 150 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create an array of all the values in an array that are not in another array as dictated by a comparator.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 105, offset: 104 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 105, offset: 104 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import differenceWith from 'https://unpkg.com/rubico/dist/x/differenceWith.es.js'\n" +
              "import isDeepEqual from 'https://unpkg.com/rubico/dist/x/isDeepEqual.es.js'\n" +
              '\n' +
              'console.log(\n' +
              '  differenceWith(isDeepEqual, [{ a: 1 }, { b: 2 }, { c: 3 }])([{ b: 2 }]),\n' +
              ') // [{ a: 1 }, { c: 3 }]',
            position: {
              start: { line: 3, column: 1, offset: 106 },
              end: { line: 10, column: 4, offset: 409 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'See also:',
                position: {
                  start: { line: 12, column: 1, offset: 411 },
                  end: { line: 12, column: 10, offset: 420 }
                }
              }
            ],
            position: {
              start: { line: 12, column: 1, offset: 411 },
              end: { line: 12, column: 10, offset: 420 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/defaultsDeep',
                        children: [
                          {
                            type: 'text',
                            value: 'defaultsDeep',
                            position: {
                              start: { line: 13, column: 5, offset: 425 },
                              end: { line: 13, column: 17, offset: 437 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 13, column: 4, offset: 424 },
                          end: { line: 13, column: 38, offset: 458 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 13, column: 4, offset: 424 },
                      end: { line: 13, column: 38, offset: 458 }
                    }
                  }
                ],
                position: {
                  start: { line: 13, column: 2, offset: 422 },
                  end: { line: 13, column: 38, offset: 458 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'link',
                        title: null,
                        url: '/docs/filterOut',
                        children: [
                          {
                            type: 'text',
                            value: 'filterOut',
                            position: {
                              start: { line: 14, column: 5, offset: 463 },
                              end: { line: 14, column: 14, offset: 472 }
                            }
                          }
                        ],
                        position: {
                          start: { line: 14, column: 4, offset: 462 },
                          end: { line: 14, column: 32, offset: 490 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 14, column: 4, offset: 462 },
                      end: { line: 14, column: 32, offset: 490 }
                    }
                  }
                ],
                position: {
                  start: { line: 14, column: 2, offset: 460 },
                  end: { line: 14, column: 32, offset: 490 }
                }
              }
            ],
            position: {
              start: { line: 13, column: 2, offset: 422 },
              end: { line: 14, column: 32, offset: 490 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 14, column: 32, offset: 490 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/differenceWith.js'
  },
  {
    name: 'filterOut',
    synopsis: '```coffeescript [specscript]\n' +
      'filterOut(\n' +
      '  arrayPredicate (value any, index number, array Array)=>Promise|boolean\n' +
      ')(array) -> rejectedArray Promise|Array\n' +
      '\n' +
      'filterOut(\n' +
      '  objectPredicate (value any, key string, object Object)=>Promise|boolean\n' +
      ')(object) -> rejectedObject Promise|Object\n' +
      '\n' +
      'filterOut(\n' +
      '  setPredicate (value any, value, set Set)=>Promise|boolean\n' +
      ')(set) -> rejectedSet Promise|Set\n' +
      '\n' +
      'filterOut(\n' +
      '  mapPredicate (value any, key any, map Map)=>Promise|boolean\n' +
      ')(map) -> rejectedMap Promise|Map\n' +
      '\n' +
      'filterOut(\n' +
      '  predicate (value any)=>Promise|boolean\n' +
      ')(generatorFunction GeneratorFunction) -> rejectingGeneratorFunction GeneratorFunction\n' +
      '\n' +
      'filterOut(\n' +
      '  predicate (value any)=>Promise|boolean\n' +
      ')(asyncGeneratorFunction AsyncGeneratorFunction) -> rejectingAsyncGeneratorFunction AsyncGeneratorFunction\n' +
      '\n' +
      'filterOut(\n' +
      '  predicate (value any)=>Promise|boolean\n' +
      ')(reducer Reducer) -> rejectingReducer Reducer\n' +
      '```',
    description: 'The inverse of `filter`. Values that test true by the predicate are filtered out, or "rejected".',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'filterOut',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'filterOut(\n' +
              '  arrayPredicate (value any, index number, array Array)=>Promise|boolean\n' +
              ')(array) -> rejectedArray Promise|Array\n' +
              '\n' +
              'filterOut(\n' +
              '  objectPredicate (value any, key string, object Object)=>Promise|boolean\n' +
              ')(object) -> rejectedObject Promise|Object\n' +
              '\n' +
              'filterOut(\n' +
              '  setPredicate (value any, value, set Set)=>Promise|boolean\n' +
              ')(set) -> rejectedSet Promise|Set\n' +
              '\n' +
              'filterOut(\n' +
              '  mapPredicate (value any, key any, map Map)=>Promise|boolean\n' +
              ')(map) -> rejectedMap Promise|Map\n' +
              '\n' +
              'filterOut(\n' +
              '  predicate (value any)=>Promise|boolean\n' +
              ')(generatorFunction GeneratorFunction) -> rejectingGeneratorFunction GeneratorFunction\n' +
              '\n' +
              'filterOut(\n' +
              '  predicate (value any)=>Promise|boolean\n' +
              ')(asyncGeneratorFunction AsyncGeneratorFunction) -> rejectingAsyncGeneratorFunction AsyncGeneratorFunction\n' +
              '\n' +
              'filterOut(\n' +
              '  predicate (value any)=>Promise|boolean\n' +
              ')(reducer Reducer) -> rejectingReducer Reducer',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 29, column: 4, offset: 899 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 29, column: 4, offset: 899 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'The inverse of ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 16, offset: 15 }
                }
              },
              {
                type: 'inlineCode',
                value: 'filter',
                position: {
                  start: { line: 1, column: 16, offset: 15 },
                  end: { line: 1, column: 24, offset: 23 }
                }
              },
              {
                type: 'text',
                value: '. Values that test true by the predicate are filtered out, or "rejected".',
                position: {
                  start: { line: 1, column: 24, offset: 23 },
                  end: { line: 1, column: 97, offset: 96 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 97, offset: 96 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 97, offset: 96 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/filterOut.js'
  },
  {
    name: 'find',
    benchmark: 'find(gt0)(array): 1e+6: 13.627ms\n' +
      'R.find(gt0, array): 1e+6: 94.086ms\n' +
      'gt0_findLodashHappyPath: 1e+6: 80.071ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'find',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'find(gt0)(array): 1e+6: 13.627ms\n' +
                  'R.find(gt0, array): 1e+6: 94.086ms\n' +
                  'gt0_findLodashHappyPath: 1e+6: 80.071ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 40, offset: 107 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 40, offset: 107 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 40, offset: 107 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/find.benchmark.js'
  },
  {
    name: 'find',
    synopsis: '```coffeescript [specscript]\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: (any, T)=>any }|Object<T>\n' +
      '\n' +
      'var T any,\n' +
      '  predicate T=>Promise|boolean,\n' +
      '  foldable Foldable<T>,\n' +
      '  result Promise|T|undefined\n' +
      '\n' +
      'find(predicate)(foldable) -> result\n' +
      '```',
    description: 'Get the first element in a foldable collection that matches a predicate.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import find from 'https://unpkg.com/rubico/dist/x/find.es.js'\n" +
      '\n' +
      'const users = [\n' +
      "  { name: 'John', age: 16 },\n" +
      "  { name: 'Jill', age: 32 },\n" +
      "  { name: 'John', age: 51 },\n" +
      ']\n' +
      '\n' +
      'console.log(\n' +
      '  find(user => user.age > 50)(users),\n' +
      ") // { name: 'John', age: 51 }\n" +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'find',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: (any, T)=>any }|Object<T>\n' +
              '\n' +
              'var T any,\n' +
              '  predicate T=>Promise|boolean,\n' +
              '  foldable Foldable<T>,\n' +
              '  result Promise|T|undefined\n' +
              '\n' +
              'find(predicate)(foldable) -> result',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 10, column: 4, offset: 245 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 10, column: 4, offset: 245 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Get the first element in a foldable collection that matches a predicate.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 73, offset: 72 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 73, offset: 72 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import find from 'https://unpkg.com/rubico/dist/x/find.es.js'\n" +
              '\n' +
              'const users = [\n' +
              "  { name: 'John', age: 16 },\n" +
              "  { name: 'Jill', age: 32 },\n" +
              "  { name: 'John', age: 51 },\n" +
              ']\n' +
              '\n' +
              'console.log(\n' +
              '  find(user => user.age > 50)(users),\n' +
              ") // { name: 'John', age: 51 }",
            position: {
              start: { line: 3, column: 1, offset: 74 },
              end: { line: 15, column: 4, offset: 355 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 15, column: 4, offset: 355 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/find.js'
  },
  {
    name: 'findIndexAsync',
    synopsis: '```coffeescript [specscript]\n' +
      'findIndexAsync(\n' +
      '  predicate function,\n' +
      '  array Array,\n' +
      '  index number\n' +
      ') -> index Promise<number>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'findIndexAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'findIndexAsync(\n' +
              '  predicate function,\n' +
              '  array Array,\n' +
              '  index number\n' +
              ') -> index Promise<number>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 127 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 127 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/findIndex.js'
  },
  {
    name: 'findIndex',
    synopsis: '```coffeescript [specscript]\n' +
      'findIndex(predicate function)(array Array) -> index Promise|number\n' +
      '```',
    description: 'Returns the index of the first element in an array that satisfies the predicate. Returns -1 if no element satisfies the predicate.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import findIndex from 'https://unpkg.com/rubico/dist/x/findIndex.es.js'\n" +
      '\n' +
      'const oddNumberIndex = findIndex(function isOdd(number) {\n' +
      '  return number % 2 == 1\n' +
      '})([2, 3, 5])\n' +
      '\n' +
      'console.log(oddNumberIndex) // 1\n' +
      '```',
    since: '1.6.26',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'findIndex',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'findIndex(predicate function)(array Array) -> index Promise|number',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 99 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 99 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Returns the index of the first element in an array that satisfies the predicate. Returns -1 if no element satisfies the predicate.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 131, offset: 130 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 131, offset: 130 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import findIndex from 'https://unpkg.com/rubico/dist/x/findIndex.es.js'\n" +
              '\n' +
              'const oddNumberIndex = findIndex(function isOdd(number) {\n' +
              '  return number % 2 == 1\n' +
              '})([2, 3, 5])\n' +
              '\n' +
              'console.log(oddNumberIndex) // 1',
            position: {
              start: { line: 3, column: 1, offset: 132 },
              end: { line: 11, column: 4, offset: 366 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 4, offset: 366 }
        }
      },
      since: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '1.6.26',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/findIndex.js'
  },
  {
    name: 'first',
    benchmark: 'first(arr): 1e+7: 12.698ms\n' +
      '_.head(arr): 1e+7: 23.017ms\n' +
      'R.first(arr): 1e+7: 1.903s',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'first',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'first(arr): 1e+7: 12.698ms\n' +
                  '_.head(arr): 1e+7: 23.017ms\n' +
                  'R.first(arr): 1e+7: 1.903s',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 27, offset: 81 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 27, offset: 81 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 27, offset: 81 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/first.benchmark.js'
  },
  {
    name: 'first',
    synopsis: '```coffeescript [specscript]\n' +
      'var value Array|string\n' +
      '\n' +
      'first(value) -> any\n' +
      '```',
    description: 'Get the first element of a collection\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import first from 'https://unpkg.com/rubico/dist/x/first.es.js'\n" +
      '\n' +
      'console.log(first([1, 2, 3])) // 1\n' +
      "console.log(first('abc')) // 'a'\n" +
      'console.log(first([])) // undefined\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'first',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var value Array|string\n\nfirst(value) -> any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 76 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 76 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Get the first element of a collection',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 38, offset: 37 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 38, offset: 37 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import first from 'https://unpkg.com/rubico/dist/x/first.es.js'\n" +
              '\n' +
              'console.log(first([1, 2, 3])) // 1\n' +
              "console.log(first('abc')) // 'a'\n" +
              'console.log(first([])) // undefined',
            position: {
              start: { line: 3, column: 1, offset: 39 },
              end: { line: 9, column: 4, offset: 238 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 238 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/first.js'
  },
  {
    name: 'flatten',
    benchmark: '[...].flat(1): 1e+5: 118.53ms\n' +
      'flatten: 1e+5: 25.87ms\n' +
      'R.unnest: 1e+5: 147.448ms\n' +
      '_.flatten: 1e+5: 27.811ms\n' +
      '\n' +
      'richytong 2020-10-01\n' +
      'flatten: 1e+5: 19.306ms\n' +
      'R.unnest: 1e+5: 145.089ms\n' +
      '_.flatten: 1e+5: 27.995ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'flatten',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '[...].flat(1): 1e+5: 118.53ms\n' +
                  'flatten: 1e+5: 25.87ms\n' +
                  'R.unnest: 1e+5: 147.448ms\n' +
                  '_.flatten: 1e+5: 27.811ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 4, column: 26, offset: 104 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 26, offset: 104 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'richytong 2020-10-01\n' +
                  'flatten: 1e+5: 19.306ms\n' +
                  'R.unnest: 1e+5: 145.089ms\n' +
                  '_.flatten: 1e+5: 27.995ms',
                position: {
                  start: { line: 6, column: 1, offset: 106 },
                  end: { line: 9, column: 26, offset: 202 }
                }
              }
            ],
            position: {
              start: { line: 6, column: 1, offset: 106 },
              end: { line: 9, column: 26, offset: 202 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 26, offset: 202 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/flatten.benchmark.js'
  },
  {
    name: 'flatten',
    synopsis: '```coffeescript [specscript]\n' +
      'Stream<T> = { read: ()=>T, write: T=>() }\n' +
      'Monad<T> = Array<T>|String<T>|Set<T>\n' +
      '  |TypedArray<T>|Stream<T>|Iterator<T>|AsyncIterator<T>\n' +
      '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T>=>any }|Object<T>\n' +
      '\n' +
      'var T any,\n' +
      '  monad Monad<Monad<T>|Foldable<T>|T>,\n' +
      '  args ...any,\n' +
      '  generatorFunction ...args=>Generator<Monad<T>|Foldable<T>|T>,\n' +
      '  asyncGeneratorFunction ...args=>AsyncGenerator<Monad<T>|Foldable<T>|T>,\n' +
      '  reducer Reducer<Monad<T>|Foldable<T>|T>\n' +
      '\n' +
      'flatten(monad) -> Monad<T>\n' +
      '\n' +
      'flatten(generatorFunction) -> ...args=>Generator<T>\n' +
      '\n' +
      'flatten(asyncGeneratorFunction) -> ...args=>AsyncGenerator<T>\n' +
      '\n' +
      'flatten(reducer) -> Reducer<T>\n' +
      '```',
    description: 'Flatten a collection. Works in transducer position.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import flatten from 'https://unpkg.com/rubico/dist/x/flatten.es.js'\n" +
      '\n' +
      'flatten([\n' +
      '  [1, 1],\n' +
      '  new Set([2, 2]),\n' +
      '  (function* () { yield 3; yield 3 })(),\n' +
      '  (async function* () { yield 4; yield 4 })(),\n' +
      '  { a: 5, b: 5 },\n' +
      '  6,\n' +
      '  Promise.resolve(7),\n' +
      '  new Uint8Array([8]),\n' +
      ']).then(console.log)\n' +
      '// [1, 1, 2, 3, 3, 5, 5, 6, 7, 8, 4, 4]\n' +
      '\n' +
      'const add = (a, b) => a + b\n' +
      '\n' +
      'console.log(\n' +
      '  [[1], [2], [3], [4], [5]].reduce(flatten(add), 0),\n' +
      ') // 15\n' +
      '```',
    TODO: 'flatten for each type',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'flatten',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Stream<T> = { read: ()=>T, write: T=>() }\n' +
              'Monad<T> = Array<T>|String<T>|Set<T>\n' +
              '  |TypedArray<T>|Stream<T>|Iterator<T>|AsyncIterator<T>\n' +
              '  |{ chain: T=>Monad<T> }|{ flatMap: T=>Monad<T> }|Object<T>\n' +
              'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T>=>any }|Object<T>\n' +
              '\n' +
              'var T any,\n' +
              '  monad Monad<Monad<T>|Foldable<T>|T>,\n' +
              '  args ...any,\n' +
              '  generatorFunction ...args=>Generator<Monad<T>|Foldable<T>|T>,\n' +
              '  asyncGeneratorFunction ...args=>AsyncGenerator<Monad<T>|Foldable<T>|T>,\n' +
              '  reducer Reducer<Monad<T>|Foldable<T>|T>\n' +
              '\n' +
              'flatten(monad) -> Monad<T>\n' +
              '\n' +
              'flatten(generatorFunction) -> ...args=>Generator<T>\n' +
              '\n' +
              'flatten(asyncGeneratorFunction) -> ...args=>AsyncGenerator<T>\n' +
              '\n' +
              'flatten(reducer) -> Reducer<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 23, column: 4, offset: 766 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 23, column: 4, offset: 766 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Flatten a collection. Works in transducer position.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 52, offset: 51 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 52, offset: 51 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import flatten from 'https://unpkg.com/rubico/dist/x/flatten.es.js'\n" +
              '\n' +
              'flatten([\n' +
              '  [1, 1],\n' +
              '  new Set([2, 2]),\n' +
              '  (function* () { yield 3; yield 3 })(),\n' +
              '  (async function* () { yield 4; yield 4 })(),\n' +
              '  { a: 5, b: 5 },\n' +
              '  6,\n' +
              '  Promise.resolve(7),\n' +
              '  new Uint8Array([8]),\n' +
              ']).then(console.log)\n' +
              '// [1, 1, 2, 3, 3, 5, 5, 6, 7, 8, 4, 4]\n' +
              '\n' +
              'const add = (a, b) => a + b\n' +
              '\n' +
              'console.log(\n' +
              '  [[1], [2], [3], [4], [5]].reduce(flatten(add), 0),\n' +
              ') // 15',
            position: {
              start: { line: 3, column: 1, offset: 53 },
              end: { line: 23, column: 4, offset: 512 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 23, column: 4, offset: 512 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'flatten for each type',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 22, offset: 21 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 22, offset: 21 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 22, offset: 21 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/flatten.js'
  },
  {
    name: 'groupByRaceProperty',
    benchmark: 'rubicoGroupBy: 1e+6: 365.717ms\n' +
      'ramdaGroupBy: 1e+6: 1.875s\n' +
      '_groupBy: 1e+6: 570.417ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'groupByRaceProperty',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'rubicoGroupBy: 1e+6: 365.717ms\n' +
                  'ramdaGroupBy: 1e+6: 1.875s\n' +
                  '_groupBy: 1e+6: 570.417ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 26, offset: 83 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 26, offset: 83 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 26, offset: 83 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/groupBy.benchmark.js'
  },
  {
    name: 'groupBy',
    synopsis: '```coffeescript [specscript]\n' +
      'Reducer<T> = (any, T)=>Promise|any\n' +
      'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T>=>any }|Object<T>\n' +
      '\n' +
      'var property any,\n' +
      '  resolver any=>Promise|any,\n' +
      '  value Foldable\n' +
      '\n' +
      'groupBy(property)(value) -> groupedByProperty Map<any=>Array>\n' +
      '\n' +
      'groupBy(resolver)(value) -> groupedByResolver Promise|Map<any=>Array>\n' +
      '```',
    description: 'Group a foldable collection into a Map of arrays by a property on each of its elements.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import groupBy from 'https://unpkg.com/rubico/dist/x/groupBy.es.js'\n" +
      '\n' +
      'console.log(\n' +
      "  groupBy('age')([\n" +
      "    { name: 'John', age: 22 },\n" +
      "    { name: 'Jane', age: 22 },\n" +
      "    { name: 'Henry', age: 23 },\n" +
      '  ]),\n' +
      ')\n' +
      '// Map {\n' +
      "//   22 => [{ name: 'John', age: 22 }, { name: 'Jane', age: 22 }],\n" +
      "//   23 => [{ name: 'Henry', age: 23 }],\n" +
      '// }\n' +
      '```\n' +
      '\n' +
      'Additionally, pass a resolver in property position to resolve a value for group membership for each element.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import groupBy from 'https://unpkg.com/rubico/dist/x/groupBy.es.js'\n" +
      '\n' +
      'console.log(\n' +
      '  groupBy(\n' +
      '    word => word.toLowerCase(),\n' +
      "  )(['Hello', 'hello', 'Hey']),\n" +
      ") // Map { 'hello' => ['Hello', 'hello'], 'hey' => ['Hey'] }\n" +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'groupBy',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Reducer<T> = (any, T)=>Promise|any\n' +
              'Foldable<T> = Iterable<T>|AsyncIterable<T>|{ reduce: Reducer<T>=>any }|Object<T>\n' +
              '\n' +
              'var property any,\n' +
              '  resolver any=>Promise|any,\n' +
              '  value Foldable\n' +
              '\n' +
              'groupBy(property)(value) -> groupedByProperty Map<any=>Array>\n' +
              '\n' +
              'groupBy(resolver)(value) -> groupedByResolver Promise|Map<any=>Array>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 12, column: 4, offset: 347 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 347 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Group a foldable collection into a Map of arrays by a property on each of its elements.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 88, offset: 87 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 88, offset: 87 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import groupBy from 'https://unpkg.com/rubico/dist/x/groupBy.es.js'\n" +
              '\n' +
              'console.log(\n' +
              "  groupBy('age')([\n" +
              "    { name: 'John', age: 22 },\n" +
              "    { name: 'Jane', age: 22 },\n" +
              "    { name: 'Henry', age: 23 },\n" +
              '  ]),\n' +
              ')\n' +
              '// Map {\n' +
              "//   22 => [{ name: 'John', age: 22 }, { name: 'Jane', age: 22 }],\n" +
              "//   23 => [{ name: 'Henry', age: 23 }],\n" +
              '// }',
            position: {
              start: { line: 3, column: 1, offset: 89 },
              end: { line: 17, column: 4, offset: 444 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Additionally, pass a resolver in property position to resolve a value for group membership for each element.',
                position: {
                  start: { line: 19, column: 1, offset: 446 },
                  end: { line: 19, column: 109, offset: 554 }
                }
              }
            ],
            position: {
              start: { line: 19, column: 1, offset: 446 },
              end: { line: 19, column: 109, offset: 554 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import groupBy from 'https://unpkg.com/rubico/dist/x/groupBy.es.js'\n" +
              '\n' +
              'console.log(\n' +
              '  groupBy(\n' +
              '    word => word.toLowerCase(),\n' +
              "  )(['Hello', 'hello', 'Hey']),\n" +
              ") // Map { 'hello' => ['Hello', 'hello'], 'hey' => ['Hey'] }",
            position: {
              start: { line: 21, column: 1, offset: 556 },
              end: { line: 29, column: 4, offset: 804 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 29, column: 4, offset: 804 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/groupBy.js'
  },
  {
    name: 'has',
    synopsis: '```coffeescript [specscript]\n' +
      'has(key any)(container Set|Map|{ has: function }|Object) -> Promise|boolean\n' +
      '```',
    description: 'Check if a collection has a key.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import has from 'https://unpkg.com/rubico/dist/x/has.es.js'\n" +
      '\n' +
      'console.log(\n' +
      "  has('a')({ a: 1, b: 2, c: 3 }),\n" +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      "  has('a')({}),\n" +
      ') // false\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'has',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 4, offset: 3 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 4, offset: 3 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 4, offset: 3 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'has(key any)(container Set|Map|{ has: function }|Object) -> Promise|boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 108 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 108 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Check if a collection has a key.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 33, offset: 32 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 33, offset: 32 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import has from 'https://unpkg.com/rubico/dist/x/has.es.js'\n" +
              '\n' +
              'console.log(\n' +
              "  has('a')({ a: 1, b: 2, c: 3 }),\n" +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              "  has('a')({}),\n" +
              ') // false',
            position: {
              start: { line: 3, column: 1, offset: 34 },
              end: { line: 13, column: 4, offset: 223 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 223 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/has.js'
  },
  {
    name: 'bytesToMiB',
    synopsis: 'bytesToMiB(bytes number) -> MiB string',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'bytesToMiB',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'bytesToMiB(bytes number) -> MiB string',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 39, offset: 38 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 39, offset: 38 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 39, offset: 38 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/heapUsedInLoop.js'
  },
  {
    name: 'heapUsedInLoop',
    catchphrase: 'max and avg heap used in loop',
    synopsis: 'heapUsedInLoop(\n' +
      '  desc string,\n' +
      '  loopCount number,\n' +
      '  func (loop number)=>any\n' +
      ') -> ()',
    description: '**heapUsedInLoop** is a memory usage measurement function. Supply `description`, `loopCount`, and a function `func` for that function to be run `loopCount` times, finally logging average and max heap used per loop in terms of megabytes MiB.\n' +
      '\n' +
      '```javascript\n' +
      "heapUsedInLoop('my-description', 1e5, function () {\n" +
      '  return 1 + 1\n' +
      '}) /*\n' +
      '0 5.88 MiB\n' +
      '1 5.92 MiB\n' +
      '...\n' +
      '99997 7.34 MiB\n' +
      '99998 7.34 MiB\n' +
      '99999 7.35 MiB\n' +
      'my-description: 1e+5: {\n' +
      '  "max": "7.15 MiB",\n' +
      '  "avg": "5.50 MiB"\n' +
      '}\n' +
      '```',
    'node-only': '',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'heapUsedInLoop',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 15, offset: 14 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 15, offset: 14 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 15, offset: 14 }
        }
      },
      catchphrase: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'max and avg heap used in loop',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 30, offset: 29 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 30, offset: 29 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'heapUsedInLoop(\n' +
                  'desc string,\n' +
                  'loopCount number,\n' +
                  'func (loop number)=>any\n' +
                  ') -> ()',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 5, column: 8, offset: 84 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 8, offset: 84 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 8, offset: 84 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'strong',
                children: [
                  {
                    type: 'text',
                    value: 'heapUsedInLoop',
                    position: {
                      start: { line: 1, column: 3, offset: 2 },
                      end: { line: 1, column: 17, offset: 16 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              },
              {
                type: 'text',
                value: ' is a memory usage measurement function. Supply ',
                position: {
                  start: { line: 1, column: 19, offset: 18 },
                  end: { line: 1, column: 67, offset: 66 }
                }
              },
              {
                type: 'inlineCode',
                value: 'description',
                position: {
                  start: { line: 1, column: 67, offset: 66 },
                  end: { line: 1, column: 80, offset: 79 }
                }
              },
              {
                type: 'text',
                value: ', ',
                position: {
                  start: { line: 1, column: 80, offset: 79 },
                  end: { line: 1, column: 82, offset: 81 }
                }
              },
              {
                type: 'inlineCode',
                value: 'loopCount',
                position: {
                  start: { line: 1, column: 82, offset: 81 },
                  end: { line: 1, column: 93, offset: 92 }
                }
              },
              {
                type: 'text',
                value: ', and a function ',
                position: {
                  start: { line: 1, column: 93, offset: 92 },
                  end: { line: 1, column: 110, offset: 109 }
                }
              },
              {
                type: 'inlineCode',
                value: 'func',
                position: {
                  start: { line: 1, column: 110, offset: 109 },
                  end: { line: 1, column: 116, offset: 115 }
                }
              },
              {
                type: 'text',
                value: ' for that function to be run ',
                position: {
                  start: { line: 1, column: 116, offset: 115 },
                  end: { line: 1, column: 145, offset: 144 }
                }
              },
              {
                type: 'inlineCode',
                value: 'loopCount',
                position: {
                  start: { line: 1, column: 145, offset: 144 },
                  end: { line: 1, column: 156, offset: 155 }
                }
              },
              {
                type: 'text',
                value: ' times, finally logging average and max heap used per loop in terms of megabytes MiB.',
                position: {
                  start: { line: 1, column: 156, offset: 155 },
                  end: { line: 1, column: 241, offset: 240 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 241, offset: 240 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: null,
            value: "heapUsedInLoop('my-description', 1e5, function () {\n" +
              '  return 1 + 1\n' +
              '}) /*\n' +
              '0 5.88 MiB\n' +
              '1 5.92 MiB\n' +
              '...\n' +
              '99997 7.34 MiB\n' +
              '99998 7.34 MiB\n' +
              '99999 7.35 MiB\n' +
              'my-description: 1e+5: {\n' +
              '  "max": "7.15 MiB",\n' +
              '  "avg": "5.50 MiB"\n' +
              '}',
            position: {
              start: { line: 3, column: 1, offset: 242 },
              end: { line: 17, column: 4, offset: 470 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 17, column: 4, offset: 470 }
        }
      },
      'node-only': {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/heapUsedInLoop.js'
  },
  {
    name: 'heapUsedInLoop.async',
    synopsis: 'heapUsedInLoop.async(\n' +
      '  desc string,\n' +
      '  loopCount number,\n' +
      '  func (loop number)=>Promise|any\n' +
      ') -> ()',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'heapUsedInLoop.async',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 21, offset: 20 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'heapUsedInLoop.async(\n' +
                  'desc string,\n' +
                  'loopCount number,\n' +
                  'func (loop number)=>Promise|any\n' +
                  ') -> ()',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 5, column: 8, offset: 98 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 8, offset: 98 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 8, offset: 98 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/heapUsedInLoop.js'
  },
  {
    name: 'identity',
    synopsis: '```coffeescript [specscript]\nidentity(value any) -> value\n```',
    description: 'Pass a value and receive the same value back.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import identity from 'https://unpkg.com/rubico/dist/x/identity.es.js'\n" +
      '\n' +
      'console.log(\n' +
      '  identity(1),\n' +
      ') // 1\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'identity',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'identity(value any) -> value',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 61 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 61 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Pass a value and receive the same value back.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 46, offset: 45 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 46, offset: 45 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import identity from 'https://unpkg.com/rubico/dist/x/identity.es.js'\n" +
              '\n' +
              'console.log(\n' +
              '  identity(1),\n' +
              ') // 1',
            position: {
              start: { line: 3, column: 1, offset: 47 },
              end: { line: 9, column: 4, offset: 183 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 183 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/identity.js'
  },
  {
    name: 'arrayIncludes',
    benchmark: 'arrayIncludes: 1e+6: 15.412ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayIncludes',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayIncludes: 1e+6: 15.412ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 30, offset: 29 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 30, offset: 29 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/includes.benchmark.js'
  },
  {
    name: 'includes',
    synopsis: '```coffeescript [specscript]\n' +
      'includes(value any)(container Array|String|Object) -> boolean\n' +
      '```',
    description: 'Check if a collection includes another value by [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero).\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import includes from 'https://unpkg.com/rubico/dist/x/includes.es.js'\n" +
      '\n' +
      'console.log(\n' +
      '  includes(5)([1, 2, 3, 4, 5])\n' +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      '  includes(5)([1, 2, 3])\n' +
      ') // false\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'includes',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'includes(value any)(container Array|String|Object) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 94 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 94 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Check if a collection includes another value by ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 49, offset: 48 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero',
                children: [
                  {
                    type: 'text',
                    value: 'SameValueZero',
                    position: {
                      start: { line: 1, column: 50, offset: 49 },
                      end: { line: 1, column: 63, offset: 62 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 49, offset: 48 },
                  end: { line: 1, column: 127, offset: 126 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 1, column: 127, offset: 126 },
                  end: { line: 1, column: 128, offset: 127 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 128, offset: 127 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import includes from 'https://unpkg.com/rubico/dist/x/includes.es.js'\n" +
              '\n' +
              'console.log(\n' +
              '  includes(5)([1, 2, 3, 4, 5])\n' +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              '  includes(5)([1, 2, 3])\n' +
              ') // false',
            position: {
              start: { line: 3, column: 1, offset: 129 },
              end: { line: 13, column: 4, offset: 334 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 334 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/includes.js'
  },
  {
    name: 'isDeepEqual',
    benchmark: 'isDeepEqual(arr, arrCopy): 1e+5: 101.307ms\n' +
      '_.isEqual(arr, arrCopy): 1e+5: 149.487ms\n' +
      'R.equals(arr, arrCopy): 1e+5: 1.538s\n' +
      'isDeepEqual(arr, arrDiff): 1e+5: 22.642ms\n' +
      '_.isEqual(arr, arrDiff): 1e+5: 76.985ms\n' +
      'R.equals(arr, arrDiff): 1e+5: 456.832ms\n' +
      '\n' +
      'richytong [2020-10-01]\n' +
      'isDeepEqual(arr, arrCopy): 1e+5: 28.929ms\n' +
      '_.isEqual(arr, arrCopy): 1e+5: 151.338ms\n' +
      'R.equals(arr, arrCopy): 1e+5: 1.579s\n' +
      'isDeepEqual(arr, arrDiff): 1e+5: 12.552ms\n' +
      '_.isEqual(arr, arrDiff): 1e+5: 76.846ms\n' +
      'R.equals(arr, arrDiff): 1e+5: 467.502ms\n' +
      '\n' +
      'richytong [2020-11-12]\n' +
      'isDeepEqual(arr, arrCopy): 1e+5: 23.445ms\n' +
      '_.isEqual(arr, arrCopy): 1e+5: 140.304ms\n' +
      'R.equals(arr, arrCopy): 1e+5: 1.607s\n' +
      'isDeepEqual(arr, arrDiff): 1e+5: 10.757ms\n' +
      '_.isEqual(arr, arrDiff): 1e+5: 75.698ms\n' +
      'R.equals(arr, arrDiff): 1e+5: 466.476ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isDeepEqual',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isDeepEqual(arr, arrCopy): 1e+5: 101.307ms\n' +
                  '_.isEqual(arr, arrCopy): 1e+5: 149.487ms\n' +
                  'R.equals(arr, arrCopy): 1e+5: 1.538s\n' +
                  'isDeepEqual(arr, arrDiff): 1e+5: 22.642ms\n' +
                  '_.isEqual(arr, arrDiff): 1e+5: 76.985ms\n' +
                  'R.equals(arr, arrDiff): 1e+5: 456.832ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 6, column: 40, offset: 242 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 40, offset: 242 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'richytong [2020-10-01]\n' +
                  'isDeepEqual(arr, arrCopy): 1e+5: 28.929ms\n' +
                  '_.isEqual(arr, arrCopy): 1e+5: 151.338ms\n' +
                  'R.equals(arr, arrCopy): 1e+5: 1.579s\n' +
                  'isDeepEqual(arr, arrDiff): 1e+5: 12.552ms\n' +
                  '_.isEqual(arr, arrDiff): 1e+5: 76.846ms\n' +
                  'R.equals(arr, arrDiff): 1e+5: 467.502ms',
                position: {
                  start: { line: 8, column: 1, offset: 244 },
                  end: { line: 14, column: 40, offset: 508 }
                }
              }
            ],
            position: {
              start: { line: 8, column: 1, offset: 244 },
              end: { line: 14, column: 40, offset: 508 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'richytong [2020-11-12]\n' +
                  'isDeepEqual(arr, arrCopy): 1e+5: 23.445ms\n' +
                  '_.isEqual(arr, arrCopy): 1e+5: 140.304ms\n' +
                  'R.equals(arr, arrCopy): 1e+5: 1.607s\n' +
                  'isDeepEqual(arr, arrDiff): 1e+5: 10.757ms\n' +
                  '_.isEqual(arr, arrDiff): 1e+5: 75.698ms\n' +
                  'R.equals(arr, arrDiff): 1e+5: 466.476ms',
                position: {
                  start: { line: 16, column: 1, offset: 510 },
                  end: { line: 22, column: 40, offset: 774 }
                }
              }
            ],
            position: {
              start: { line: 16, column: 1, offset: 510 },
              end: { line: 22, column: 40, offset: 774 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 22, column: 40, offset: 774 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isDeepEqual.benchmark.js'
  },
  {
    name: 'areIteratorsDeepEqual',
    synopsis: 'areIteratorsDeepEqual(left Iterator, right Iterator) -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'areIteratorsDeepEqual',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 22, offset: 21 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 22, offset: 21 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 22, offset: 21 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'areIteratorsDeepEqual(left Iterator, right Iterator) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 64, offset: 63 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 64, offset: 63 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 64, offset: 63 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isDeepEqual.js'
  },
  {
    name: 'areObjectsDeepEqual',
    synopsis: 'areObjectsDeepEqual(left Object, right Object) -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'areObjectsDeepEqual',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 20, offset: 19 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 20, offset: 19 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 20, offset: 19 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'areObjectsDeepEqual(left Object, right Object) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 58, offset: 57 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 58, offset: 57 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 58, offset: 57 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isDeepEqual.js'
  },
  {
    name: 'areArraysDeepEqual',
    synopsis: 'areArraysDeepEqual(left Array, right Array) -> boolean',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'areArraysDeepEqual',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'areArraysDeepEqual(left Array, right Array) -> boolean',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 55, offset: 54 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 55, offset: 54 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 55, offset: 54 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isDeepEqual.js'
  },
  {
    name: 'areValuesDeepEqual',
    synopsis: '```coffeescript [specscript]\n' +
      'areValuesDeepEqual(left any, right any) -> boolean\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'areValuesDeepEqual',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'areValuesDeepEqual(left any, right any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 83 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 83 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isDeepEqual.js'
  },
  {
    name: 'isDeepEqual',
    synopsis: '```coffeescript [specscript]\n' +
      'Nested<T> = Array<Array<T>|Object<T>|Iterable<T>|T>|Object<Array<T>|Object<T>|Iterable<T>|T>\n' +
      '\n' +
      'var left Nested,\n' +
      '  right Nested\n' +
      '\n' +
      'isDeepEqual(left, right) -> boolean\n' +
      '```',
    description: 'Check two values for deep [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) equality.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import isDeepEqual from 'https://unpkg.com/rubico/dist/x/isDeepEqual.es.js'\n" +
      '\n' +
      'console.log(\n' +
      '  isDeepEqual({ a: 1, b: 2, c: [3] }, { a: 1, b: 2, c: [3] }),\n' +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      '  isDeepEqual({ a: 1, b: 2, c: [3] }, { a: 1, b: 2, c: [5] }),\n' +
      ') // false\n' +
      '```\n' +
      '\n' +
      'When passed a resolver function as the left or right argument or resolvers as both arguments, returns a function that resolves the value by the resolver before performing the deep equal comparison.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import isDeepEqual from 'https://unpkg.com/rubico/dist/x/isDeepEqual.es.js'\n" +
      '\n' +
      'const isPropADeepEqualTo123Array = isDeepEqual(object => object.a, [1, 2, 3])\n' +
      '\n' +
      'console.log(\n' +
      '  isPropADeepEqualTo123Array({ a: [1, 2, 3] }),\n' +
      ') // true\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isDeepEqual',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 12, offset: 11 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 12, offset: 11 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 12, offset: 11 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'Nested<T> = Array<Array<T>|Object<T>|Iterable<T>|T>|Object<Array<T>|Object<T>|Iterable<T>|T>\n' +
              '\n' +
              'var left Nested,\n' +
              '  right Nested\n' +
              '\n' +
              'isDeepEqual(left, right) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 195 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 195 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Check two values for deep ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 27, offset: 26 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero',
                children: [
                  {
                    type: 'text',
                    value: 'SameValueZero',
                    position: {
                      start: { line: 1, column: 28, offset: 27 },
                      end: { line: 1, column: 41, offset: 40 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 27, offset: 26 },
                  end: { line: 1, column: 105, offset: 104 }
                }
              },
              {
                type: 'text',
                value: ' equality.',
                position: {
                  start: { line: 1, column: 105, offset: 104 },
                  end: { line: 1, column: 115, offset: 114 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 115, offset: 114 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import isDeepEqual from 'https://unpkg.com/rubico/dist/x/isDeepEqual.es.js'\n" +
              '\n' +
              'console.log(\n' +
              '  isDeepEqual({ a: 1, b: 2, c: [3] }, { a: 1, b: 2, c: [3] }),\n' +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              '  isDeepEqual({ a: 1, b: 2, c: [3] }, { a: 1, b: 2, c: [5] }),\n' +
              ') // false',
            position: {
              start: { line: 3, column: 1, offset: 116 },
              end: { line: 13, column: 4, offset: 397 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'When passed a resolver function as the left or right argument or resolvers as both arguments, returns a function that resolves the value by the resolver before performing the deep equal comparison.',
                position: {
                  start: { line: 15, column: 1, offset: 399 },
                  end: { line: 15, column: 198, offset: 596 }
                }
              }
            ],
            position: {
              start: { line: 15, column: 1, offset: 399 },
              end: { line: 15, column: 198, offset: 596 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import isDeepEqual from 'https://unpkg.com/rubico/dist/x/isDeepEqual.es.js'\n" +
              '\n' +
              'const isPropADeepEqualTo123Array = isDeepEqual(object => object.a, [1, 2, 3])\n' +
              '\n' +
              'console.log(\n' +
              '  isPropADeepEqualTo123Array({ a: [1, 2, 3] }),\n' +
              ') // true',
            position: {
              start: { line: 17, column: 1, offset: 598 },
              end: { line: 25, column: 4, offset: 855 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 25, column: 4, offset: 855 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isDeepEqual.js'
  },
  {
    name: 'isEmpty',
    benchmark: '_.isEmpty([]): 1e+6: 71.697ms\n' +
      'isEmpty([]): 1e+6: 9.229ms\n' +
      'R.isEmpty([]): 1e+6: 3.314s\n' +
      '\n' +
      '2020-10-01 richytong\n' +
      '_.isEmpty([]): 1e+6: 71.369ms\n' +
      'isEmpty([]): 1e+6: 4.438ms\n' +
      'R.isEmpty([]): 1e+6: 3.497s',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isEmpty',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_.isEmpty([]): 1e+6: 71.697ms\n' +
                  'isEmpty([]): 1e+6: 9.229ms\n' +
                  'R.isEmpty([]): 1e+6: 3.314s',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 28, offset: 84 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 28, offset: 84 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '2020-10-01 richytong\n' +
                  '_.isEmpty([]): 1e+6: 71.369ms\n' +
                  'isEmpty([]): 1e+6: 4.438ms\n' +
                  'R.isEmpty([]): 1e+6: 3.497s',
                position: {
                  start: { line: 5, column: 1, offset: 86 },
                  end: { line: 8, column: 28, offset: 191 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 86 },
              end: { line: 8, column: 28, offset: 191 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 28, offset: 191 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isEmpty.benchmark.js'
  },
  {
    name: 'isEmpty',
    synopsis: '```coffeescript [specscript]\nisEmpty(value any) -> boolean\n```',
    description: 'Check if a value is empty.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import isEmpty from 'https://unpkg.com/rubico/dist/x/isEmpty.es.js'\n" +
      '\n' +
      "console.log('', isEmpty('')) // true\n" +
      'console.log([], isEmpty([])) // true\n' +
      'console.log({}, isEmpty({})) // true\n' +
      'console.log([1, 2, 3], isEmpty([1, 2, 3])) // false\n' +
      'console.log(new Set([1, 2, 3]), isEmpty(new Set([1, 2, 3]))) // false\n' +
      'console.log({ a: 1, b: 2, c: 3 }, isEmpty({ a: 1, b: 2, c: 3 })) // false\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isEmpty',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'isEmpty(value any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 62 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 62 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Check if a value is empty.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 27, offset: 26 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 27, offset: 26 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import isEmpty from 'https://unpkg.com/rubico/dist/x/isEmpty.es.js'\n" +
              '\n' +
              "console.log('', isEmpty('')) // true\n" +
              'console.log([], isEmpty([])) // true\n' +
              'console.log({}, isEmpty({})) // true\n' +
              'console.log([1, 2, 3], isEmpty([1, 2, 3])) // false\n' +
              'console.log(new Set([1, 2, 3]), isEmpty(new Set([1, 2, 3]))) // false\n' +
              'console.log({ a: 1, b: 2, c: 3 }, isEmpty({ a: 1, b: 2, c: 3 })) // false',
            position: {
              start: { line: 3, column: 1, offset: 28 },
              end: { line: 12, column: 4, offset: 434 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 434 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isEmpty.js'
  },
  {
    name: 'isEqual',
    benchmark: 'isEqual(1, 1): 1e+6: 4.253ms\n' +
      '_.isEqual(1, 1): 1e+6: 5.162ms\n' +
      '\n' +
      'isEqual(1, 2): 1e+6: 4.183ms\n' +
      '_.isEqual(1, 2): 1e+6: 5.894ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isEqual',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isEqual(1, 1): 1e+6: 4.253ms\n_.isEqual(1, 1): 1e+6: 5.162ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 31, offset: 59 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 31, offset: 59 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isEqual(1, 2): 1e+6: 4.183ms\n_.isEqual(1, 2): 1e+6: 5.894ms',
                position: {
                  start: { line: 4, column: 1, offset: 61 },
                  end: { line: 5, column: 31, offset: 120 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 1, offset: 61 },
              end: { line: 5, column: 31, offset: 120 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 31, offset: 120 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isEqual.benchmark.js'
  },
  {
    name: 'isFunction',
    benchmark: 'isFunction(f): 1e+7: 12.667ms\n_isFunction(f): 1e+7: 12.677ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isFunction',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isFunction(f): 1e+7: 12.667ms\n_isFunction(f): 1e+7: 12.677ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 31, offset: 60 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 31, offset: 60 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 2, column: 31, offset: 60 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isFunction.benchmark.js'
  },
  {
    name: 'isFunction',
    synopsis: '```coffeescript [specscript]\nisFunction(value any) -> boolean\n```',
    description: 'Determine whether a value is a function.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import isFunction from 'https://unpkg.com/rubico/dist/x/isFunction.es.js'\n" +
      '\n' +
      'const add = (a, b) => a + b\n' +
      '\n' +
      'console.log(\n' +
      '  isFunction(add),\n' +
      ') // true\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isFunction',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'isFunction(value any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 65 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 65 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Determine whether a value is a function.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 41, offset: 40 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 41, offset: 40 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import isFunction from 'https://unpkg.com/rubico/dist/x/isFunction.es.js'\n" +
              '\n' +
              'const add = (a, b) => a + b\n' +
              '\n' +
              'console.log(\n' +
              '  isFunction(add),\n' +
              ') // true',
            position: {
              start: { line: 3, column: 1, offset: 42 },
              end: { line: 11, column: 4, offset: 218 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 4, offset: 218 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isFunction.js'
  },
  {
    name: '_isIn',
    synopsis: '```coffeescript [specscript]\n' +
      '_isIn(value any, container Array|Object|String|Set|Map) -> boolean\n' +
      '```',
    description: 'Counterpart to includes. Check if a collection includes another value.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import isIn from 'https://unpkg.com/rubico/dist/x/isIn.es.js'\n" +
      '\n' +
      'console.log(\n' +
      '  isIn(1, [1, 2, 3])\n' +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      '  isIn(4, [1, 2, 3])\n' +
      ') // false\n' +
      '\n' +
      'console.log(\n' +
      '  isIn(1, { a: 1 })\n' +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      '  isIn(2, { a: 1 })\n' +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      "  isIn('a', 'abc')\n" +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      "  isIn('ab', 'abc')\n" +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      "  isIn('d', 'abc')\n" +
      ') // false\n' +
      '\n' +
      'console.log(\n' +
      '  isIn(1, new Set([1, 2, 3]))\n' +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      '  isIn(4, new Set([1, 2, 3]))\n' +
      ') // false\n' +
      '\n' +
      'console.log(\n' +
      '  isIn(1, new Map([[1, 1], [2, 2], [3, 3]]))\n' +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      '  isIn(4, new Map([[1, 1], [2, 2], [3, 3]]))\n' +
      ') // false\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_isIn',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_isIn(value any, container Array|Object|String|Set|Map) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 99 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 99 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Counterpart to includes. Check if a collection includes another value.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 71, offset: 70 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 71, offset: 70 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import isIn from 'https://unpkg.com/rubico/dist/x/isIn.es.js'\n" +
              '\n' +
              'console.log(\n' +
              '  isIn(1, [1, 2, 3])\n' +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              '  isIn(4, [1, 2, 3])\n' +
              ') // false\n' +
              '\n' +
              'console.log(\n' +
              '  isIn(1, { a: 1 })\n' +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              '  isIn(2, { a: 1 })\n' +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              "  isIn('a', 'abc')\n" +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              "  isIn('ab', 'abc')\n" +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              "  isIn('d', 'abc')\n" +
              ') // false\n' +
              '\n' +
              'console.log(\n' +
              '  isIn(1, new Set([1, 2, 3]))\n' +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              '  isIn(4, new Set([1, 2, 3]))\n' +
              ') // false\n' +
              '\n' +
              'console.log(\n' +
              '  isIn(1, new Map([[1, 1], [2, 2], [3, 3]]))\n' +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              '  isIn(4, new Map([[1, 1], [2, 2], [3, 3]]))\n' +
              ') // false',
            position: {
              start: { line: 3, column: 1, offset: 72 },
              end: { line: 49, column: 4, offset: 722 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 49, column: 4, offset: 722 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isIn.js'
  },
  {
    name: 'isIn',
    synopsis: '```coffeescript [specscript]\n' +
      'isIn(container Array|Object|String|Set|Map)(value any) -> boolean\n' +
      '```',
    description: 'Counterpart to includes. Check if a collection includes another value.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import isIn from 'https://unpkg.com/rubico/dist/x/isIn.es.js'\n" +
      '\n' +
      'console.log(\n' +
      '  isIn([1, 2, 3](1)\n' +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      '  isIn([1, 2, 3](4)\n' +
      ') // false\n' +
      '\n' +
      'console.log(\n' +
      '  isIn({ a: 1 })(1)\n' +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      '  isIn({ a: 1 })(2)\n' +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      "  isIn('abc')('a')\n" +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      "  isIn('abc')('ab')\n" +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      "  isIn('abc')('d')\n" +
      ') // false\n' +
      '\n' +
      'console.log(\n' +
      '  isIn(new Set([1, 2, 3]))(1)\n' +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      '  isIn(new Set([1, 2, 3]))(4)\n' +
      ') // false\n' +
      '\n' +
      'console.log(\n' +
      '  isIn(new Map([[1, 1], [2, 2], [3, 3]]))(1)\n' +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      '  isIn(new Map([[1, 1], [2, 2], [3, 3]]))(4)\n' +
      ') // false\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isIn',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'isIn(container Array|Object|String|Set|Map)(value any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 98 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 98 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Counterpart to includes. Check if a collection includes another value.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 71, offset: 70 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 71, offset: 70 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import isIn from 'https://unpkg.com/rubico/dist/x/isIn.es.js'\n" +
              '\n' +
              'console.log(\n' +
              '  isIn([1, 2, 3](1)\n' +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              '  isIn([1, 2, 3](4)\n' +
              ') // false\n' +
              '\n' +
              'console.log(\n' +
              '  isIn({ a: 1 })(1)\n' +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              '  isIn({ a: 1 })(2)\n' +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              "  isIn('abc')('a')\n" +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              "  isIn('abc')('ab')\n" +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              "  isIn('abc')('d')\n" +
              ') // false\n' +
              '\n' +
              'console.log(\n' +
              '  isIn(new Set([1, 2, 3]))(1)\n' +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              '  isIn(new Set([1, 2, 3]))(4)\n' +
              ') // false\n' +
              '\n' +
              'console.log(\n' +
              '  isIn(new Map([[1, 1], [2, 2], [3, 3]]))(1)\n' +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              '  isIn(new Map([[1, 1], [2, 2], [3, 3]]))(4)\n' +
              ') // false',
            position: {
              start: { line: 3, column: 1, offset: 72 },
              end: { line: 49, column: 4, offset: 720 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 49, column: 4, offset: 720 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isIn.js'
  },
  {
    name: 'isObject',
    benchmark: 'isObject({}): 1e+7: 14.796ms\n' +
      '_.isObject({}): 1e+7: 14.601ms\n' +
      '\n' +
      'richytong 2020-10-01\n' +
      'isObject({}): 1e+7: 14.69ms\n' +
      '_.isObject({}): 1e+7: 14.536ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isObject',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isObject({}): 1e+7: 14.796ms\n_.isObject({}): 1e+7: 14.601ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 31, offset: 59 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 31, offset: 59 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'richytong 2020-10-01\n' +
                  'isObject({}): 1e+7: 14.69ms\n' +
                  '_.isObject({}): 1e+7: 14.536ms',
                position: {
                  start: { line: 4, column: 1, offset: 61 },
                  end: { line: 6, column: 31, offset: 140 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 1, offset: 61 },
              end: { line: 6, column: 31, offset: 140 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 31, offset: 140 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isObject.benchmark.js'
  },
  {
    name: 'isObject',
    synopsis: '```coffeescript [specscript]\nisObject(value any) -> boolean\n```',
    description: 'Determine whether a value has the [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types) of `Object`.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import isObject from 'https://unpkg.com/rubico/dist/x/isObject.es.js'\n" +
      '\n' +
      'console.log(\n' +
      '  isObject({ a: 1, b: 2, c: 3 }),\n' +
      ') // true\n' +
      '\n' +
      'console.log(\n' +
      "  isObject('hey'),\n" +
      ') // false\n' +
      '\n' +
      'console.log(\n' +
      '  isObject(new Set([1, 2, 3])),\n' +
      ') // true\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isObject',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'isObject(value any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 63 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 63 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Determine whether a value has the ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 35, offset: 34 }
                }
              },
              {
                type: 'link',
                title: null,
                url: 'http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types',
                children: [
                  {
                    type: 'text',
                    value: 'language type',
                    position: {
                      start: { line: 1, column: 36, offset: 35 },
                      end: { line: 1, column: 49, offset: 48 }
                    }
                  }
                ],
                position: {
                  start: { line: 1, column: 35, offset: 34 },
                  end: { line: 1, column: 129, offset: 128 }
                }
              },
              {
                type: 'text',
                value: ' of ',
                position: {
                  start: { line: 1, column: 129, offset: 128 },
                  end: { line: 1, column: 133, offset: 132 }
                }
              },
              {
                type: 'inlineCode',
                value: 'Object',
                position: {
                  start: { line: 1, column: 133, offset: 132 },
                  end: { line: 1, column: 141, offset: 140 }
                }
              },
              {
                type: 'text',
                value: '.',
                position: {
                  start: { line: 1, column: 141, offset: 140 },
                  end: { line: 1, column: 142, offset: 141 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 142, offset: 141 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import isObject from 'https://unpkg.com/rubico/dist/x/isObject.es.js'\n" +
              '\n' +
              'console.log(\n' +
              '  isObject({ a: 1, b: 2, c: 3 }),\n' +
              ') // true\n' +
              '\n' +
              'console.log(\n' +
              "  isObject('hey'),\n" +
              ') // false\n' +
              '\n' +
              'console.log(\n' +
              '  isObject(new Set([1, 2, 3])),\n' +
              ') // true',
            position: {
              start: { line: 3, column: 1, offset: 143 },
              end: { line: 17, column: 4, offset: 401 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 17, column: 4, offset: 401 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isObject.js'
  },
  {
    name: 'isString',
    benchmark: 'isString({}): 1e+7: 15.017ms\n' +
      '_.isString({}): 1e+7: 418.155ms\n' +
      'isString([]): 1e+7: 14.653ms\n' +
      '_.isString([]): 1e+7: 15.373ms\n' +
      "isString('hey'): 1e+7: 12.794ms\n" +
      "_.isString('hey'): 1e+7: 12.904ms\n" +
      'isString(null): 1e+7: 13.342ms\n' +
      '_.isString(null): 1e+7: 13.878ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isString',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isString({}): 1e+7: 15.017ms\n' +
                  '_.isString({}): 1e+7: 418.155ms\n' +
                  'isString([]): 1e+7: 14.653ms\n' +
                  '_.isString([]): 1e+7: 15.373ms\n' +
                  "isString('hey'): 1e+7: 12.794ms\n" +
                  "_.isString('hey'): 1e+7: 12.904ms\n" +
                  'isString(null): 1e+7: 13.342ms\n' +
                  '_.isString(null): 1e+7: 13.878ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 8, column: 33, offset: 250 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 33, offset: 250 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 33, offset: 250 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isString.benchmarks.js'
  },
  {
    name: 'isString',
    synopsis: '```coffeescript [specscript]\nisString(value any) -> boolean\n```',
    description: 'Determine whether a value is a string.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import isString from 'https://unpkg.com/rubico/dist/x/isString.es.js'\n" +
      '\n' +
      'console.log(\n' +
      "  isString('hey'),\n" +
      ') // true\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'isString',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 9, offset: 8 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 9, offset: 8 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 9, offset: 8 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'isString(value any) -> boolean',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 63 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 63 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Determine whether a value is a string.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 39, offset: 38 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 39, offset: 38 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import isString from 'https://unpkg.com/rubico/dist/x/isString.es.js'\n" +
              '\n' +
              'console.log(\n' +
              "  isString('hey'),\n" +
              ') // true',
            position: {
              start: { line: 3, column: 1, offset: 40 },
              end: { line: 9, column: 4, offset: 183 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 183 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/isString.js'
  },
  {
    name: 'keys',
    synopsis: '```coffeescript [specscript]\n' +
      'keys(value string|Array|Set|Map|object) -> Array<key number|string>\n' +
      '```',
    description: 'Get an array of keys from an instance.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import keys from 'https://unpkg.com/rubico/dist/x/keys.es.js'\n" +
      '\n' +
      "console.log(keys({ a: 1, b: 2, c: 3 })) // ['a', 'b', 'c']\n" +
      "console.log(keys(['hello', 'world'])) // [0, 1]\n" +
      "console.log(keys(new Map([['hello', 1], ['world', 2]]))) // ['hello', 'world']\n" +
      '```',
    since: '1.6.25',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'keys',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'keys(value string|Array|Set|Map|object) -> Array<key number|string>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 100 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 100 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Get an array of keys from an instance.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 39, offset: 38 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 39, offset: 38 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import keys from 'https://unpkg.com/rubico/dist/x/keys.es.js'\n" +
              '\n' +
              "console.log(keys({ a: 1, b: 2, c: 3 })) // ['a', 'b', 'c']\n" +
              "console.log(keys(['hello', 'world'])) // [0, 1]\n" +
              "console.log(keys(new Map([['hello', 1], ['world', 2]]))) // ['hello', 'world']",
            position: {
              start: { line: 3, column: 1, offset: 40 },
              end: { line: 9, column: 4, offset: 319 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 319 }
        }
      },
      since: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '1.6.25',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/keys.js'
  },
  {
    name: 'last',
    benchmark: 'last(arr): 1e+6: 5.154ms\n' +
      '_.last(arr): 1e+6: 5.191ms\n' +
      'R.last(arr): 1e+6: 518.671ms\n' +
      '\n' +
      'last([]): 1e+6: 5.204ms\n' +
      '_.last([]): 1e+6: 5.468ms\n' +
      'R.last([]): 1e+6: 498.638ms\n' +
      '\n' +
      "last('hey'): 1e+6: 5.776ms\n" +
      "_.last('hey'): 1e+6: 6.1ms\n" +
      "R.last('hey'): 1e+6: 813.653ms\n" +
      '\n' +
      "last(''): 1e+6: 3.975ms\n" +
      "_.last(''): 1e+6: 4.306ms\n" +
      "R.last(''): 1e+6: 785.416ms\n" +
      '\n' +
      'last(null): 1e+6: 3.626ms\n' +
      '_.last(null): 1e+6: 4.121ms\n' +
      'R.last(null): TypeError',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'last',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'last(arr): 1e+6: 5.154ms\n' +
                  '_.last(arr): 1e+6: 5.191ms\n' +
                  'R.last(arr): 1e+6: 518.671ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 29, offset: 80 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 29, offset: 80 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'last([]): 1e+6: 5.204ms\n' +
                  '_.last([]): 1e+6: 5.468ms\n' +
                  'R.last([]): 1e+6: 498.638ms',
                position: {
                  start: { line: 5, column: 1, offset: 82 },
                  end: { line: 7, column: 28, offset: 159 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 82 },
              end: { line: 7, column: 28, offset: 159 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "last('hey'): 1e+6: 5.776ms\n" +
                  "_.last('hey'): 1e+6: 6.1ms\n" +
                  "R.last('hey'): 1e+6: 813.653ms",
                position: {
                  start: { line: 9, column: 1, offset: 161 },
                  end: { line: 11, column: 31, offset: 245 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 161 },
              end: { line: 11, column: 31, offset: 245 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "last(''): 1e+6: 3.975ms\n" +
                  "_.last(''): 1e+6: 4.306ms\n" +
                  "R.last(''): 1e+6: 785.416ms",
                position: {
                  start: { line: 13, column: 1, offset: 247 },
                  end: { line: 15, column: 28, offset: 324 }
                }
              }
            ],
            position: {
              start: { line: 13, column: 1, offset: 247 },
              end: { line: 15, column: 28, offset: 324 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'last(null): 1e+6: 3.626ms\n' +
                  '_.last(null): 1e+6: 4.121ms\n' +
                  'R.last(null): TypeError',
                position: {
                  start: { line: 17, column: 1, offset: 326 },
                  end: { line: 19, column: 24, offset: 403 }
                }
              }
            ],
            position: {
              start: { line: 17, column: 1, offset: 326 },
              end: { line: 19, column: 24, offset: 403 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 19, column: 24, offset: 403 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/last.benchmark.js'
  },
  {
    name: 'last',
    synopsis: '```coffeescript [specscript]\n' +
      'var value Array|string\n' +
      '\n' +
      'last(value) -> any\n' +
      '```',
    description: 'Get the last element of a collection\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import last from 'https://unpkg.com/rubico/dist/x/last.es.js'\n" +
      '\n' +
      'console.log(last([1, 2, 3])) // 3\n' +
      'console.log(last([])) // undefined\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'last',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var value Array|string\n\nlast(value) -> any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 75 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 75 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Get the last element of a collection',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 37, offset: 36 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 37, offset: 36 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import last from 'https://unpkg.com/rubico/dist/x/last.es.js'\n" +
              '\n' +
              'console.log(last([1, 2, 3])) // 3\n' +
              'console.log(last([])) // undefined',
            position: {
              start: { line: 3, column: 1, offset: 38 },
              end: { line: 8, column: 4, offset: 200 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 200 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/last.js'
  },
  {
    name: '_maxBy',
    synopsis: '```coffeescript [specscript]\n' +
      '_maxBy(array Array, path string) -> maxElementByPath any\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '_maxBy',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: '_maxBy(array Array, path string) -> maxElementByPath any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 89 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 89 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/maxBy.js'
  },
  {
    name: 'maxBy',
    synopsis: '```coffeescript [specscript]\n' +
      'maxBy(array Array, path string) -> maxElementByPath any\n' +
      '\n' +
      'maxBy(path string)(array Array) -> maxElementByPath any\n' +
      '```',
    description: 'Finds the element that is the max by a property denoted by path.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import maxBy from 'https://unpkg.com/rubico/dist/x/maxBy.es.js'\n" +
      '\n' +
      'const array = [{ a: 1 }, { a: 2 }, { a: 3 }]\n' +
      '\n' +
      "const maxElement = maxBy(array, 'a')\n" +
      '\n' +
      'console.log(maxElement) // { a: 3 }\n' +
      '```\n' +
      '\n' +
      '`maxBy` composes in a lazy way.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import maxBy from 'https://unpkg.com/rubico/dist/x/maxBy.es.js'\n" +
      '\n' +
      'const numbers = [1, 2, 3]\n' +
      '\n' +
      'const maxElement = pipe(numbers, [\n' +
      '  map(number => number ** 2),\n' +
      '  map(number => ({ a: { b: { c: number } } })),\n' +
      "  maxBy('a.b.c')\n" +
      '])\n' +
      '\n' +
      'console.log(maxElement) // { a: { b: { c: 9 } } }\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'maxBy',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'maxBy(array Array, path string) -> maxElementByPath any\n' +
              '\n' +
              'maxBy(path string)(array Array) -> maxElementByPath any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 145 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 145 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Finds the element that is the max by a property denoted by path.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 65, offset: 64 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 65, offset: 64 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import maxBy from 'https://unpkg.com/rubico/dist/x/maxBy.es.js'\n" +
              '\n' +
              'const array = [{ a: 1 }, { a: 2 }, { a: 3 }]\n' +
              '\n' +
              "const maxElement = maxBy(array, 'a')\n" +
              '\n' +
              'console.log(maxElement) // { a: 3 }',
            position: {
              start: { line: 3, column: 1, offset: 66 },
              end: { line: 11, column: 4, offset: 281 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'maxBy',
                position: {
                  start: { line: 13, column: 1, offset: 283 },
                  end: { line: 13, column: 8, offset: 290 }
                }
              },
              {
                type: 'text',
                value: ' composes in a lazy way.',
                position: {
                  start: { line: 13, column: 8, offset: 290 },
                  end: { line: 13, column: 32, offset: 314 }
                }
              }
            ],
            position: {
              start: { line: 13, column: 1, offset: 283 },
              end: { line: 13, column: 32, offset: 314 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import maxBy from 'https://unpkg.com/rubico/dist/x/maxBy.es.js'\n" +
              '\n' +
              'const numbers = [1, 2, 3]\n' +
              '\n' +
              'const maxElement = pipe(numbers, [\n' +
              '  map(number => number ** 2),\n' +
              '  map(number => ({ a: { b: { c: number } } })),\n' +
              "  maxBy('a.b.c')\n" +
              '])\n' +
              '\n' +
              'console.log(maxElement) // { a: { b: { c: 9 } } }',
            position: {
              start: { line: 15, column: 1, offset: 316 },
              end: { line: 27, column: 4, offset: 622 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 27, column: 4, offset: 622 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/maxBy.js'
  },
  {
    name: 'noop',
    synopsis: '```coffeescript [specscript]\nnoop() -> undefined\n```',
    description: "Doesn't do anything.\n" +
      '\n' +
      '```javascript [playground]\n' +
      "import noop from 'https://unpkg.com/rubico/dist/x/noop.es.js'\n" +
      '\n' +
      'console.log(\n' +
      '  noop(),\n' +
      ') // undefined\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'noop',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'noop() -> undefined',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 52 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 52 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: "Doesn't do anything.",
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 21, offset: 20 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 21, offset: 20 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import noop from 'https://unpkg.com/rubico/dist/x/noop.es.js'\n" +
              '\n' +
              'console.log(\n' +
              '  noop(),\n' +
              ') // undefined',
            position: {
              start: { line: 3, column: 1, offset: 22 },
              end: { line: 9, column: 4, offset: 153 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 153 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/noop.js'
  },
  {
    name: 'pluck',
    synopsis: '```coffeescript [specscript]\n' +
      'pluck(path string)(array Array) -> result Array\n' +
      '\n' +
      'pluck(array Array, path string) -> result Array\n' +
      '```',
    description: 'Creates an array of picked properties denoted by a path from another array.\n' +
      '\n' +
      '`pluck` supports three types of path patterns for nested property access.\n' +
      '\n' +
      " * dot delimited - `'a.b.c'`\n" +
      " * bracket notation - `'a[0].value'`\n" +
      " * an array of keys or indices - `['a', 0, 'value']`\n" +
      '\n' +
      '```javascript [playground]\n' +
      "import pluck from 'https://unpkg.com/rubico/dist/x/pluck.es.js'\n" +
      '\n' +
      'const users = [\n' +
      "  { name: 'John', age: 33 },\n" +
      "  { name: 'Jane', age: 51 },\n" +
      "  { name: 'Jim', age: 22 },\n" +
      ']\n' +
      '\n' +
      "const usernames = pluck(users, 'name')\n" +
      '\n' +
      "console.log(usernames) // ['John', 'Jane', 'Jim']\n" +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'pluck',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'pluck(path string)(array Array) -> result Array\n' +
              '\n' +
              'pluck(array Array, path string) -> result Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 129 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 129 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Creates an array of picked properties denoted by a path from another array.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 76, offset: 75 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 76, offset: 75 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'inlineCode',
                value: 'pluck',
                position: {
                  start: { line: 3, column: 1, offset: 77 },
                  end: { line: 3, column: 8, offset: 84 }
                }
              },
              {
                type: 'text',
                value: ' supports three types of path patterns for nested property access.',
                position: {
                  start: { line: 3, column: 8, offset: 84 },
                  end: { line: 3, column: 74, offset: 150 }
                }
              }
            ],
            position: {
              start: { line: 3, column: 1, offset: 77 },
              end: { line: 3, column: 74, offset: 150 }
            }
          },
          {
            type: 'list',
            ordered: false,
            start: null,
            spread: false,
            children: [
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'dot delimited - ',
                        position: {
                          start: { line: 5, column: 4, offset: 155 },
                          end: { line: 5, column: 20, offset: 171 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "'a.b.c'",
                        position: {
                          start: { line: 5, column: 20, offset: 171 },
                          end: { line: 5, column: 29, offset: 180 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 5, column: 4, offset: 155 },
                      end: { line: 5, column: 29, offset: 180 }
                    }
                  }
                ],
                position: {
                  start: { line: 5, column: 2, offset: 153 },
                  end: { line: 5, column: 29, offset: 180 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'bracket notation - ',
                        position: {
                          start: { line: 6, column: 4, offset: 184 },
                          end: { line: 6, column: 23, offset: 203 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "'a[0].value'",
                        position: {
                          start: { line: 6, column: 23, offset: 203 },
                          end: { line: 6, column: 37, offset: 217 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 6, column: 4, offset: 184 },
                      end: { line: 6, column: 37, offset: 217 }
                    }
                  }
                ],
                position: {
                  start: { line: 6, column: 2, offset: 182 },
                  end: { line: 6, column: 37, offset: 217 }
                }
              },
              {
                type: 'listItem',
                spread: false,
                checked: null,
                children: [
                  {
                    type: 'paragraph',
                    children: [
                      {
                        type: 'text',
                        value: 'an array of keys or indices - ',
                        position: {
                          start: { line: 7, column: 4, offset: 221 },
                          end: { line: 7, column: 34, offset: 251 }
                        }
                      },
                      {
                        type: 'inlineCode',
                        value: "['a', 0, 'value']",
                        position: {
                          start: { line: 7, column: 34, offset: 251 },
                          end: { line: 7, column: 53, offset: 270 }
                        }
                      }
                    ],
                    position: {
                      start: { line: 7, column: 4, offset: 221 },
                      end: { line: 7, column: 53, offset: 270 }
                    }
                  }
                ],
                position: {
                  start: { line: 7, column: 2, offset: 219 },
                  end: { line: 7, column: 53, offset: 270 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 2, offset: 153 },
              end: { line: 7, column: 53, offset: 270 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import pluck from 'https://unpkg.com/rubico/dist/x/pluck.es.js'\n" +
              '\n' +
              'const users = [\n' +
              "  { name: 'John', age: 33 },\n" +
              "  { name: 'Jane', age: 51 },\n" +
              "  { name: 'Jim', age: 22 },\n" +
              ']\n' +
              '\n' +
              "const usernames = pluck(users, 'name')\n" +
              '\n' +
              "console.log(usernames) // ['John', 'Jane', 'Jim']",
            position: {
              start: { line: 9, column: 1, offset: 272 },
              end: { line: 21, column: 4, offset: 562 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 21, column: 4, offset: 562 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/pluck.js'
  },
  {
    name: 'prepend',
    synopsis: '```coffeescript [specscript]\n' +
      'prepend(\n' +
      '  element string|Array,\n' +
      ')(value string|Array) -> string|array\n' +
      '```',
    description: 'Prepend a string or an array.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import prepend from 'https://unpkg.com/rubico/dist/x/prepend.es.js'\n" +
      '\n' +
      "const myArray = ['orange', 'apple']\n" +
      '\n' +
      '{\n' +
      "  const result = prepend(['ananas'])(myArray)\n" +
      "  console.log(result) // ['ananas', 'orange', 'apple']\n" +
      '}\n' +
      '\n' +
      '{\n' +
      "  const result = prepend('ananas')(myArray)\n" +
      "  console.log(result) // ['ananas', 'orange', 'apple']\n" +
      '}\n' +
      '\n' +
      '{\n' +
      "  const result = prepend('hello ')('world')\n" +
      "  console.log(result) // 'hello world'\n" +
      '}\n' +
      '```',
    since: '1.7.3',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'prepend',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 8, offset: 7 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 8, offset: 7 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 8, offset: 7 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'prepend(\n' +
              '  element string|Array,\n' +
              ')(value string|Array) -> string|array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 103 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 103 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Prepend a string or an array.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 30, offset: 29 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 30, offset: 29 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import prepend from 'https://unpkg.com/rubico/dist/x/prepend.es.js'\n" +
              '\n' +
              "const myArray = ['orange', 'apple']\n" +
              '\n' +
              '{\n' +
              "  const result = prepend(['ananas'])(myArray)\n" +
              "  console.log(result) // ['ananas', 'orange', 'apple']\n" +
              '}\n' +
              '\n' +
              '{\n' +
              "  const result = prepend('ananas')(myArray)\n" +
              "  console.log(result) // ['ananas', 'orange', 'apple']\n" +
              '}\n' +
              '\n' +
              '{\n' +
              "  const result = prepend('hello ')('world')\n" +
              "  console.log(result) // 'hello world'\n" +
              '}',
            position: {
              start: { line: 3, column: 1, offset: 31 },
              end: { line: 22, column: 4, offset: 464 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 22, column: 4, offset: 464 }
        }
      },
      since: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '1.7.3',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/prepend.js'
  },
  {
    name: 'size',
    benchmark: 'array.length: 1e+7: 12.207ms\n' +
      'size(array): 1e+7: 12.931ms\n' +
      '_.size(array): 1e+7: 581.128ms\n' +
      'R.length(array): 1e+7: 1.887s',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'size',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'array.length: 1e+7: 12.207ms\n' +
                  'size(array): 1e+7: 12.931ms\n' +
                  '_.size(array): 1e+7: 581.128ms\n' +
                  'R.length(array): 1e+7: 1.887s',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 4, column: 30, offset: 117 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 4, column: 30, offset: 117 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 4, column: 30, offset: 117 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/size.benchmark.js'
  },
  {
    name: 'size',
    synopsis: '```coffeescript [specscript]\nsize(value any) -> number\n```',
    description: 'Get the count of elements in a value.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import size from 'https://unpkg.com/rubico/dist/x/size.es.js'\n" +
      '\n' +
      'console.log(size([1, 2, 3])) // 3\n' +
      "console.log(size('hey')) // 3\n" +
      'console.log(size(new Set([1, 2, 3]))) // 3\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'size',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'size(value any) -> number',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 4, offset: 58 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 4, offset: 58 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Get the count of elements in a value.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 38, offset: 37 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 38, offset: 37 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import size from 'https://unpkg.com/rubico/dist/x/size.es.js'\n" +
              '\n' +
              'console.log(size([1, 2, 3])) // 3\n' +
              "console.log(size('hey')) // 3\n" +
              'console.log(size(new Set([1, 2, 3]))) // 3',
            position: {
              start: { line: 3, column: 1, offset: 39 },
              end: { line: 9, column: 4, offset: 239 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 239 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/size.js'
  },
  {
    name: 'timeInLoop',
    synopsis: 'timeInLoop(desc string, loopCount number, fn function) -> undefined',
    description: 'Logs the amount of time required for a function to run a certain number of times\n' +
      '\n' +
      '```coffeescript [specscript]\n' +
      "timeInLoop('hello', 1e6, () => 'hello') // hello: 1e+6: 3.474ms\n" +
      '```\n' +
      '\n' +
      'Reference: https://gist.github.com/funfunction/91b5876a5f562e1e352aed0fcabc3858',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'timeInLoop',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'timeInLoop(desc string, loopCount number, fn function) -> undefined',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 68, offset: 67 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 68, offset: 67 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 68, offset: 67 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Logs the amount of time required for a function to run a certain number of times',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 81, offset: 80 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 81, offset: 80 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: "timeInLoop('hello', 1e6, () => 'hello') // hello: 1e+6: 3.474ms",
            position: {
              start: { line: 3, column: 1, offset: 82 },
              end: { line: 5, column: 4, offset: 178 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Reference: https://gist.github.com/funfunction/91b5876a5f562e1e352aed0fcabc3858',
                position: {
                  start: { line: 7, column: 1, offset: 180 },
                  end: { line: 7, column: 80, offset: 259 }
                }
              }
            ],
            position: {
              start: { line: 7, column: 1, offset: 180 },
              end: { line: 7, column: 80, offset: 259 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 80, offset: 259 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/timeInLoop.js'
  },
  {
    name: 'timeInLoop.async',
    synopsis: 'timeInLoop.async(desc string, loopCount number, fn function) -> undefined',
    description: 'Like timeInLoop, but every call is awaited\n' +
      '\n' +
      '```coffeescript [specscript]\n' +
      "timeInLoop.async('async hello', 1e6, async () => 'hello') // async hello: 1e+6: 116.006ms\n" +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'timeInLoop.async',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 17, offset: 16 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 17, offset: 16 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 17, offset: 16 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'timeInLoop.async(desc string, loopCount number, fn function) -> undefined',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 74, offset: 73 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 74, offset: 73 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 74, offset: 73 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Like timeInLoop, but every call is awaited',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 43, offset: 42 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 43, offset: 42 }
            }
          },
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: "timeInLoop.async('async hello', 1e6, async () => 'hello') // async hello: 1e+6: 116.006ms",
            position: {
              start: { line: 3, column: 1, offset: 44 },
              end: { line: 5, column: 4, offset: 166 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 166 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/timeInLoop.js'
  },
  {
    name: 'trace',
    synopsis: '```coffeescript [specscript]\n' +
      'var args ...any,\n' +
      '  resolved any,\n' +
      '  resolver ...args=>resolved\n' +
      '\n' +
      'trace(...args) -> args[0]\n' +
      '\n' +
      'trace(resolver)(...args) -> resolved\n' +
      '```',
    description: 'Log a value out to the console, returning the value. If the value is a function, treat it as a resolver.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import trace from 'https://unpkg.com/rubico/dist/x/trace.es.js'\n" +
      '\n' +
      'pipe([\n' +
      '  trace,\n' +
      '  trace(value => value.toUpperCase()),\n' +
      "])('hey') // hey\n" +
      '          // HEY\n' +
      "console.log('check your console')\n" +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'trace',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var args ...any,\n' +
              '  resolved any,\n' +
              '  resolver ...args=>resolved\n' +
              '\n' +
              'trace(...args) -> args[0]\n' +
              '\n' +
              'trace(resolver)(...args) -> resolved',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 9, column: 4, offset: 159 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 159 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Log a value out to the console, returning the value. If the value is a function, treat it as a resolver.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 105, offset: 104 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 105, offset: 104 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import trace from 'https://unpkg.com/rubico/dist/x/trace.es.js'\n" +
              '\n' +
              'pipe([\n' +
              '  trace,\n' +
              '  trace(value => value.toUpperCase()),\n' +
              "])('hey') // hey\n" +
              '          // HEY\n' +
              "console.log('check your console')",
            position: {
              start: { line: 3, column: 1, offset: 106 },
              end: { line: 12, column: 4, offset: 324 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 12, column: 4, offset: 324 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/trace.js'
  },
  {
    name: 'tracef',
    DEPRECATED: '',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'tracef',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      DEPRECATED: {
        type: 'root',
        children: [],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/tracef.js'
  },
  {
    name: 'unionWith',
    benchmark: 'unionWith((a, b) => a.a == b.a)(nestedObjects): 1e+5: 95.553ms\n' +
      '_.unionWith((a, b) => a.a == b.a)(nestedObjects): 1e+5: 100.701ms\n' +
      '\n' +
      'richytong 2020-10-01:\n' +
      'unionWith((a, b) => a.a == b.a)(nestedObjects): 1e+5: 38.952ms\n' +
      '_.unionWith((a, b) => a.a == b.a)(nestedObjects): 1e+5: 101.171ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'unionWith',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'unionWith((a, b) => a.a == b.a)(nestedObjects): 1e+5: 95.553ms\n' +
                  '_.unionWith((a, b) => a.a == b.a)(nestedObjects): 1e+5: 100.701ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 2, column: 66, offset: 128 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 2, column: 66, offset: 128 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'richytong 2020-10-01:\n' +
                  'unionWith((a, b) => a.a == b.a)(nestedObjects): 1e+5: 38.952ms\n' +
                  '_.unionWith((a, b) => a.a == b.a)(nestedObjects): 1e+5: 101.171ms',
                position: {
                  start: { line: 4, column: 1, offset: 130 },
                  end: { line: 6, column: 66, offset: 280 }
                }
              }
            ],
            position: {
              start: { line: 4, column: 1, offset: 130 },
              end: { line: 6, column: 66, offset: 280 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 66, offset: 280 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/unionWith.benchmark.js'
  },
  {
    name: 'arrayIncludesWith',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  array Array<T>,\n' +
      '  value T,\n' +
      '  comparator (T, T)=>boolean\n' +
      '\n' +
      'arrayIncludesWith\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayIncludesWith',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  array Array<T>,\n' +
              '  value T,\n' +
              '  comparator (T, T)=>boolean\n' +
              '\n' +
              'arrayIncludesWith',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 8, column: 4, offset: 120 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 8, column: 4, offset: 120 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/unionWith.js'
  },
  {
    name: 'arrayUniqWithAsync',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  array Array<T>,\n' +
      '  comparator (T, T)=>Promise|boolean\n' +
      '\n' +
      'arrayUniqWithAsync(array, comparator) -> Promise<Array<T>>\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayUniqWithAsync',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 19, offset: 18 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 19, offset: 18 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 19, offset: 18 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  array Array<T>,\n' +
              '  comparator (T, T)=>Promise|boolean\n' +
              '\n' +
              'arrayUniqWithAsync(array, comparator) -> Promise<Array<T>>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 158 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 158 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/unionWith.js'
  },
  {
    name: 'arrayUniqWith',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  array Array<T>,\n' +
      '  comparator (T, T)=>Promise|boolean\n' +
      '\n' +
      'arrayUniqWith(array, comparator) -> Promise|Array<T>\n' +
      '```',
    TODO: 'rubico/x/uniqWith',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'arrayUniqWith',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 14, offset: 13 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 14, offset: 13 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 14, offset: 13 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  array Array<T>,\n' +
              '  comparator (T, T)=>Promise|boolean\n' +
              '\n' +
              'arrayUniqWith(array, comparator) -> Promise|Array<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 152 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 152 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'rubico/x/uniqWith',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 18, offset: 17 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 18, offset: 17 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 18, offset: 17 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/unionWith.js'
  },
  {
    name: 'unionWith',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  arrayOfArrays Array<Array<T>>,\n' +
      '  comparator (T, T)=>Promise|boolean\n' +
      '\n' +
      'unionWith(comparator)(arrayOfArrays) -> Array<T>\n' +
      '```',
    description: 'Create an array of unique values from an array of arrays with uniqueness determined by a comparator. The comparator is a function that returns a boolean value, `true` if two given values are distinct.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import isDeepEqual from 'https://unpkg.com/rubico/dist/x/isDeepEqual.es.js'\n" +
      "import unionWith from 'https://unpkg.com/rubico/dist/x/unionWith.es.js'\n" +
      '\n' +
      'console.log(\n' +
      '  unionWith(isDeepEqual)([\n' +
      '    [{ a: 1 }, { b: 2 }, { a: 1 }],\n' +
      '    [{ b: 2 }, { b: 2 }, { b: 2 }],\n' +
      '  ]),\n' +
      ') // [{ a: 1 }, { b: 2 }]\n' +
      '```',
    TODO: 'setUnionWith',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'unionWith',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 10, offset: 9 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 10, offset: 9 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 10, offset: 9 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n' +
              '  arrayOfArrays Array<Array<T>>,\n' +
              '  comparator (T, T)=>Promise|boolean\n' +
              '\n' +
              'unionWith(comparator)(arrayOfArrays) -> Array<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 7, column: 4, offset: 163 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 7, column: 4, offset: 163 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Create an array of unique values from an array of arrays with uniqueness determined by a comparator. The comparator is a function that returns a boolean value, ',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 161, offset: 160 }
                }
              },
              {
                type: 'inlineCode',
                value: 'true',
                position: {
                  start: { line: 1, column: 161, offset: 160 },
                  end: { line: 1, column: 167, offset: 166 }
                }
              },
              {
                type: 'text',
                value: ' if two given values are distinct.',
                position: {
                  start: { line: 1, column: 167, offset: 166 },
                  end: { line: 1, column: 201, offset: 200 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 201, offset: 200 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import isDeepEqual from 'https://unpkg.com/rubico/dist/x/isDeepEqual.es.js'\n" +
              "import unionWith from 'https://unpkg.com/rubico/dist/x/unionWith.es.js'\n" +
              '\n' +
              'console.log(\n' +
              '  unionWith(isDeepEqual)([\n' +
              '    [{ a: 1 }, { b: 2 }, { a: 1 }],\n' +
              '    [{ b: 2 }, { b: 2 }, { b: 2 }],\n' +
              '  ]),\n' +
              ') // [{ a: 1 }, { b: 2 }]',
            position: {
              start: { line: 3, column: 1, offset: 202 },
              end: { line: 13, column: 4, offset: 525 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 13, column: 4, offset: 525 }
        }
      },
      TODO: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'setUnionWith',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 13, offset: 12 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 13, offset: 12 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 13, offset: 12 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/unionWith.js'
  },
  {
    name: 'uniq',
    benchmark: 'uniq - original(1000, scatter: 10): 1e+5: 1.947s\n' +
      'uniq - lodash(1000), scatter: 10: 1e+5: 1.767s\n' +
      'uniq - new(1000), scatter: 10: 1e+5: 1.728s\n' +
      '\n' +
      'uniq - original(1000, scatter: 10): 1e+5: 1.947s\n' +
      'uniq - lodash(1000), scatter: 10: 1e+5: 1.767s\n' +
      'uniq - new(1000), scatter: 10: 1e+5: 1.728s\n' +
      '\n' +
      'uniq - original(100, scatter: 10): 1e+6: 2.291s\n' +
      'uniq - lodash(100), scatter: 10: 1e+6: 664.204ms\n' +
      'uniq - new(100), scatter: 10: 1e+6: 1.581s\n' +
      '\n' +
      'uniq - original(100, scatter: 100): 1e+6: 11.730s\n' +
      'uniq - lodash(100), scatter: 100: 1e+6: 3.411s\n' +
      'uniq - new(100), scatter: 100: 1e+6: 2.789s',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'uniq',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'uniq - original(1000, scatter: 10): 1e+5: 1.947s\n' +
                  'uniq - lodash(1000), scatter: 10: 1e+5: 1.767s\n' +
                  'uniq - new(1000), scatter: 10: 1e+5: 1.728s',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 44, offset: 139 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 44, offset: 139 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'uniq - original(1000, scatter: 10): 1e+5: 1.947s\n' +
                  'uniq - lodash(1000), scatter: 10: 1e+5: 1.767s\n' +
                  'uniq - new(1000), scatter: 10: 1e+5: 1.728s',
                position: {
                  start: { line: 5, column: 1, offset: 141 },
                  end: { line: 7, column: 44, offset: 280 }
                }
              }
            ],
            position: {
              start: { line: 5, column: 1, offset: 141 },
              end: { line: 7, column: 44, offset: 280 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'uniq - original(100, scatter: 10): 1e+6: 2.291s\n' +
                  'uniq - lodash(100), scatter: 10: 1e+6: 664.204ms\n' +
                  'uniq - new(100), scatter: 10: 1e+6: 1.581s',
                position: {
                  start: { line: 9, column: 1, offset: 282 },
                  end: { line: 11, column: 43, offset: 421 }
                }
              }
            ],
            position: {
              start: { line: 9, column: 1, offset: 282 },
              end: { line: 11, column: 43, offset: 421 }
            }
          },
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'uniq - original(100, scatter: 100): 1e+6: 11.730s\n' +
                  'uniq - lodash(100), scatter: 100: 1e+6: 3.411s\n' +
                  'uniq - new(100), scatter: 100: 1e+6: 2.789s',
                position: {
                  start: { line: 13, column: 1, offset: 423 },
                  end: { line: 15, column: 44, offset: 563 }
                }
              }
            ],
            position: {
              start: { line: 13, column: 1, offset: 423 },
              end: { line: 15, column: 44, offset: 563 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 15, column: 44, offset: 563 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/uniq.benchmark.js'
  },
  {
    name: 'uniq',
    synopsis: '```coffeescript [specscript]\n' +
      'var T any,\n' +
      '  array Array<T>\n' +
      '\n' +
      'uniq(array) -> Array\n' +
      '```',
    description: 'Get an array of unique values from an array.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import uniq from 'https://unpkg.com/rubico/dist/x/uniq.es.js'\n" +
      '\n' +
      'console.log(\n' +
      '  uniq([1, 2, 2, 3]),\n' +
      ') // [1, 2, 3]\n' +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'uniq',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'var T any,\n  array Array<T>\n\nuniq(array) -> Array',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 82 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 82 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Get an array of unique values from an array.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 45, offset: 44 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 45, offset: 44 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import uniq from 'https://unpkg.com/rubico/dist/x/uniq.es.js'\n" +
              '\n' +
              'console.log(\n' +
              '  uniq([1, 2, 2, 3]),\n' +
              ') // [1, 2, 3]',
            position: {
              start: { line: 3, column: 1, offset: 46 },
              end: { line: 9, column: 4, offset: 189 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 189 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/uniq.js'
  },
  {
    name: 'unless',
    synopsis: '```coffeescript [specscript]\n' +
      'unless(\n' +
      '  predicate any=>Promise|boolean,\n' +
      '  func function,\n' +
      ')(value any) -> Promise|any\n' +
      '```',
    description: 'Execute a function and return the result unless a condition is true, otherwise return the original value.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import unless from 'https://unpkg.com/rubico/dist/x/unless.es.js'\n" +
      '\n' +
      'const isEven = num => num % 2 === 0\n' +
      'const doubleIfOdd = unless(isEven, num => num * 2)\n' +
      '\n' +
      'console.log(doubleIfOdd(100)) // 100\n' +
      'console.log(doubleIfOdd(101)) // 202\n' +
      '```',
    since: '1.7.3',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'unless',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'unless(\n' +
              '  predicate any=>Promise|boolean,\n' +
              '  func function,\n' +
              ')(value any) -> Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 119 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 119 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Execute a function and return the result unless a condition is true, otherwise return the original value.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 106, offset: 105 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 106, offset: 105 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import unless from 'https://unpkg.com/rubico/dist/x/unless.es.js'\n" +
              '\n' +
              'const isEven = num => num % 2 === 0\n' +
              'const doubleIfOdd = unless(isEven, num => num * 2)\n' +
              '\n' +
              'console.log(doubleIfOdd(100)) // 100\n' +
              'console.log(doubleIfOdd(101)) // 202',
            position: {
              start: { line: 3, column: 1, offset: 107 },
              end: { line: 11, column: 4, offset: 366 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 4, offset: 366 }
        }
      },
      since: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '1.7.3',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/unless.js'
  },
  {
    name: 'valuesRace',
    benchmark: 'rubicoValues: 1e+6: 53.064ms\n' +
      'ramdaValues: 1e+6: 544.009ms\n' +
      '_values: 1e+6: 125.737ms',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'valuesRace',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 11, offset: 10 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 11, offset: 10 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 11, offset: 10 }
        }
      },
      benchmark: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'rubicoValues: 1e+6: 53.064ms\n' +
                  'ramdaValues: 1e+6: 544.009ms\n' +
                  '_values: 1e+6: 125.737ms',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 3, column: 25, offset: 82 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 3, column: 25, offset: 82 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 3, column: 25, offset: 82 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/values.benchmark.js'
  },
  {
    name: 'values',
    synopsis: '```coffeescript [specscript]\n' +
      'values<T>(\n' +
      '  object String<T>|Array<T>|Set<T>|Map<any=>T>|Object<T>,\n' +
      ') -> Array<T>\n' +
      '```',
    description: 'Get an array of values from an instance.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import values from 'https://unpkg.com/rubico/dist/x/values.es.js'\n" +
      '\n' +
      'console.log(values({ a: 1, b: 2, c: 3 })) // [1, 2, 3]\n' +
      "console.log(values('abc')) // ['a', 'b', 'c']\n" +
      "console.log(values(new Map([[1, 'hello'], [2, 'world']]))) // ['hello', 'world']\n" +
      '```',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'values',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 7, offset: 6 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 7, offset: 6 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 7, offset: 6 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'values<T>(\n' +
              '  object String<T>|Array<T>|Set<T>|Map<any=>T>|Object<T>,\n' +
              ') -> Array<T>',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 5, column: 4, offset: 115 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 5, column: 4, offset: 115 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Get an array of values from an instance.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 41, offset: 40 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 41, offset: 40 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import values from 'https://unpkg.com/rubico/dist/x/values.es.js'\n" +
              '\n' +
              'console.log(values({ a: 1, b: 2, c: 3 })) // [1, 2, 3]\n' +
              "console.log(values('abc')) // ['a', 'b', 'c']\n" +
              "console.log(values(new Map([[1, 'hello'], [2, 'world']]))) // ['hello', 'world']",
            position: {
              start: { line: 3, column: 1, offset: 42 },
              end: { line: 9, column: 4, offset: 321 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 9, column: 4, offset: 321 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/values.js'
  },
  {
    name: 'when',
    synopsis: '```coffeescript [specscript]\n' +
      'when(\n' +
      '  predicate any=>Promise|boolean,\n' +
      '  func function,\n' +
      ')(value any) -> Promise|any\n' +
      '```',
    description: 'Execute a function and return the result when a condition is true, otherwise return the original value.\n' +
      '\n' +
      '```javascript [playground]\n' +
      "import when from 'https://unpkg.com/rubico/dist/x/when.es.js'\n" +
      '\n' +
      'const isEven = num => num % 2 === 0\n' +
      'const doubleIfEven = when(isEven, num => num * 2)\n' +
      '\n' +
      'console.log(doubleIfEven(100)) // 200\n' +
      'console.log(doubleIfEven(101)) // 101\n' +
      '```',
    since: '1.7.1',
    mdast: {
      name: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'when',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 5, offset: 4 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 5, offset: 4 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 5, offset: 4 }
        }
      },
      synopsis: {
        type: 'root',
        children: [
          {
            type: 'code',
            lang: 'coffeescript',
            meta: '[specscript]',
            value: 'when(\n' +
              '  predicate any=>Promise|boolean,\n' +
              '  func function,\n' +
              ')(value any) -> Promise|any',
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 6, column: 4, offset: 117 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 6, column: 4, offset: 117 }
        }
      },
      description: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: 'Execute a function and return the result when a condition is true, otherwise return the original value.',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 104, offset: 103 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 104, offset: 103 }
            }
          },
          {
            type: 'code',
            lang: 'javascript',
            meta: '[playground]',
            value: "import when from 'https://unpkg.com/rubico/dist/x/when.es.js'\n" +
              '\n' +
              'const isEven = num => num % 2 === 0\n' +
              'const doubleIfEven = when(isEven, num => num * 2)\n' +
              '\n' +
              'console.log(doubleIfEven(100)) // 200\n' +
              'console.log(doubleIfEven(101)) // 101',
            position: {
              start: { line: 3, column: 1, offset: 105 },
              end: { line: 11, column: 4, offset: 361 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 11, column: 4, offset: 361 }
        }
      },
      since: {
        type: 'root',
        children: [
          {
            type: 'paragraph',
            children: [
              {
                type: 'text',
                value: '1.7.1',
                position: {
                  start: { line: 1, column: 1, offset: 0 },
                  end: { line: 1, column: 6, offset: 5 }
                }
              }
            ],
            position: {
              start: { line: 1, column: 1, offset: 0 },
              end: { line: 1, column: 6, offset: 5 }
            }
          }
        ],
        position: {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 6, offset: 5 }
        }
      }
    },
    fileName: '/home/richard/code/rubico.land/../rubico/x/when.js'
  }
]